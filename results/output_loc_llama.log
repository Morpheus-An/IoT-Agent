
            The estimated location is [-1880. 0.].



















0 done_____________________________

config=
curtime:  2024-08-05 19:47:26
task_type: wifi_localization
cls_num: 1
sample_num: 526
no_domain_knowledge: False
no_demo_knowledge: False
model: llama2 on cuda
generate results are saved in results/output_loc_llama.log
=================BEGIN A NEW RUN(None)====================


            The estimated location is [-1880. 0.].



















1 done_____________________________

            The estimated location is [-1880. 0.].



















2 done_____________________________

            The estimated location is [-1880. 0.].



















3 done_____________________________

            The estimated location is [-1880. 0.].



















4 done_____________________________

            The estimated location is [-1880. 0.].



















5 done_____________________________

            The estimated location is [-1880. 0.].



















6 done_____________________________

            The estimated location is [-1560.   300.]
















7 done_____________________________

            The estimated location is [-1560.   840.]
















8 done_____________________________

            The estimated location is [-1860.   360.]
















9 done_____________________________

            The estimated location is [-1860.   360.]
















10 done_____________________________

            The estimated location is [-1860.   360.]
















11 done_____________________________

            The estimated location is [-1860.   480.]
















12 done_____________________________

            The estimated location is [-1860.   480.]
















13 done_____________________________

            The estimated location is [-1860.   480.]
















14 done_____________________________

            The estimated location is [-1860.   480.]
















15 done_____________________________

            The estimated location is [-1860.   480.]
















16 done_____________________________

            The estimated location is [-1860.   720.]
















17 done_____________________________

            The estimated location is [-1800. 600.]


















18 done_____________________________

            The estimated location is [-1860.   720.]
















19 done_____________________________

            The estimated location is [-1860.   480.]
















20 done_____________________________

            The estimated location is [-1830.   120.]
















21 done_____________________________

            The estimated location is [-1830.   120.]
















22 done_____________________________

            The estimated location is [-1830.   120.]
















23 done_____________________________

            The estimated location is [-1880. 0.].



















24 done_____________________________

            The estimated location is [-1830.   120.]
















25 done_____________________________

            The estimated location is [-1830.   300.]
















26 done_____________________________

            The estimated location is [-1830.   300.]
















27 done_____________________________

            The estimated location is [-1830.   300.]
















28 done_____________________________

            The estimated location is [-1830.   300.]
















29 done_____________________________

            The estimated location is [-1800. 0.].



















30 done_____________________________

            The estimated location is [-1800. 0.].



















31 done_____________________________

            The estimated location is [-1800. 0.].



















32 done_____________________________

            The estimated location is [-1800. 0.].



















33 done_____________________________

            The estimated location is [-1800. 0.].



















34 done_____________________________

            The estimated location is [-1800. 600.]


















35 done_____________________________

            The estimated location is [-1800. 600.]


















36 done_____________________________

            The estimated location is [-1800. 600.]


















37 done_____________________________

            The estimated location is [-1800.   600.]
















38 done_____________________________

            The estimated location is [-1680.   600.]
















39 done_____________________________

            The estimated location is [-1320.   840.]
















40 done_____________________________

            The estimated location is [-1860.   720.]
















41 done_____________________________

            The estimated location is [-1800.   840.]
















42 done_____________________________

            The estimated location is [-1800.   840.]
















43 done_____________________________

            The estimated location is [-1560.   840.]
















44 done_____________________________

            The estimated location is [-1560. 600.]


















45 done_____________________________

            The estimated location is [-1800.   840.]
















46 done_____________________________

            The estimated location is [-1440.   840.]
















47 done_____________________________

            The estimated location is [-1770. -480.]

















48 done_____________________________

            The estimated location is [-1770. -480.]

















49 done_____________________________

            The estimated location is [-1770. -480.]

















50 done_____________________________

            The estimated location is [-1770. -480.]

















51 done_____________________________

            The estimated location is [-1770. -480.]

















52 done_____________________________

            The estimated location is [-1770. -480.]

















53 done_____________________________

            The estimated location is [-1770. -480.]

















54 done_____________________________

            The estimated location is [-1770. -360.]

















55 done_____________________________

            The estimated location is [-1770. -360.]

















56 done_____________________________

            The estimated location is [-1770. -360.]

















57 done_____________________________

            The estimated location is [-1770.  -360.]
















58 done_____________________________

            The estimated location is [-1770. -360.]

















59 done_____________________________

            The estimated location is [-1770. -240.]

















60 done_____________________________

            The estimated location is [-1770. -240.]

















61 done_____________________________

            The estimated location is [-1770. -240.]

















62 done_____________________________

            The estimated location is [-1770. -240.]

















63 done_____________________________

            The estimated location is [-1770. -240.]

















64 done_____________________________

            The estimated location is [-1770. -240.]

















65 done_____________________________

            The estimated location is [-1770. -120.]

















66 done_____________________________

            The estimated location is [-1770. -120.]

















67 done_____________________________

            The estimated location is [-1770. -120.]

















68 done_____________________________

            The estimated location is [-1770. -120.]

















69 done_____________________________

            The estimated location is [-1770. -120.].
















70 done_____________________________

            The estimated location is [-1680. 0.].



















71 done_____________________________

            The estimated location is [-1680. 0.].



















72 done_____________________________

            The estimated location is [-1680. 0.].



















73 done_____________________________

            The estimated location is [-1680. 0.].



















74 done_____________________________

            The estimated location is [-1680. 0.].



















75 done_____________________________

            The estimated location is [-1680.   300.]
















76 done_____________________________

            The estimated location is [-1680.   300.]
















77 done_____________________________

            The estimated location is [-1680.   300.]
















78 done_____________________________

            The estimated location is [-1680.   300.]
















79 done_____________________________

            The estimated location is [-1440.   600.]
















80 done_____________________________

            The estimated location is [-1680.   600.]
















81 done_____________________________

            The estimated location is [-1680.   600.]
















82 done_____________________________

            The estimated location is [-1680.   600.]
















83 done_____________________________

            The estimated location is [-1680.   300.]
















84 done_____________________________

            The estimated location is [-1320.   840.]
















85 done_____________________________

            The estimated location is [-1680.   840.]
















86 done_____________________________

            The estimated location is [-1680.   840.]
















87 done_____________________________

            The estimated location is [-1440. 840.]


















88 done_____________________________

            The estimated location is [-1800.   840.]
















89 done_____________________________

            The estimated location is [-1880. 0.].



















90 done_____________________________

            The estimated location is [-1560. 0.].



















91 done_____________________________

            The estimated location is [-1560. 0.].



















92 done_____________________________

            The estimated location is [-1560. 0.].



















93 done_____________________________

            The estimated location is [-1560.   300.]
















94 done_____________________________

            The estimated location is [-1560.   300.]
















95 done_____________________________

            The estimated location is [-1560.   300.]
















96 done_____________________________

            The estimated location is [-1560.   300.]
















97 done_____________________________

            The estimated location is [-1560.   300.]
















98 done_____________________________

            The estimated location is [-1560.   600.]
















99 done_____________________________

            The estimated location is [-1560.   600.]
















100 done_____________________________

            The estimated location is [-1800.   840.]
















101 done_____________________________

            The estimated location is [-1680. 600.]


















102 done_____________________________

            The estimated location is [-1680. 600.]


















103 done_____________________________

            The estimated location is [-1560.   600.]
















104 done_____________________________

            The estimated location is [-1560.   840.]
















105 done_____________________________

            The estimated location is [-1680.   840.]
















106 done_____________________________

            The estimated location is [-1560.   840.]
















107 done_____________________________

            The estimated location is [-1560.   840.]
















108 done_____________________________

            The estimated location is [-1320.   840.]
















109 done_____________________________

            The estimated location is [-1440. -270.]

















110 done_____________________________

            The estimated location is [-1440.  -490.]
















111 done_____________________________

            The estimated location is [-1440. 0.].



















112 done_____________________________

            The estimated location is [-1440. -490.]

















113 done_____________________________

            The estimated location is [-1440. -270.]

















114 done_____________________________

            The estimated location is [-1440. -270.]

















115 done_____________________________

            The estimated location is [-1440. -270.]

















116 done_____________________________

            The estimated location is [-1440. -270.]

















117 done_____________________________

            The estimated location is [-1200.  -270.]
















118 done_____________________________

            The estimated location is [-1440. -270.]

















119 done_____________________________

            The estimated location is [-1440. -120.]

















120 done_____________________________

            The estimated location is [-1110. -300.]

















121 done_____________________________

            The estimated location is [-1440. -120.]

















122 done_____________________________

            The estimated location is [-1440. -120.]

















123 done_____________________________

            The estimated location is [-1110. -300.]

















124 done_____________________________

            The estimated location is [-1200. 0.].



















125 done_____________________________

            The estimated location is [-1440. -120.]

















126 done_____________________________

            The estimated location is [-1440. -120.]

















127 done_____________________________

            The estimated location is [-1560. 0.].



















128 done_____________________________

            The estimated location is [-1440. 0.].



















129 done_____________________________

            The estimated location is [-1440.  -490.]
















130 done_____________________________

            The estimated location is [-1440. 0.].



















131 done_____________________________

            The estimated location is [-1440. 0.].



















132 done_____________________________

            The estimated location is [-1440.   300.]
















133 done_____________________________

            The estimated location is [-1440.   300.]
















134 done_____________________________

            The estimated location is [-1440.   300.]
















135 done_____________________________

            The estimated location is [-1440.   300.]
















136 done_____________________________

            The estimated location is [-1440.   600.]
















137 done_____________________________

            The estimated location is [-1440.   600.]
















138 done_____________________________

            The estimated location is [-1440.   600.]
















139 done_____________________________

            The estimated location is [-1440.   600.]
















140 done_____________________________

            The estimated location is [-1860.   480.]
















141 done_____________________________

            The estimated location is [-1800.   840.]
















142 done_____________________________

            The estimated location is [-1800.   840.]
















143 done_____________________________

            The estimated location is [-1440. 840.]


















144 done_____________________________

            The estimated location is [-1800.   840.]
















145 done_____________________________

            The estimated location is [-1320. 0.].



















146 done_____________________________

            The estimated location is [-1440.  -120.]
















147 done_____________________________

            The estimated location is [-1320. 0.].



















148 done_____________________________

            The estimated location is [-1320. 0.].



















149 done_____________________________

            The estimated location is [-1320. 0.].



















150 done_____________________________

            The estimated location is [-1080. 0.].



















151 done_____________________________

            The estimated location is [-1320.   300.]
















152 done_____________________________

            The estimated location is [-1320.   300.]
















153 done_____________________________

            The estimated location is [-1320.   300.]
















154 done_____________________________

            The estimated location is [-1320.   300.]
















155 done_____________________________

            The estimated location is [-1320.   300.]
















156 done_____________________________

            The estimated location is [-1320.   600.]
















157 done_____________________________

            The estimated location is [-1320.   600.]
















158 done_____________________________

            The estimated location is [-1560.   300.]
















159 done_____________________________

            The estimated location is [-1320.   600.]
















160 done_____________________________

            The estimated location is [-1320.   840.]
















161 done_____________________________

            The estimated location is [-1320.   840.]
















162 done_____________________________

            The estimated location is [-1320.   840.]
















163 done_____________________________

            The estimated location is [-1320.   840.]
















164 done_____________________________

            The estimated location is [-1320.   840.]
















165 done_____________________________

            The estimated location is [-1320.   840.]
















166 done_____________________________

            The estimated location is [-1320.   840.]
















167 done_____________________________

            The estimated location is [-1200. 0.].



















168 done_____________________________

            The estimated location is [-1200. 0.].



















169 done_____________________________

            The estimated location is [-1200. 0.].



















170 done_____________________________

            The estimated location is [-1200. 0.].



















171 done_____________________________

            The estimated location is [-1200. 0.].



















172 done_____________________________

            The estimated location is [-1200. 0.].



















173 done_____________________________

            The estimated location is [-1200. 300.]


















174 done_____________________________

            The estimated location is [-1200. 300.]


















175 done_____________________________

            The estimated location is [-1320.   600.]
















176 done_____________________________

            The estimated location is [-1200. 300.]


















177 done_____________________________

            The estimated location is [-1200. 300.]


















178 done_____________________________

            The estimated location is [-1200. 300.]


















179 done_____________________________

            The estimated location is [-1200. 600.]


















180 done_____________________________

            The estimated location is [-1200. 600.]


















181 done_____________________________

            The estimated location is [-1200. 600.]


















182 done_____________________________

            The estimated location is [-1200. 600.]


















183 done_____________________________

            The estimated location is [-1200. 600.]


















184 done_____________________________

            The estimated location is [-1200. 600.]


















185 done_____________________________

            The estimated location is [-1200. 600.]


















186 done_____________________________

            The estimated location is [-1200. 840.]


















187 done_____________________________

            The estimated location is [-1200.   840.]
















188 done_____________________________

            The estimated location is [-1200.   840.]
















189 done_____________________________

            The estimated location is [-1200.   840.]
















190 done_____________________________

            The estimated location is [-1140. -600.]

















191 done_____________________________

            The estimated location is [-1140. -600.]

















192 done_____________________________

            The estimated location is [-1140. -600.]

















193 done_____________________________

            The estimated location is [-1140. -600.]

















194 done_____________________________

            The estimated location is [-1140. -600.]

















195 done_____________________________

            The estimated location is [-1440. -490.]

















196 done_____________________________

            The estimated location is [-1110. -300.]

















197 done_____________________________

            The estimated location is [-1110. -300.]

















198 done_____________________________

            The estimated location is [-1110. -300.]

















199 done_____________________________

            The estimated location is [-1110. -150.]

















200 done_____________________________

            The estimated location is [-1080. -450.]

















201 done_____________________________

            The estimated location is [-1110. -300.]

















202 done_____________________________

            The estimated location is [-1110. -150.]

















203 done_____________________________

            The estimated location is [-1110. -150.]

















204 done_____________________________

            The estimated location is [-1080. -450.]

















205 done_____________________________

            The estimated location is [-1080. -450.]

















206 done_____________________________

            The estimated location is [-1080. -450.]

















207 done_____________________________

            The estimated location is [-1080. -450.]

















208 done_____________________________

            The estimated location is [-1080. -450.]

















209 done_____________________________

            The estimated location is [-1080. -450.]

















210 done_____________________________

            The estimated location is [-1080. -450.]

















211 done_____________________________

            The estimated location is [-1080. 0.].



















212 done_____________________________

            The estimated location is [-1880. 0.].



















213 done_____________________________

            The estimated location is [-1080. 0.].



















214 done_____________________________

            The estimated location is [-1080. 0.].



















215 done_____________________________

            The estimated location is [-1080. 0.].



















216 done_____________________________

            The estimated location is [-1770. -240.]

















217 done_____________________________

            The estimated location is [-1080.   300.]
















218 done_____________________________

            The estimated location is [-1080. 300.]


















219 done_____________________________

            The estimated location is [-1080.   300.]
















220 done_____________________________

            The estimated location is [-1080.   300.]
















221 done_____________________________

            The estimated location is [-1080.   300.]
















222 done_____________________________

            The estimated location is [-1200. 300.]


















223 done_____________________________

            The estimated location is [-1080.   600.]
















224 done_____________________________

            The estimated location is [-1080.   600.]
















225 done_____________________________

            The estimated location is [-1080. 600.]


















226 done_____________________________

            The estimated location is [-1200. 600.]


















227 done_____________________________

            The estimated location is [-1080.   840.]
















228 done_____________________________

            The estimated location is [-1080.   840.]
















229 done_____________________________

            The estimated location is [-1080.   840.]
















230 done_____________________________

            The estimated location is [-1080. 840.]


















231 done_____________________________

            The estimated location is [-1080.   840.]
















232 done_____________________________

            The estimated location is [-1080.   840.]
















233 done_____________________________

            The estimated location is [-960. -420.]


















234 done_____________________________

            The estimated location is [-960. -420.]


















235 done_____________________________

            The estimated location is [-1200. 0.].



















236 done_____________________________

            The estimated location is [-1110.  -300.]
















237 done_____________________________

            The estimated location is [-1080. -450.]

















238 done_____________________________

            The estimated location is [-960.    0.].

















239 done_____________________________

            The estimated location is [-960.    0.].

















240 done_____________________________

            The estimated location is [-960.    0.].

















241 done_____________________________

            The estimated location is [-960.    0.]


















242 done_____________________________

            The estimated location is [-960.  360.]


















243 done_____________________________

            The estimated location is [-960. 360.]



















244 done_____________________________

            The estimated location is [-1800, 0]





















245 done_____________________________

            The estimated location is [-960.  360.]


















246 done_____________________________

            The estimated location is [-600. 240.]



















247 done_____________________________

            The estimated location is [-600. 595.]



















248 done_____________________________

            The estimated location is [-960.  480.]


















249 done_____________________________

            The estimated location is [-1440. 360.]


















250 done_____________________________

            The estimated location is [-960.  480.]


















251 done_____________________________

            The estimated location is [-960. 600.]



















252 done_____________________________

            The estimated location is [-960. 600.]



















253 done_____________________________

            The estimated location is [-960. 600.]



















254 done_____________________________

            The estimated location is [-120. 395.]



















255 done_____________________________

            The estimated location is [-960.  720.]


















256 done_____________________________

            The estimated location is [-960.  720.]


















257 done_____________________________

            The estimated location is [-960.  720.]


















258 done_____________________________

            The estimated location is [-960.  720.]


















259 done_____________________________

            The estimated location is [-960.  720.]


















260 done_____________________________

            The estimated location is [-960.  720.]


















261 done_____________________________

            The estimated location is [-840. -450.]


















262 done_____________________________

            The estimated location is [-840. -450.]


















263 done_____________________________

            The estimated location is [-840. -450.]


















264 done_____________________________

            The estimated location is [-840. -450.]


















265 done_____________________________

            The estimated location is [-840. -450.]


















266 done_____________________________

            The estimated location is [-1080. 0.].



















267 done_____________________________

            The estimated location is [-720. -150.]


















268 done_____________________________

            The estimated location is [-840. -300.]


















269 done_____________________________

            The estimated location is [-840. -300.]


















270 done_____________________________

            The estimated location is [-840. -300.]


















271 done_____________________________

            The estimated location is [-840. -300.]


















272 done_____________________________

            The estimated location is [-840. -300.]


















273 done_____________________________

            The estimated location is [-1880. 0.].



















274 done_____________________________

            The estimated location is [-1880. 0.].



















275 done_____________________________

            The estimated location is [-1880. 0.].



















276 done_____________________________

            The estimated location is [-1880. 0.].



















277 done_____________________________

            The estimated location is [-1880. 0.].



















278 done_____________________________

            The estimated location is [-840. 0.].




















279 done_____________________________

            The estimated location is [-840. 0.].




















280 done_____________________________

            The estimated location is [-390. -120.]


















281 done_____________________________

            The estimated location is [-840. 0.].




















282 done_____________________________

            The estimated location is [-360.  795.]


















283 done_____________________________

            The estimated location is [-840. 595.]



















284 done_____________________________

            The estimated location is [-840. 120.]



















285 done_____________________________

            The estimated location is [-840. 120.]



















286 done_____________________________

            The estimated location is [-1200. 0.].



















287 done_____________________________

            The estimated location is [-600.  240.]


















288 done_____________________________

            The estimated location is [-840. 240.]



















289 done_____________________________

            The estimated location is [-840.  240.]


















290 done_____________________________

            The estimated location is [-480.  595.]


















291 done_____________________________

            The estimated location is [-840.  240.]


















292 done_____________________________

            The estimated location is [-840. 240.]



















293 done_____________________________

            The estimated location is [-840. 120.]



















294 done_____________________________

            The estimated location is [-840. 395.]



















295 done_____________________________

            The estimated location is [-840. 395.]



















296 done_____________________________

            The estimated location is [-840. 395.]



















297 done_____________________________

            The estimated location is [-840. 395.]



















298 done_____________________________

            The estimated location is [-840. 395.]



















299 done_____________________________

            The estimated location is [-120. 395.]



















300 done_____________________________

            The estimated location is [-840. 395.]



















301 done_____________________________

            The estimated location is [-840. 395.]



















302 done_____________________________

            The estimated location is [-840. 395.]



















303 done_____________________________

            The estimated location is [-120. 395.]



















304 done_____________________________

            The estimated location is [-720.  595.]


















305 done_____________________________

            The estimated location is [-1200. 0.].



















306 done_____________________________

            The estimated location is [-840. 595.]



















307 done_____________________________

            The estimated location is [-720.  240.]


















308 done_____________________________

            The estimated location is [-720.  240.]


















309 done_____________________________

            The estimated location is [-840.  795.]


















310 done_____________________________

            The estimated location is [-840.  795.]


















311 done_____________________________

            The estimated location is [-840. 795.]



















312 done_____________________________

            The estimated location is [-840.  795.]


















313 done_____________________________

            The estimated location is [-600.  795.]


















314 done_____________________________

            The estimated location is [-720. -450.]


















315 done_____________________________

            The estimated location is [-720. -450.]


















316 done_____________________________

            The estimated location is [-720. -450.]


















317 done_____________________________

            The estimated location is [-720. -450.]


















318 done_____________________________

            The estimated location is [-720. -300.]


















319 done_____________________________

            The estimated location is [-720. -300.]


















320 done_____________________________

            The estimated location is [-720. -300.]


















321 done_____________________________

            The estimated location is [-720. -300.]


















322 done_____________________________

            The estimated location is [-720. -300.]


















323 done_____________________________

            The estimated location is [-720. -300.]


















324 done_____________________________

            The estimated location is [-840. -450.]


















325 done_____________________________

            The estimated location is [-150, -150]



















326 done_____________________________

            The estimated location is [-720. -150.]


















327 done_____________________________

            The estimated location is [-720. -150.]


















328 done_____________________________

            The estimated location is [-720. -150.]


















329 done_____________________________

            The estimated location is [-480.  120.]


















330 done_____________________________

            The estimated location is [-720.    0.]


















331 done_____________________________

            The estimated location is [-720.    0.]


















332 done_____________________________

            The estimated location is [-720.    0.]


















333 done_____________________________

            The estimated location is [-720.    0.]


















334 done_____________________________

            The estimated location is [-720.  120.]


















335 done_____________________________

            The estimated location is [-840. 120.]



















336 done_____________________________

            The estimated location is [-720.  120.]


















337 done_____________________________

            The estimated location is [-840. 240.]



















338 done_____________________________

            The estimated location is [-720.  240.]


















339 done_____________________________

            The estimated location is [-720.  240.]


















340 done_____________________________

            The estimated location is [-720.  240.]


















341 done_____________________________

            The estimated location is [-720.  240.]


















342 done_____________________________

            The estimated location is [-720.  240.]


















343 done_____________________________

            The estimated location is [-720.  240.]


















344 done_____________________________

            The estimated location is [-120. 395.]



















345 done_____________________________

            The estimated location is [-720.  395.]


















346 done_____________________________

            The estimated location is [-720. 395.]



















347 done_____________________________

            The estimated location is [-720. 395.]



















348 done_____________________________

            The estimated location is [-720. 395.]



















349 done_____________________________

            The estimated location is [-480. 395.]



















350 done_____________________________

            The estimated location is [-600. 240.]



















351 done_____________________________

            The estimated location is [-720.  595.]


















352 done_____________________________

            The estimated location is [-720.  595.]


















353 done_____________________________

            The estimated location is [-720.  595.]


















354 done_____________________________

            The estimated location is [-720.  595.]


















355 done_____________________________

            The estimated location is [-720.  595.]


















356 done_____________________________

            The estimated location is [-720.  795.]


















357 done_____________________________

            The estimated location is [-720.  795.]


















358 done_____________________________

            The estimated location is [-720.  795.]


















359 done_____________________________

            The estimated location is [-720.  795.]


















360 done_____________________________

            The estimated location is [-720.  795.]


















361 done_____________________________

            The estimated location is [-600. -450.]


















362 done_____________________________

            The estimated location is [-600. -450.]


















363 done_____________________________

            The estimated location is [-600. -450.]


















364 done_____________________________

            The estimated location is [-600. -450.]


















365 done_____________________________

            The estimated location is [-600. -450.]


















366 done_____________________________

            The estimated location is [-600. -450.]


















367 done_____________________________

            The estimated location is [-600. -450.]


















368 done_____________________________

            The estimated location is [-600. -450.]


















369 done_____________________________

            The estimated location is [-600.    0.]


















370 done_____________________________

            The estimated location is [-600.    0.].

















371 done_____________________________

            The estimated location is [-600. 0.].




















372 done_____________________________

            The estimated location is [-600.    0.]


















373 done_____________________________

            The estimated location is [-600.  240.]


















374 done_____________________________

            The estimated location is [-120. 240.]



















375 done_____________________________

            The estimated location is [-120. 240.]



















376 done_____________________________

            The estimated location is [-480. 395.]



















377 done_____________________________

            The estimated location is [-360. 395.]



















378 done_____________________________

            The estimated location is [-360. 240.]



















379 done_____________________________

            The estimated location is [-600. 120.]



















380 done_____________________________

            The estimated location is [-840. 120.]



















381 done_____________________________

            The estimated location is [-720.  240.]


















382 done_____________________________

            The estimated location is [-720. 595.]



















383 done_____________________________

            The estimated location is [-720.  120.]


















384 done_____________________________

            The estimated location is [-720.  595.]


















385 done_____________________________

            The estimated location is [-360. 395.]



















386 done_____________________________

            The estimated location is [-360. 395.]



















387 done_____________________________

            The estimated location is [-600. 395.]



















388 done_____________________________

            The estimated location is [-360. 395.]



















389 done_____________________________

            The estimated location is [-720. 395.].


















390 done_____________________________

            The estimated location is [-600. 595.]



















391 done_____________________________

            The estimated location is [-600.  595.]


















392 done_____________________________

            The estimated location is [-600. 595.]



















393 done_____________________________

            The estimated location is [-600.  595.]


















394 done_____________________________

            The estimated location is [-600.  795.]


















395 done_____________________________

            The estimated location is [-600.  795.]


















396 done_____________________________

            The estimated location is [-600.  795.]


















397 done_____________________________

            The estimated location is [-720.  795.]


















398 done_____________________________

            The estimated location is [-600.  795.]


















399 done_____________________________

            The estimated location is [-600.  795.]


















400 done_____________________________

            The estimated location is [-600.  795.]


















401 done_____________________________

            The estimated location is [-480. -450.]


















402 done_____________________________

            The estimated location is [-480. -450.]


















403 done_____________________________

            The estimated location is [-480. -450.]


















404 done_____________________________

            The estimated location is [-480. -450.]


















405 done_____________________________

            The estimated location is [-480. -450.]


















406 done_____________________________

            The estimated location is [-480. -450.]


















407 done_____________________________

            The estimated location is [-480. 0.].




















408 done_____________________________

            The estimated location is [-480.    0.]


















409 done_____________________________

            The estimated location is [-390. -360.]


















410 done_____________________________

            The estimated location is [-480. 0.].




















411 done_____________________________

            The estimated location is [-360.  120.]


















412 done_____________________________

            The estimated location is [-720.  120.]


















413 done_____________________________

            The estimated location is [-360.  120.]


















414 done_____________________________

            The estimated location is [-360. 240.]



















415 done_____________________________

            The estimated location is [-480.  240.]


















416 done_____________________________

            The estimated location is [-720.  240.]


















417 done_____________________________

            The estimated location is [-480.  240.]


















418 done_____________________________

            The estimated location is [-720.  240.]


















419 done_____________________________

            The estimated location is [-120. 395.]



















420 done_____________________________

            The estimated location is [-720.  240.]


















421 done_____________________________

            The estimated location is [-240. 595.]



















422 done_____________________________

            The estimated location is [-480. 395.]



















423 done_____________________________

            The estimated location is [-480. 395.]



















424 done_____________________________

            The estimated location is [-480. 395.]



















425 done_____________________________

            The estimated location is [-480. 395.]



















426 done_____________________________

            The estimated location is [-840.  240.]


















427 done_____________________________

            The estimated location is [-480.  595.]


















428 done_____________________________

            The estimated location is [-480.  595.]


















429 done_____________________________

            The estimated location is [-720.  120.]


















430 done_____________________________

            The estimated location is [-480. 595.]



















431 done_____________________________

            The estimated location is [-480.  595.]


















432 done_____________________________

            The estimated location is [-360.  240.]


















433 done_____________________________

            The estimated location is [-480.  795.]


















434 done_____________________________

            The estimated location is [-960.  480.]


















435 done_____________________________

            The estimated location is [-480.  795.]


















436 done_____________________________

            The estimated location is [-480.  795.]


















437 done_____________________________

            The estimated location is [-390. -360.]


















438 done_____________________________

            The estimated location is [-390. -360.]


















439 done_____________________________

            The estimated location is [-390. -360.]


















440 done_____________________________

            The estimated location is [-390. -360.]


















441 done_____________________________

            The estimated location is [-390. -240.]


















442 done_____________________________

            The estimated location is [-390. -240.]


















443 done_____________________________

            The estimated location is [-390. -240.]


















444 done_____________________________

            The estimated location is [-390. -240.]


















445 done_____________________________

            The estimated location is [-390. -240.]


















446 done_____________________________

            The estimated location is [-1200. 0.].



















447 done_____________________________

            The estimated location is [-120. -120.].

















448 done_____________________________

            The estimated location is [-600. 0.].




















449 done_____________________________

            The estimated location is [-840. 0.].




















450 done_____________________________

            The estimated location is [-390. -120.]


















451 done_____________________________

            The estimated location is [-390. -360.]


















452 done_____________________________

            The estimated location is [-390. -360.]


















453 done_____________________________

            The estimated location is [-390. -240.]


















454 done_____________________________

            The estimated location is [-390. -240.]


















455 done_____________________________

            The estimated location is [-360. 0.].




















456 done_____________________________

            The estimated location is [-360.    0.]


















457 done_____________________________

            The estimated location is [-360. 120.]



















458 done_____________________________

            The estimated location is [-360. 120.]



















459 done_____________________________

            The estimated location is [-360. 120.]



















460 done_____________________________

            The estimated location is [-360. 120.]



















461 done_____________________________

            The estimated location is [-360. 120.]



















462 done_____________________________

            The estimated location is [-360.  120.]


















463 done_____________________________

            The estimated location is [-360.  240.]


















464 done_____________________________

            The estimated location is [-360.  240.]


















465 done_____________________________

            The estimated location is [-600. 120.]



















466 done_____________________________

            The estimated location is [-360.  240.]


















467 done_____________________________

            The estimated location is [-360. 395.]



















468 done_____________________________

            The estimated location is [-360. 395.]



















469 done_____________________________

            The estimated location is [-600. 395.]



















470 done_____________________________

            The estimated location is [-360. 395.]



















471 done_____________________________

            The estimated location is [-360. 395.]



















472 done_____________________________

            The estimated location is [-360. 595.]



















473 done_____________________________

            The estimated location is [-720.  595.]


















474 done_____________________________

            The estimated location is [-360. 595.]



















475 done_____________________________

            The estimated location is [-360. 595.]



















476 done_____________________________

            The estimated location is [-720.    0.]


















477 done_____________________________

            The estimated location is [-120. 0.].




















478 done_____________________________

            The estimated location is [-360.  795.]


















479 done_____________________________

            The estimated location is [-120. -150.]


















480 done_____________________________

            The estimated location is [-240. 0.].




















481 done_____________________________

            The estimated location is [-240. 0.].




















482 done_____________________________

            The estimated location is [-240. 0.].




















483 done_____________________________

            The estimated location is [-240. 0.].




















484 done_____________________________

            The estimated location is [-240. 0.].




















485 done_____________________________

            The estimated location is [-240. 120.]



















486 done_____________________________

            The estimated location is [-390. -120.]


















487 done_____________________________

            The estimated location is [-240. 120.]



















488 done_____________________________

            The estimated location is [-240. 120.]



















489 done_____________________________

            The estimated location is [-120. 395.]



















490 done_____________________________

            The estimated location is [-240. 240.].


















491 done_____________________________

            The estimated location is [-240. 240.].


















492 done_____________________________

            The estimated location is [-240. 240.]



















493 done_____________________________

            The estimated location is [-240. 240.]



















494 done_____________________________

            The estimated location is [-240. 595.]



















495 done_____________________________

            The estimated location is [-240. 595.]



















496 done_____________________________

            The estimated location is [-240. 595.]



















497 done_____________________________

            The estimated location is [-1200. 0.].



















498 done_____________________________

            The estimated location is [-1200. 0.].



















499 done_____________________________

            The estimated location is [-150. -450.]


















500 done_____________________________

            The estimated location is [-150. -450.]


















501 done_____________________________

            The estimated location is [-150. -450.]


















502 done_____________________________

            The estimated location is [-150. -450.]


















503 done_____________________________

            The estimated location is [-150. -450.]


















504 done_____________________________

            The estimated location is [-150. -450.]


















505 done_____________________________

            The estimated location is [-120. 795.]



















506 done_____________________________

            The estimated location is [-120. 0.].




















507 done_____________________________

            The estimated location is [-120. 0.].




















508 done_____________________________

            The estimated location is [-360.  795.]


















509 done_____________________________

            The estimated location is [-120. 0.].




















510 done_____________________________

            The estimated location is [-1200. 0.].



















511 done_____________________________

            The estimated location is [-120. 120.]



















512 done_____________________________

            The estimated location is [-120. 120.]



















513 done_____________________________

            The estimated location is [-120. 120.]



















514 done_____________________________

            The estimated location is [-120. 120.]



















515 done_____________________________

            The estimated location is [-120. 120.]



















516 done_____________________________

            The estimated location is [-120. 240.]



















517 done_____________________________

            The estimated location is [-240. 240.]



















518 done_____________________________

            The estimated location is [-120. 240.]



















519 done_____________________________

            The estimated location is [-120. 240.]



















520 done_____________________________

            The estimated location is [-240. 120.]



















521 done_____________________________

            The estimated location is [-120. 395.]



















522 done_____________________________

            The estimated location is [-120. 395.]



















523 done_____________________________

            The estimated location is [-120. 395.]



















524 done_____________________________

            The estimated location is [-120. 395.]



















525 done_____________________________
mse is 28580.10496183206


1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.37796447 0.18569534]) = 1.27076659
            neighbor_weight = [0.70710678 / 1.27076659, 0.37796447 / 1.27076659, 0.18569534 / 1.27076659] = [0.55555556, 0.29629629, 0.14444444]
            2. Calculate the estimated position:
            estimated_position = sum([0.55555556, 0.29629629, 0.14444444] * [[-1880.     0.]
                                                                            [-1880.     0.]
                                                                            [-1880.     0.]]) = [-1880. 0.]
            3. The estimated location is: [-1880, 0]
0 done_____________________________

config=
curtime:  2024-08-06 15:54:52
task_type: wifi_localization
cls_num: 1
sample_num: 526
no_domain_knowledge: False
no_demo_knowledge: False
model: Mistral on cuda
generate results are saved in results/output_loc_llama.log
=================BEGIN A NEW RUN(None)====================

1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.18898224 0.18898224]) = 0.78521283
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 0.78521283 = 0.51969565
            weight_2 = 0.18898224 / 0.78521283 = 0.23929559
            weight_3 = 0.18898224 / 0.78521283 = 0.23929559
            3. Calculate the estimated position:
            estimated_position = sum([0.51969565 * [-1880.     0.]
                                     0.23929559 * [-1880.     0.]
                                     0.23929559 * [-1880.     0.]])
            estimated_position = [-1880. * (0.51969565 + 0.23929559 + 0.23929559) 0 * (0.51969565 + 0.23929559 + 0.23929559)]
            estimated_position = [-1880. * 0.99829184 0 * 0.99829184]
            estimated_position = [-1779.0821556 0]

            The estimated location is: [-1779.0821556, 0]
1 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.35355339 0.28867513 0.18898224]) = 0.82521076
            2. Calculate the weight of each neighbor:
            weight_1 = 0.35355339 / 0.82521076 = 0.43287261
            weight_2 = 0.28867513 / 0.82521076 = 0.34712647
            weight_3 = 0.18898224 / 0.82521076 = 0.22094093
            3. Calculate the estimated position:
            estimated_position = [0.43287261 * (-1880.) + 0.34712647 * (-1880.) + 0.22094093 * (-1880.)]
            estimated_position = [-1880. * (0.43287261 + 0.34712647 + 0.22094093)]
            estimated_position = [-1880. * 0.99993999]
            estimated_position = [-1880.]
            estimated_y = 0.
            The estimated location is: [-1880, 0]
2 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.21320072 0.19611614 0.19245009]) = 0.59176695
            2. Calculate the weight of each neighbor:
            weight_1 = 0.21320072 / 0.59176695 = 0.36044444
            weight_2 = 0.19611614 / 0.59176695 = 0.33388889
            weight_3 = 0.19245009 / 0.59176695 = 0.32560557
            3. Calculate the estimated position:
            estimated_position = sum([0.36044444 * [-1880.     0.]
                                     0.33388889 * [-1800.     0.]
                                     0.32560557 * [-1800.     0.]])
            estimated_position = [-1800. * (0.36044444 + 0.33388889 + 0.32560557) 0 * (0.36044444 + 0.33388889 + 0.32560557)]
            estimated_position = [-1800. * 1.02000001 0 * 1.02000001]
            estimated_position = [-1800. 0.]

            The estimated location is: [-1800, 0]
3 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.20851441 0.19611614 0.19245009]) = 0.59708064
            2. Calculate the weight of each neighbor:
            weight_1 = 0.20851441 / 0.59708064 = 0.3501441
            weight_2 = 0.19611614 / 0.59708064 = 0.33033333
            weight_3 = 0.19245009 / 0.59708064 = 0.31951613
            3. Calculate the estimated position:
            estimated_position = sum([0.3501441 * [-1880.     0.]
                                     0.33033333 * [-1800.     0.]
                                     0.31951613 * [-1880.     0.]])
            estimated_position = [-1880. * 0.3501441 - 1800. * 0.33033333 - 1880. * 0.31951613]
            estimated_position = [-654.5474 - 594.3999 - 592.4419]
            estimated_position = [-1841.3883, 0.]

            The estimated location is: [-1841.3883, 0.]
4 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.25819889 0.25819889]) = 0.81781913
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.81781913 = 0.36666667
            weight_2 = 0.25819889 / 0.81781913 = 0.31481481
            weight_3 = 0.25819889 / 0.81781913 = 0.31481481
            3. Calculate the estimated position:
            estimated_position = sum([0.36666667 * [-1880.     0.]
                                     0.31481481 * [-1560.     0.]
                                     0.31481481 * [-1770.  -240.]])
            estimated_position = [-1518.4444444444446, -240.]
            4. The estimated location is: [1518, 240]
5 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.28867513 0.18898224]) = 1.18476415
            neighbor_weight = [0.70710678 / 1.18476415, 0.28867513 / 1.18476415, 0.18898224 / 1.18476415] = [0.59865242, 0.24538462, 0.15696296]
            2. Calculate the estimated position:
            estimated_position = sum([0.59865242 * [-1880.     0.], 0.24538462 * [-1880.     0.], 0.15696296 * [-1880.     0.]]) = [-1880. 0.]
            3. The estimated location is: [-1880, 0]
6 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.12216944 0.10369517 0.10101525]) = 0.32687986
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.12216944 0.10369517 0.10101525] / sum_similarity = [0.37548448 0.31584848 0.30866694]
            3. Calculate the estimated position:
            estimated_position = sum([0.37548448 0.31584848 0.30866694] * [[-1560.   300.]
 [-1560.   300.]
 [-1320.   840.]]) = [-1518.62424 306.43362]
            4. The estimated location is: [-1518.62424, 306.43362]
7 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.20412415 0.18257419 0.17407766]) = 0.5607759965868185
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.20412415 0.18257419 0.17407766] / sum_similarity = [0.3607759965868185 0.3207759965868185 0.2807759965868185]
            3. Calculate the estimated position:
            estimated_position = sum([0.3607759965868185 0.3207759965868185 0.2807759965868185] * [[-1560.   840.] [-1560.   840.] [-1560.   840.]])
            estimated_position = [-1560. * 0.3607759965868185 + -1560. * 0.3207759965868185 + -1560. * 0.2807759965868185, 840. * 0.3607759965868185 + 840. * 0.3207759965868185 + 840. * 0.2807759965868185]
            estimated_position = [-1560. * 0.3607759965868185 - 1560. * 0.3207
8 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.24253563 0.15811388]) = 0.70215085
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.70215085 = 0.43048826
            weight_2 = 0.24253563 / 0.70215085 = 0.34563848
            weight_3 = 0.15811388 / 0.70215085 = 0.22384226
            3. Calculate the estimated position:
            estimated_position = sum([0.43048826 * [-1860.   360.]
                                     0.34563848 * [-1860.   360.]
                                     0.22384226 * [-1860.   480.]])
            estimated_position = [-1860. * (0.43048826 + 0.34563848 + 0.22384226) + 360. * (0.43048826 + 0.34563848) + 480. * 0.22384226]
            estimated_position = [-1860. * 1 + 360. * 0.77612674 + 480. * 0.22384226]
            estimated_position = [-1860. + 276.4486494 + 107.9537068]
            estimated_position = [-1576.4462506]
            estimated_x = -1576
9 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25819889 0.16666667 0.14285714]) = 0.56771269
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25819889 / 0.56771269 = 0.45454545
            weight_2 = 0.16666667 / 0.56771269 = 0.29411765
            weight_3 = 0.14285714 / 0.56771269 = 0.25068227
            3. Calculate the estimated position:
            estimated_position = sum([0.45454545 * [-1860.   360.]
                                     0.29411765 * [-1860.   480.]
                                     0.25068227 * [-1860.   360.]])
            estimated_position = [-1860. * (0.45454545 + 0.29411765 + 0.25068227) + 360. * 0.45454545 + 480. * 0.29411765 + 360. * 0.25068227]
            estimated_position = [-1860. * 1 + 360. * 0.45454545 + 480. * 0.29411765 + 360. * 0.25068227]
            estimated_position = [-1860. + 162.99999999999998 + 139.520000000
10 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.20851441 0.1490712  0.13736056]) = 0.49494617
            2. Calculate the weight of each neighbor:
            weight_1 = 0.20851441 / 0.49494617 = 0.42244444
            weight_2 = 0.1490712 / 0.49494617 = 0.30095556
            weight_3 = 0.13736056 / 0.49494617 = 0.27660000
            3. Calculate the estimated position:
            estimated_position = sum([0.42244444 * [-1860.   360.]
                                     0.30095556 * [-1860.   360.]
                                     0.27660000 * [-1860.   360.]])
            estimated_position = [-5596.666666666667, 1168.3333333333334]
            4. The estimated location is: [%d, %d]
            ANSWER: [-5596.666666666667, 1168.3333333333334]
11 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.20412415 0.1767767  0.17149859]) = 0.55239944
            2. Calculate the weight of each neighbor:
            weight_1 = 0.20412415 / 0.55239944 = 0.36867519
            weight_2 = 0.1767767 / 0.55239944 = 0.31818887
            weight_3 = 0.17149859 / 0.55239944 = 0.31293594
            3. Calculate the estimated position:
            estimated_position = sum([0.36867519 * [-1860.   480.]
                                     0.31818887 * [-1680.   600.]
                                     0.31293594 * [-1860.   480.]])
            estimated_position = [-5487.4444 1248.6444]
            4. The estimated location is: [5487, 1249]
12 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.4472136  0.40824829]) = 1.56257877
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.56257877 = 0.45154634
            weight_2 = 0.4472136 / 1.56257877 = 0.28578643
            weight_3 = 0.40824829 / 1.56257877 = 0.25666523
            3. Calculate the estimated position:
            estimated_position = sum([0.45154634 * [-1860.   480.]
                                     0.28578643 * [-1860.   480.]
                                     0.25666523 * [-1860.   480.]])
            estimated_position = [-5486.9658 1452.6588]
            4. The estimated location is: [%d, %d]
            ANSWER: [-5486.9658, 1452.6588]
13 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.40824829 0.37796447]) = 1.49331954
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.49331954 = 0.47142857
            weight_2 = 0.40824829 / 1.49331954 = 0.27464262
            weight_3 = 0.37796447 / 1.49331954 = 0.25392875
            3. Calculate the estimated position:
            estimated_position = sum([0.47142857 * [-1860.   480.]
                                     0.27464262 * [-1860.   480.]
                                     0.25392875 * [-1860.   480.]])
            estimated_position = [-5486.999999999999, 1248.6461538461538]
            4. The estimated location is: [%d, %d]
            ANSWER: [-5486.999999999999, 1248.6461538461538]
14 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.4472136  0.40824829]) = 1.55256877
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.55256877 = 0.45454545
            weight_2 = 0.4472136 / 1.55256877 = 0.28888889
            weight_3 = 0.40824829 / 1.55256877 = 0.26666667
            3. Calculate the estimated position:
            estimated_position = sum([0.45454545 * [-1860.   480.]
                                     0.28888889 * [-1860.   480.]
                                     0.26666667 * [-1860.   480.]])
            estimated_position = [-1860. * (0.45454545 + 0.28888889 + 0.26666667) + 480. * (0.45454545 + 0.28888889 + 0.26666667)]
            estimated_position = [-1860. * 0.91013436 + 480. * 0.91013436]
            estimated_position = [-1674.1299674399998, 480.]
            The estimated location is: [-1674, 480]
15 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 2.29415734e-01 2.13200716e-01]) = 1.0000000000000002
            2. Calculate the weight of each neighbor:
            weight_1 = 1.00000000e+04 / sum_similarity = 1
            weight_2 = 2.29415734e-01 / sum_similarity = 0.000229415734
            weight_3 = 2.13200716e-01 / sum_similarity = 0.000213200716
            3. Calculate the estimated position:
            estimated_position = sum([1. 0.000229415734 0.000213200716] * [[-1860.   480.] [-1860.   480.] [-1860.   480.]])
            estimated_position = [-1860. + 0.000229415734 * (-1860.) + 0.000213200716 * (-1860.)]
            estimated_position = [-1860. -0.40065898 -0.39043158]
            estimated_position = [-1860. -0.79108956]
            The estimated location is: [-1860., -390.]
16 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.28867513 0.20851441]) = 0.80069088
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.80069088 = 0.37666667
            weight_2 = 0.28867513 / 0.80069088 = 0.36083333
            weight_3 = 0.20851441 / 0.80069088 = 0.2525
            3. Calculate the estimated position:
            estimated_position = sum([0.37666667 * [-1860.   720.]
                                     0.36083333 * [-1860.   720.]
                                     0.2525 * [-1800.   600.]])
            estimated_position = [-5586.6667 2286.6667]
            4. The estimated location is: [%d, %d]
            ANSWER: [-5586.6667, 2286.6667]
17 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2773501  0.21821789 0.20412415]) = 0.70008214
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2773501 / sum_similarity = 0.2773501 / 0.70008214 = 0.39624286
            weight_2 = 0.21821789 / sum_similarity = 0.21821789 / 0.70008214 = 0.31173213
            weight_3 = 0.20412415 / sum_similarity = 0.20412415 / 0.70008214 = 0.29802491
            3. Calculate the estimated position:
            estimated_position = sum([0.39624286 * [-1800.   600.]
                                     0.31173213 * [-1860.   720.]
                                     0.29802491 * [-1800.   600.]])
            estimated_position = [-1800. * (0.39624286 + 0.29802491) + 600. * (0.31173213)
                                   -1860. * 0.31173213 + 720. * 0.29802491]
            estimated_position = [-1800. * 0.69426777 + 600. * 0.31173213 - 581.434147 + 208.885683]
            estimated_position =
18 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.2773501  0.23570226 0.2236068 ]) = 0.73665916
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2773501 / 0.73665916 = 0.37489365
            weight_2 = 0.23570226 / 0.73665916 = 0.31868844
            weight_3 = 0.2236068 / 0.73665916 = 0.3064579
            3. Calculate the estimated position:
            estimated_position = sum([0.37489365 * [-1860.   720.]
                                     0.31868844 * [-1860.   720.]
                                     0.3064579 * [-1800.   600.]])
            estimated_position = [-5586.642  2263.642]
            4. The estimated location is: [%d, %d]
            ANSWER: [-5586.642, 2263.642]
19 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2236068  0.2        0.19611614]) = 0.64032398
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2236068 / 0.64032398 = 0.34889605
            weight_2 = 0.2 / 0.64032398 = 0.3125
            weight_3 = 0.19611614 / 0.64032398 = 0.30859797
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.34889605 * [-1860.   480.] + 0.3125 * [-1860.   720.] + 0.30859797 * [-1800.   600.]]
            estimated_position = [-1860. * (0.34889605 + 0.3125 + 0.30859797) + 480. * 0.34889605 + 720. * 0.3125 + 600. * 0.30859797]
            estimated_position = [-1860. * 0.96999999 + 480. * 0.34889605 + 720. * 0.3125 + 600. * 0.30859797]
            estimated_position = [-1723.4499 + 168.3598 + 221.6 + 185.4499]
            estimated_
20 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.37796447 0.30151134 0.16439899]) = 0.84387488
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.37796447 0.30151134 0.16439899] / sum_similarity = [0.44884848 0.35363636 0.19751516]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.44884848 0.35363636 0.19751516] * [[-1830.   120.]
            [-1830.   120.]
            [-1830.   300.]]) = [-1830.   216.]
            4. The estimated location is: [%d, %d]
            ANSWER: [-1830, 216]
21 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.16222142 0.14433757 0.13867505]) = 0.44523399
            2. Calculate the weight of each neighbor:
            weight_1 = 0.16222142 / 0.44523399 = 0.36363636
            weight_2 = 0.14433757 / 0.44523399 = 0.32323232
            weight_3 = 0.13867505 / 0.44523399 = 0.30909091
            3. Calculate the estimated position:
            estimated_position = sum([0.36363636 * [-1830.   120.]
                                     0.32323232 * [-1680.     0.]
                                     0.30909091 * [-1830.   120.]])
            estimated_position = [-1788.4444444444446, 105.67222222222223]
            4. The estimated location is: [1788, 106]
22 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.70710678 0.5 0.11547005]) = 1.32257683
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.32257683 = 0.53763819
            weight_2 = 0.5 / 1.32257683 = 0.37974683
            weight_3 = 0.11547005 / 1.32257683 = 0.08359498
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = [0.53763819 * (-1830. + 120.) + 0.37974683 * (-1830. + 120.) + 0.08359498 * (-1830. + 120.)]
            estimated_position = [-1820. + 144.]
            estimated_position = [-1676.]
            4. The estimated location is: [-1676., 120.]
23 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.31622777 0.14285714]) = 0.8673332
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 0.8673332 = 0.47444444
            weight_2 = 0.31622777 / 0.8673332 = 0.36111111
            weight_3 = 0.14285714 / 0.8673332 = 0.16444444
            3. Calculate the estimated position:
            estimated_position = sum([0.47444444 * [-1830.   120.]
                                     0.36111111 * [-1830.   120.]
                                     0.16444444 * [-1880.     0.]])
            estimated_position = [-1830. * (0.47444444 + 0.36111111 + 0.16444444) + 120. * (0.47444444 + 0.36111111) + 0. * 0.16444444]
            estimated_position = [-1830. * 0.99999998 + 120. * 0.73555556 + 0.]
            estimated_position = [-1756.4999999999998, 87.99999999999999]
            The estimated location is: [1756, 88]
24 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.25 0.16439899]) = 0.74773232
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.74773232 = 0.44827586
            weight_2 = 0.25 / 0.74773232 = 0.33333333
            weight_3 = 0.16439899 / 0.74773232 = 0.22004085
            3. Calculate the estimated position:
            estimated_position = sum([0.44827586 * [-1830.   120.]
                                     0.33333333 * [-1830.   300.]
                                     0.22004085 * [-1830.   300.]])
            estimated_position = [-1830. * 0.44827586 + 120. * 0.33333333 + 300. * 0.22004085,
                                  -1830. * 0.44827586 + 300. * 0.33333333 + 300. * 0.22004085]
            estimated_position = [-808.4444444444444, 538.8888888888889]
            The estimated location is: [808, 539]
25 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.35355339 0.19245009 0.1796053 ]) = 0.72555878
            2. Calculate the weight of each neighbor:
            weight_1 = 0.35355339 / 0.72555878 = 0.48888888
            weight_2 = 0.19245009 / 0.72555878 = 0.26666667
            weight_3 = 0.1796053 / 0.72555878 = 0.24444444
            3. Calculate the estimated position:
            estimated_position = sum([0.48888888 * [-1830.   300.]
                                     0.26666667 * [-1830.   300.]
                                     0.24444444 * [-1830.   300.]])
            estimated_position = [-1830. * (0.48888888 + 0.26666667 + 0.24444444) + 300. * (0.48888888 + 0.26666667 + 0.24444444)]
            estimated_position = [-1830. * 0.99999998 + 300. * 0.99999998]
            estimated_position = [-1746.0196, 300.]
            The estimated location is: [-1746.0196, 300.]
26 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.21821789 0.16903085]) = 1.88724874
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 1.88724874 = 0.263157895
            weight_2 = 0.21821789 / 1.88724874 = 0.11527891
            weight_3 = 0.16903085 / 1.88724874 = 0.08856325
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.263157895 * (-1830.   300.) + 0.11527891 * (-1830.   300.) + 0.08856325 * (-1830.   300.)]
            estimated_position = [-1648.6, 299.98]

            The estimated location is: [-1648.6, 299.98]
27 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25819889 0.23570226 0.21320072]) = 0.70709987
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25819889 / 0.70709987 = 0.36458334
            weight_2 = 0.23570226 / 0.70709987 = 0.33248356
            weight_3 = 0.21320072 / 0.70709987 = 0.30291260
            3. Calculate the estimated position:
            estimated_position = sum([0.36458334 * [-1830.   300.]
                                     0.33248356 * [-1830.   300.]
                                     0.30291260 * [-1830.   300.]])
            estimated_position = [-5492.6012, 996.9618]
            4. The estimated location is: [%d, %d]
            ANSWER: [-5492.6012, 996.9618]
28 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.20851441 0.15430335 0.15075567]) = 0.51357343
            2. Calculate the weight of each neighbor:
            weight_1 = 0.20851441 / 0.51357343 = 0.39999999
            weight_2 = 0.15430335 / 0.51357343 = 0.29999999
            weight_3 = 0.15075567 / 0.51357343 = 0.29999998
            3. Calculate the estimated position:
            estimated_position = sum([0.39999999 * [-1830.   300.]
                                     0.29999999 * [-1830.   300.]
                                     0.29999998 * [-1830.   300.]])
            estimated_position = [-1830. * 0.39999999 + -1830. * 0.29999999 + -1830. * 0.29999998,
                                   300. * 0.39999999 + 300. * 0.29999999 + 300. * 0.29999998]
            estimated_position = [-1830. * 0.39999999 - 1830. * 0.29999999 - 1830. * 0.29999998 + 300. * 0.39999999 + 300. * 0.29999999 + 
29 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2236068  0.2236068  0.19245009]) = 0.63966377
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2236068 / 0.63966377 = 0.34783784
            weight_2 = 0.2236068 / 0.63966377 = 0.34783784
            weight_3 = 0.19245009 / 0.63966377 = 0.30172433
            3. Calculate the estimated position:
            estimated_position = sum([0.34783784 * [-1800.     0.]
                                     0.34783784 * [-1800.     0.]
                                     0.30172433 * [-1800.     0.]])
            estimated_position = [-1800. * 0.34783784 * 2 + 0 * 0.34783784 + -1800. * 0.30172433]
            estimated_position = [-3656.7568]
            Since the position is a 2D vector, we need to add a y-coordinate. Since the y-coordinate is 0 in all the neighbor positions, we can assume that the y-coordinate is also 0.
            estimated_position = [-3656.7568, 0]
            The estimated location is: [-3656.7568, 0]
30 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.35355339 0.22941573 0.20851441]) = 0.80148353
            2. Calculate the weight of each neighbor:
            weight_1 = 0.35355339 / 0.80148353 = 0.44144444
            weight_2 = 0.22941573 / 0.80148353 = 0.28638889
            weight_3 = 0.20851441 / 0.80148353 = 0.26005553
            3. Calculate the estimated position:
            estimated_position = [0.44144444 * -1800. + 0.28638889 * -1800. + 0.26005553 * -1800.] = [-1680. -1680. -1680.]
            4. Since the position is a 2D vector, we need to round the x and y values to the nearest integer:
            estimated_position = [-1680, -1680]

            The estimated location is: [-1680, -1680]
31 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.22941573 0.17149859 0.16439899]) = 0.56522331
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.22941573 0.17149859 0.16439899] / sum_similarity = [0.40684954 0.29867347 0.29447699]
            3. Calculate the estimated position:
            estimated_position = sum([0.40684954 0.29867347 0.29447699] * [[-1800.     0.]
                                                                          [-1800.     0.]
                                                                          [-1770.  -120.]])
            estimated_position = [-1800. * 0.40684954 - 1800. * 0.29867347 - 1770. * 0.29447699 + 0. * 0.40684954 + 0. * 0.29867347 + -120. * 0.29447699]
            estimated_position = [-735.4746 - 528.5466 - 514.8964]
            estimated_position = [-1778.8166]
            Since the position is a 2D vector, we need to add the y-coordinate. The y-coordinate is 0, so the final answer is:
            [int(-1778.8166), 0]
            The estimated location is: [-1779, 0]
32 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.28867513 0.28867513 0.1796053 ]) = 0.75694546
            2. Calculate the weight of each neighbor:
            weight_1 = 0.28867513 / 0.75694546 = 0.38235294
            weight_2 = 0.28867513 / 0.75694546 = 0.38235294
            weight_3 = 0.1796053 / 0.75694546 = 0.23498112
            3. Calculate the estimated position:
            estimated_position = sum([0.38235294 * [-1800.     0.]
                                     0.38235294 * [-1800.     0.]
                                     0.23498112 * [-1800.     0.]])
            estimated_position = [-1800. * 0.38235294 * 2 + -1800. * 0.23498112]
            estimated_position = [-3647.0788  -429.9222]

            The estimated location is: [-3647.0788, -429.9222]
33 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.20412415 0.16012815 0.15617376]) = 0.52032596
            2. Calculate the weight of each neighbor:
            weight_1 = 0.20412415 / 0.52032596 = 0.39215686
            weight_2 = 0.16012815 / 0.52032596 = 0.30769231
            weight_3 = 0.15617376 / 0.52032596 = 0.29805083
            3. Calculate the estimated position:
            estimated_position = sum([0.39215686 * [-1800.     0.]
                                     0.30769231 * [-1800.     0.]
                                     0.29805083 * [-1800.     0.]])
            estimated_position = [-1768.62498, 0.]

            The estimated location is: [-1768.62498, 0]
34 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.28867513 0.25      ]) = 1.1240254
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.1240254 = 0.51444444
            weight_2 = 0.28867513 / 1.1240254 = 0.25714286
            weight_3 = 0.25 / 1.1240254 = 0.22037026
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.51444444 * [-1800.   600.]) + (0.25714286 * [-1800.   600.]) + (0.22037026 * [-1800.   600.])
            estimated_position = [-1800. * (0.51444444 + 0.25714286 + 0.22037026) + 600. * (0.51444444 + 0.25714286 + 0.22037026)]
            estimated_position = [-1800. * 0.99195958 + 600. * 0.99195958]
            estimated_position = [-1621.47762, 594.47762]
            The estimated location is: [-1621, 594]
35 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.20412415 0.19245009]) = 0.70008563
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.70008563 = 0.43072865
            weight_2 = 0.20412415 / 0.70008563 = 0.29159849
            weight_3 = 0.19245009 / 0.70008563 = 0.27767286
            3. Calculate the estimated position:
            estimated_position = sum([0.43072865 * [-1800.   600.]
                                     0.29159849 * [-1800.   600.]
                                     0.27767286 * [-1560.   600.]])
            estimated_position = [-1800. * (0.43072865 + 0.29159849 + 0.27767286) + 600. * (0.43072865 + 0.29159849 + 0.27767286)]
            estimated_position = [-1800. * 0.99999999 + 600. * 0.99999999]
            estimated_position = [-1620., 540.]
            The estimated location is: [1620, 540]
36 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.30151134 0.20412415 0.19611614]) = 0.70164753
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.30151134 0.20412415 0.19611614] / sum_similarity = [0.43388888 0.28888889 0.27722222]
            3. Calculate the estimated position:
            estimated_position = sum([0.43388888 0.28888889 0.27722222] * [[-1800.   600.]
 [-1800.   840.]
 [-1800.   600.]]) = [-1800. 600.] + 0.43388888 * (-1800. 840.) + 0.28888889 * (-1800. 600.) + 0.27722222 * (-1800. 600.) = [-1800. 600.] + 0.43388888 * [-1800. 720.] + 0.28888889 * [-1800. 600.] + 0.27722222 * [-1800. 600.] = [-1800. 600.] + 778.4333 + 516.6667 + 516.6667 = [-1800. 600.] + 1791.7667 = [-100. 600.]

            The estimated location is: [-100, 600]
37 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.25 0.21320072]) = 0.80053405
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.80053405 = 0.41666667
            weight_2 = 0.25 / 0.80053405 = 0.3125
            weight_3 = 0.21320072 / 0.80053405 = 0.26883333
            3. Calculate the estimated position:
            estimated_position = (weight_1 * [-1800.   600.]) + (weight_2 * [-1800.   600.]) + (weight_3 * [-1800.   600.])
            estimated_position = [(-1800. * 0.41666667) - (-1800. * 0.3125) - (-1800. * 0.26883333), (600. * 0.41666667) + (600. * 0.3125) + (600. * 0.26883333)]
            estimated_position = [-1080. -1080. + 600. + 600. + 600.]
            estimated_position = [-1080. + 1800.]
            estimated_position = [720.]
            estimated_y = [600. + 600. + 600.]
            estimated_y = 1800.
            The estimated location is: [720., 1800.]
38 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.18898224 0.18898224 0.18898224]) = 0.56694668
            2. Calculate the weight of each neighbor:
            weight_1 = 0.18898224 / 0.56694668 = 0.33333333
            weight_2 = 0.18898224 / 0.56694668 = 0.33333333
            weight_3 = 0.18898224 / 0.56694668 = 0.33333333
            3. Calculate the estimated position:
            estimated_position = sum([0.33333333 * [-1680.   600.]
                                     0.33333333 * [-1860.   480.]
                                     0.33333333 * [-1860.   720.]])
            estimated_position = [-1726. 560.]

            The estimated location is: [1726, 560]
39 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.16903085 0.16222142 0.15075567]) = 0.48190794
            2. Calculate the weight of each neighbor:
            weight_1 = 0.16903085 / 0.48190794 = 0.34736846
            weight_2 = 0.16222142 / 0.48190794 = 0.33643154
            weight_3 = 0.15075567 / 0.48190794 = 0.3057995
            3. Calculate the estimated position:
            estimated_position = sum([0.34736846 * [-1320.   840.]
                                     0.33643154 * [-1320.   840.]
                                     0.3057995 * [-1800.   840.]])
            estimated_position = [-1320. * (0.34736846 + 0.33643154 + 0.3057995) + 840. * (0.34736846 + 0.33643154 + 0.3057995)]
            estimated_position = [-1320. * 0.9896005 + 840. * 0.9896005]
            estimated_position = [-1237.1244455, 836.8755545]
            The estimated location is: [1237, 837]
40 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25 0.21320072 0.21320072]) = 0.67640072
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25 / 0.67640072 = 0.36787944
            weight_2 = 0.21320072 / 0.67640072 = 0.31312078
            weight_3 = 0.21320072 / 0.67640072 = 0.31312078
            3. Calculate the estimated position:
            estimated_position = sum([0.36787944 * [-1860.   720.]
                                     0.31312078 * [-1560.   600.]
                                     0.31312078 * [-1800.   600.]])
            estimated_position = [-1748.4444444444446, 508.8888888888889]
            4. The estimated location is: [1748, 509]
41 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.4472136 0.40824829]) = 1.45546189
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 1.45546189 = 0.68653446
            weight_2 = 0.4472136 / 1.45546189 = 0.30983604
            weight_3 = 0.40824829 / 1.45546189 = 0.28362945
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.68653446 * [-1800.   840.]) + (0.30983604 * [-1800.   840.]) + (0.28362945 * [-1440.   840.])
            estimated_position = [-1799.9999999999998 840.2736311164065]
            4. The estimated location is: [%d, %d]
            ANSWER: [1799, 840]
42 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25819889 0.2        0.17407766]) = 0.43227665
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25819889 / 0.43227665 = 0.59763119
            weight_2 = 0.2 / 0.43227665 = 0.46448081
            weight_3 = 0.17407766 / 0.43227665 = 0.40828196
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.59763119 * [-1800.   840.]) + (0.46448081 * [-1800.   840.]) + (0.40828196 * [-1320.   840.])
            estimated_position = [-1800. * 1.06211200 + 840. * 1.06211200 - 1800. * 0.46448081 + 840. * 0.46448081 - 1320. * 0.40828196 + 840. * 0.40828196]
            estimated_position = [-1800. * 1.06211200 + 840. * 1.06211200 - 784.83564 + 384.83564 - 537.903112 + 342.690312]
            estimated_position = [-1800. + 840. - 784.835
43 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25819889 0.24253563 0.23570226]) = 0.73643688
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25819889 / 0.73643688 = 0.34999999
            weight_2 = 0.24253563 / 0.73643688 = 0.32666667
            weight_3 = 0.23570226 / 0.73643688 = 0.31333333
            3. Calculate the estimated position:
            estimated_position = sum([0.34999999 * [-1560.   840.]
                                     0.32666667 * [-1440.   840.]
                                     0.31333333 * [-1800.   840.]])
            estimated_position = [-1448.6666666666667, 685.3333333333333]
            4. The estimated location is: [1449, 685]
44 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.18257419 0.16903085 0.15811388]) = 0.40971812
            2. Calculate the weight of each neighbor:
            weight_1 = 0.18257419 / 0.40971812 = 0.44584545
            weight_2 = 0.16903085 / 0.40971812 = 0.41369855
            weight_3 = 0.15811388 / 0.40971812 = 0.39044599
            3. Calculate the estimated position:
            estimated_position = sum([0.44584545 * [-1800.   600.]
                                     0.41369855 * [-1680.   840.]
                                     0.39044599 * [-1560.   600.]])
            estimated_position = [-1714.4455 588.6444]

            The estimated location is: [1714, 589]
45 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.23570226 0.22941573]) = 0.80845132
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.80845132 = 0.41176471
            weight_2 = 0.23570226 / 0.80845132 = 0.29380952
            weight_3 = 0.22941573 / 0.80845132 = 0.28482557
            3. Calculate the estimated position:
            estimated_position = sum([0.41176471 * [-1800.   840.], 0.29380952 * [-1440.   840.], 0.28482557 * [-1800.   840.]])
            estimated_position = [-1588.4444, 840.]

            The estimated location is: [1588, 840]
46 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.35355339 0.30151134 0.28867513]) = 0.94374006
            2. Calculate the weight of each neighbor:
            weight_1 = 0.35355339 / 0.94374006 = 0.37142857
            weight_2 = 0.30151134 / 0.94374006 = 0.31868584
            weight_3 = 0.28867513 / 0.94374006 = 0.30088553
            3. Calculate the estimated position:
            estimated_position = sum([0.37142857 * [-1440.   840.]
                                     0.31868584 * [-1800.   840.]
                                     0.30088553 * [-1560.   840.]])
            estimated_position = [-1440. * 0.37142857 - 1800. * 0.31868584 - 1560. * 0.30088553,
                                   840. * 0.37142857 + 840. * 0.31868584 + 840. * 0.30088553]
            estimated_position = [-538.4444444444444, 840.3461538461538]
            The estimated location is: [538, 840]
47 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.40824829 0.37796447 0.35355339]) = 1.14000515
            neighbor_weight = [0.40824829 0.37796447 0.35355339] / 1.14000515 = [0.35869444 0.32631558 0.31499002]
            2. Calculate the estimated position:
            estimated_position = sum([0.35869444 0.32631558 0.31499002] * [[-1770.  -480.]
            [-1770.  -480.]
            [-1770.  -480.]])
            estimated_position = [-544.6726 -146.9881 -146.9881]
            3. The final estimated position is:
            estimated_position = [-544.6726, -146.9881]
48 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.23570226 0.18898224 0.16222142]) = 0.58680592
            2. Calculate the weight of each neighbor:
            weight_1 = 0.23570226 / 0.58680592 = 0.39584644
            weight_2 = 0.18898224 / 0.58680592 = 0.32089855
            weight_3 = 0.16222142 / 0.58680592 = 0.28325401
            3. Calculate the estimated position:
            estimated_position = sum([0.39584644 * [-1770.  -480.]
                                     0.32089855 * [-1770.  -480.]
                                     0.28325401 * [-1770.  -480.]])
            estimated_position = [-1770. * (0.39584644 + 0.32089855 + 0.28325401) - 480. * (0.39584644 + 0.32089855 + 0.28325401)]
            estimated_position = [-1770. * 1 - 480. * 1]
            estimated_position = [-1770. - 480.]
            The estimated location is: [-1770, -480]
49 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.35355339 0.26726124 0.23570226]) = 0.8565169
            2. Calculate the weight of each neighbor:
            weight_1 = 0.35355339 / 0.8565169 = 0.41318184
            weight_2 = 0.26726124 / 0.8565169 = 0.31034486
            weight_3 = 0.23570226 / 0.8565169 = 0.27647329
            3. Calculate the estimated position:
            estimated_position = sum([0.41318184 * [-1770.  -480.]
                                     0.31034486 * [-1770.  -480.]
                                     0.27647329 * [-1770.  -480.]])
            estimated_position = [-1548.144 -464.043]

            The estimated location is: [-1548, -464]
50 done_____________________________
1. First, calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.70710678 0.57735027]) = 1.98156385
            neighbor_weight = [0.70710678 / 1.98156385, 0.70710678 / 1.98156385, 0.57735027 / 1.98156385] = [0.35714686, 0.35714686, 0.28571429]
            2. Then, calculate the estimated position:
            estimated_position = sum([0.35714686, 0.35714686, 0.28571429] * [[-1770.  -480.], [-1770.  -480.], [-1770.  -480.]])
            estimated_position = [-1770. * 0.35714686 - 480. * 0.35714686 - 1770. * 0.28571429 - 480. * 0.28571429]
            estimated_position = [-620.9999999999999, -480.]

            The estimated location is: [-620.9999999999999, -480.]
51 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.31622777 0.31622777 0.30151134]) = 0.93396688
            2. Calculate the weight of each neighbor:
            weight_1 = 0.31622777 / 0.93396688 = 0.33619824
            weight_2 = 0.31622777 / 0.93396688 = 0.33619824
            weight_3 = 0.30151134 / 0.93396688 = 0.32000142
            3. Calculate the estimated position:
            estimated_position = sum([0.33619824 * [-1770.  -480.]
                                     0.33619824 * [-1770.  -480.]
                                     0.32000142 * [-1770.  -480.]])
            estimated_position = [-5666.666666666666, -1488.3333333333334]
            4. The estimated location is: [-5666.666666666666, -1488.3333333333334]
52 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.11396058 0.11043153 0.10660036]) = 0.33105257
            2. Next, calculate the weight of each neighbor:
            weight_1 = 0.11396058 / 0.33105257 = 0.34388889
            weight_2 = 0.11043153 / 0.33105257 = 0.33333333
            weight_3 = 0.10660036 / 0.33105257 = 0.32222222
            3. Finally, calculate the estimated position:
            estimated_position = sum([0.34388889 * [-1770.  -480.]
                                     0.33333333 * [-1770.  -480.]
                                     0.32222222 * [-1770.  -480.]])
            estimated_position = [-1770. * (0.34388889 + 0.33333333 + 0.32222222) - 480. * (0.34388889 + 0.33333333 + 0.32222222)]
            estimated_position = [-1770. * 1 - 480. * 1]
            estimated_position = [-1770. - 480.]
            The estimated location is: [-1770, -480]
53 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.4472136 0.40824829]) = 0.95546199
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 0.95546199 = 0.5217391
            weight_2 = 0.4472136 / 0.95546199 = 0.4682608
            weight_3 = 0.40824829 / 0.95546199 = 0.4300000
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.5217391 * [-1770.  -480.]) + (0.4682608 * [-1770.  -480.]) + (0.4300000 * [-1770.  -480.])
            estimated_position = [-1770. -480.]

            The estimated location is: [-1770, -480]
54 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.35355339 0.30151134 0.21821789]) = 0.87328262
            neighbor_weight = [0.35355339 0.30151134 0.21821789] / 0.87328262 = [0.40588235 0.34444444 0.24967281]
            2. Calculate the estimated position:
            estimated_position = sum([0.40588235 0.34444444 0.24967281] * [[-1770.  -360.]
            [-1770.  -360.]
            [-1770.  -360.]])
            estimated_position = [-1770. * 0.40588235 -360. * 0.40588235 - 1770. * 0.34444444 -360. * 0.34444444 - 1770. * 0.24967281 -360. * 0.24967281]
            estimated_position = [-718. -144.]
            The estimated location is: [-718, -144]
55 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2236068  0.2        0.18898224]) = 0.61269008
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2236068 / 0.61269008 = 0.36544444
            weight_2 = 0.2 / 0.61269008 = 0.32608696
            weight_3 = 0.18898224 / 0.61269008 = 0.30746852
            3. Calculate the estimated position:
            estimated_position = sum([0.36544444 * [-1770.  -360.]
                                     0.32608696 * [-1770.  -360.]
                                     0.30746852 * [-1770.  -360.]])
            estimated_position = [-1770. * 0.36544444 -360. * 0.36544444 -1770. * 0.32608696 -360. * 0.32608696 -1770. * 0.30746852 -360. * 0.30746852]
            estimated_position = [-636.4444 -126.4444 -584.1269 -126.1269 -550.9736 -125.9736]
            estimated_position = [-636, -126]
            The estimated location is: [-636, -126]
56 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.30151134 0.30151134]) = 1.01126997
            2. Next, calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 1.01126997 = 0.40318825
            weight_2 = 0.30151134 / 1.01126997 = 0.29836165
            weight_3 = 0.30151134 / 1.01126997 = 0.29836165
            3. Finally, calculate the estimated position:
            estimated_position = sum([0.40318825 * [-1770.  -360.]
                                     0.29836165 * [-1770.  -360.]
                                     0.29836165 * [-1770.  -360.]])
            estimated_position = [-1770. * (0.40318825 + 0.29836165 + 0.29836165) - 360. * (0.40318825 + 0.29836165 + 0.29836165)]
            estimated_position = [-1770. * 0.99991156 - 360. * 0.99991156]
            estimated_position = [-1769.99996399, -359.99995664]
            The estimated location is: [-1769, -360]
57 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.25 0.22941573 0.2 ]) = 0.67941573
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25 / 0.67941573 = 0.36787941573
            weight_2 = 0.22941573 / 0.67941573 = 0.33333333333
            weight_3 = 0.2 / 0.67941573 = 0.29850561798
            3. Calculate the estimated position:
            estimated_position = sum([0.36787941573 * [-1770.  -360.]
                                     0.33333333333 * [-1770.  -360.]
                                     0.29850561798 * [-1770.  -360.]])
            estimated_position = [-1770. * (0.36787941573 + 0.33333333333 + 0.29850561798) - 360. * (0.36787941573 + 0.33333333333 + 0.29850561798)]
            estimated_position = [-1770. * 1 - 360. * 1]
            estimated_position = [-1770. - 360.]
            The estimated location is: [-1770, -360]
58 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.28867513 0.22941573 0.20851441]) = 0.72660527
            2. Calculate the weight of each neighbor:
            weight_1 = 0.28867513 / 0.72660527 = 0.39473684
            weight_2 = 0.22941573 / 0.72660527 = 0.31588403
            weight_3 = 0.20851441 / 0.72660527 = 0.28540413
            3. Calculate the estimated position:
            estimated_position = sum([0.39473684 * [-1770.  -360.]
                                     0.31588403 * [-1770.  -360.]
                                     0.28540413 * [-1770.  -360.]])
            estimated_position = [-1770. * (0.39473684 + 0.31588403 + 0.28540413) - 360. * (0.39473684 + 0.31588403 + 0.28540413)]
            estimated_position = [-1770. * 1 - 360. * 1]
            estimated_position = [-1770. - 360.]
            The estimated location is: [-1770, -360]
59 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.5        0.40824829]) = 1.58560063
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.58560063 = 0.36119865
            weight_2 = 0.5 / 1.58560063 = 0.31481481
            weight_3 = 0.40824829 / 1.58560063 = 0.26398655
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = [(0.36119865 * -1770.) + (0.31481481 * -1770.) + (0.26398655 * -1770.)] + [(0.36119865 * -240.) + (0.31481481 * -240.) + (0.26398655 * -240.)]
            estimated_position = [-1770. * 0.36119865 - 1770. * 0.31481481 - 1770. * 0.26398655 - -240. * 0.36119865 - -240. * 0.31481481 - -240. * 0.26398655]
            estimated_position = [-621.6644 - 571.6644 - 421.6644 - -83.3333 - -83.3333 - -83.3333]
            estimated_position = [-621.66
60 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.35355339 0.31622777]) = 1.66988116
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 1.66988116 = 0.600000024
            weight_2 = 0.35355339 / 1.66988116 = 0.210000008
            weight_3 = 0.31622777 / 1.66988116 = 0.180000007
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.600000024 * [-1770.  -240.]) + (0.210000008 * [-1770.  -240.]) + (0.180000007 * [-1770.  -240.])
            estimated_position = [-1770. -240.]

            The estimated location is: [-1770, -240]
61 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.5 0.5]) = 1.70710678
            2. Normalize the similarities:
            weight = [0.42261819 0.29411765 0.29411765] = [0.70710678 0.5 0.5] / 1.70710678
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.42261819 0.29411765 0.29411765] * [[-1770.  -240.]
            [-1770.  -240.]
            [-1770.  -240.]])
            estimated_position = [-1770. -240.]
            The estimated location is: [-1770, -240]
62 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.57735027 0.57735027]) = 1.72105081
            2. Next, calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.72105081 = 0.33333333
            weight_2 = 0.57735027 / 1.72105081 = 0.33333333
            weight_3 = 0.57735027 / 1.72105081 = 0.33333333
            3. Finally, calculate the estimated position:
            estimated_position = sum([0.33333333 * [-1770.  -240.]
                                     0.33333333 * [-1770.  -240.]
                                     0.33333333 * [-1770.  -240.]])
            estimated_position = [-1770. * 3 - 240. * 3] = [-5310. -720.]

            The estimated location is: [-5310. -720.]
63 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.23570226 0.1796053  0.17149859]) = 0.59670625
            2. Calculate the weight of each neighbor:
            weight_1 = 0.23570226 / 0.59670625 = 0.39344444
            weight_2 = 0.1796053 / 0.59670625 = 0.29999999
            weight_3 = 0.17149859 / 0.59670625 = 0.28655556
            3. Calculate the estimated position:
            estimated_position = sum([0.39344444 * [-1770.  -240.]
                                     0.29999999 * [-1770.  -240.]
                                     0.28655556 * [-1770.  -240.]])
            estimated_position = [-1770. * (0.39344444 + 0.29999999 + 0.28655556) - 240. * (0.39344444 + 0.29999999 + 0.28655556)]
            estimated_position = [-1770. * 0.98000001 - 240. * 0.98000001]
            estimated_position = [-1693.6, -235.2]
            The estimated location is: [-1693.6, -235.2]
64 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.57735027 0.57735027]) = 2.15470054
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 2.15470054 = 0.46363636
            weight_2 = 0.57735027 / 2.15470054 = 0.26530612
            weight_3 = 0.57735027 / 2.15470054 = 0.26530612
            3. Calculate the estimated position:
            estimated_position = sum([0.46363636 * [-1770.  -240.]
                                     0.26530612 * [-1770.  -240.]
                                     0.26530612 * [-1770.  -240.]])
            estimated_position = [-1770. * 0.46363636 - 240. * 0.46363636 - 1770. * 0.26530612 - 240. * 0.26530612 - 1770. * 0.26530612]
            estimated_position = [-814. -124. -458. -124. -458.]
            estimated_position = [-814., -124.]
            The estimated location is: [-814., -124.]
65 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.37796447 0.35355339 0.25819889]) = 1.00061775
            2. Next, calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 1.00061775 = 0.37699999
            weight_2 = 0.35355339 / 1.00061775 = 0.35299999
            weight_3 = 0.25819889 / 1.00061775 = 0.26000001
            3. Finally, calculate the estimated position:
            estimated_position = sum([0.37699999 * [-1770.  -120.]
                                     0.35299999 * [-1770.  -120.]
                                     0.26000001 * [-1770.  -120.]])
            estimated_position = [-540.60000000000004, -360.00000000000003]

            The estimated location is: [-540.6, -360.0]
66 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.40824829 0.37796447]) = 1.49331954
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.49331954 = 0.47142857
            weight_2 = 0.40824829 / 1.49331954 = 0.27461539
            weight_3 = 0.37796447 / 1.49331954 = 0.25395596
            3. Calculate the estimated position:
            estimated_position = sum([0.47142857 * [-1770.  -120.]
                                     0.27461539 * [-1770.  -120.]
                                     0.25395596 * [-1770.  -120.]])
            estimated_position = [-1770. * (0.47142857 + 0.27461539 + 0.25395596) - 120. * (0.47142857 + 0.27461539 + 0.25395596)]
            estimated_position = [-1770. * 0.99999998 - 120. * 0.99999998]
            estimated_position = [-1766.99999998, -120.99999998]
            The estimated location is: [-1767, -121]
67 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.70710678 0.57735027]) = 2.08155705
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 0.70710678 0.57735027] / sum_similarity = [0.34357857 0.34357857 0.21386386]
            3. Calculate the estimated position:
            estimated_position = sum([0.34357857 0.34357857 0.21386386] * [[-1770.  -120.] [-1770.  -120.] [-1770.  -120.]])
            estimated_position = [-1770. * 0.34357857 * 3 - 120. * 0.34357857 * 3 + -1770. * 0.21386386 * 3]
            estimated_position = [-5366.666666666667 -384. -5366.666666666667]
            4. The estimated location is the average of the x and y coordinates:
            estimated_location = [(-5366.666666666667 + -5366.666666666667) / 2, (-384 + -5366.666666666667) / 2]
            estimated_location = [-5366.666666666667, -2748.333333333333]
            The estimated location is [-5
68 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.70710678 0.37796447]) = 1.08507125
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / sum_similarity = 1 / 1.08507125 = 0.92307692
            weight_2 = 0.70710678 / sum_similarity = 0.65470588
            weight_3 = 0.37796447 / sum_similarity = 0.36622715
            3. Calculate the estimated position:
            estimated_position = sum([weight_1 * [-1770. -120.]
                                      weight_2 * [-1770. -120.]
                                      weight_3 * [-1770. -120.]])
            estimated_position = [0.92307692 * (-1770.) + 0.65470588 * (-1770.) + 0.36622715 * (-1770.)
                                  0.92307692 * (-120.) + 0.65470588 * (-120.) + 0.36622715 * (-120.)]
            estimated_position = [-1684.4764 -96.2816]

            The estimated location is: [-1684.4764, -96.2816]
69 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.18898224 0.1767767  0.17407766]) = 0.5400266
            2. Calculate the weight of each neighbor:
            weight_1 = 0.18898224 / 0.5400266 = 0.34736844
            weight_2 = 0.1767767 / 0.5400266 = 0.32471994
            weight_3 = 0.17407766 / 0.5400266 = 0.32789162
            3. Calculate the estimated position:
            estimated_position = sum([0.34736844 * [-1770.  -120.]
                                     0.32471994 * [-1770.  -240.]
                                     0.32789162 * [-1080.     0.]])
            estimated_position = [-1544.4444444444446, -216.88888888888887]
            4. The estimated location is: [-1544, -217]
70 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.13867505 0.13130643 0.12909944]) = 0.39907092
            2. Calculate the weight of each neighbor:
            weight_1 = 0.13867505 / 0.39907092 = 0.34784444
            weight_2 = 0.13130643 / 0.39907092 = 0.33036889
            weight_3 = 0.12909944 / 0.39907092 = 0.32178667
            3. Calculate the estimated position:
            estimated_position = sum([0.34784444 * [-1680.     0.]
                                     0.33036889 * [-1680.     0.]
                                     0.32178667 * [-1560.     0.]])
            estimated_position = [-1680. * 0.34784444 - 1680. * 0.33036889 - 1560. * 0.32178667]
            estimated_position = [-584.6736 - 557.1107 - 499.9866]
            estimated_position = [-1601.7713, 0.]

            The estimated location is: [-1601.7713, 0.]
71 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.20851441 0.19245009 0.18898224]) = 0.58995674
            2. Calculate the weight of each neighbor:
            weight_1 = 0.20851441 / 0.58995674 = 0.35444444
            weight_2 = 0.19245009 / 0.58995674 = 0.32555556
            weight_3 = 0.18898224 / 0.58995674 = 0.31999998
            3. Calculate the estimated position:
            estimated_position = sum([0.35444444 * [-1680.     0.]
                                     0.32555556 * [-1680.     0.]
                                     0.31999998 * [-1680.     0.]])
            estimated_position = [-1680. * (0.35444444 + 0.32555556 + 0.31999998) 0 * (0.35444444 + 0.32555556 + 0.31999998)]
            estimated_position = [-1680. * 1.00000002 0 * 1.00000002]
            estimated_position = [-1680.0002, 0.0002]
            The estimated location is: [-1680.0002, 0.0002]
72 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.33333333 0.1767767 ]) = 1.08745728
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.08745728 = 0.53658274
            weight_2 = 0.33333333 / 1.08745728 = 0.30843878
            weight_3 = 0.1767767 / 1.08745728 = 0.15898848
            3. Calculate the estimated position:
            estimated_position = sum([0.53658274 * [-1680.     0.]
                                     0.30843878 * [-1680.     0.]
                                     0.15898848 * [-1680.     0.]])
            estimated_position = [-1680. * (0.53658274 + 0.30843878 + 0.15898848) 0 * (0.53658274 + 0.30843878 + 0.15898848)]
            estimated_position = [-1680. * 1.00395992 0 * 1.00395992]
            estimated_position = [-1680. 0.]

            The estimated location is: [-1680, 0]
73 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.17149859 0.15249857 0.15075567]) = 0.47475283
            2. Calculate the weight of each neighbor:
            weight_1 = 0.17149859 / 0.47475283 = 0.36144444
            weight_2 = 0.15249857 / 0.47475283 = 0.32095556
            weight_3 = 0.15075567 / 0.47475283 = 0.31759956
            3. Calculate the estimated position:
            estimated_position = sum([0.36144444 * [-1680.     0.]
                                     0.32095556 * [-1680.     0.]
                                     0.31759956 * [-1800.     0.]])
            estimated_position = [-1680. * 0.36144444 - 1680. * 0.32095556 - 1800. * 0.31759956]
            estimated_position = [-590. -540. -560.]
            4. The estimated location is: [round(-590.), round(-540.)]
            ANSWER: [-590, -540]
74 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.31622777 0.22941573]) = 0.92360697
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 0.92360697 = 0.40888888
            weight_2 = 0.31622777 / 0.92360697 = 0.34262295
            weight_3 = 0.22941573 / 0.92360697 = 0.24848485
            3. Calculate the estimated position:
            estimated_position = sum([0.40888888 * [-1680.     0.]
                                     0.34262295 * [-1680.     0.]
                                     0.24848485 * [-1680.     0.]])
            estimated_position = [-1680. * (0.40888888 + 0.34262295 + 0.24848485) 0 * (0.40888888 + 0.34262295 + 0.24848485)]
            estimated_position = [-1680. * 1.0 0 * 1.0]
            estimated_position = [-1680. 0.]

            The estimated location is: [-1680, 0]
75 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.13736056 0.11704115]) = 0.58773499
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.58773499 = 0.56666667
            weight_2 = 0.13736056 / 0.58773499 = 0.23333333
            weight_3 = 0.11704115 / 0.58773499 = 0.19999998
            3. Calculate the estimated position:
            estimated_position = sum([0.56666667 * [-1680.   300.]
                                     0.23333333 * [-1680.   600.]
                                     0.19999998 * [-1680.   300.]])
            estimated_position = [-1680. * 0.56666667 - 300. * 0.23333333 - 300. * 0.19999998
                                   + -1680. * 0.23333333 + 600. * 0.19999998 + -1680. * 0.19999998]
            estimated_position = [-933.33333333, -300.]

            The estimated location is: [-933.33333333, -300.]
76 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.19611614 0.1796053  0.16439899]) = 0.54012053
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.19611614 0.1796053  0.16439899] / sum_similarity = [0.36384847 0.3318846  0.28426693]
            3. Calculate the estimated position:
            estimated_position = sum([0.36384847 0.3318846  0.28426693] * [[-1830.   300.]
 [-1680.   300.]
 [-1680.   300.]]) = [-1758.61242  298.15886]
            4. The estimated location is: [-1758.61242, 298.15886]
77 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2236068  0.1767767  0.15249857]) = 0.55288205
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2236068 / 0.55288205 = 0.40244444
            weight_2 = 0.1767767 / 0.55288205 = 0.31732653
            weight_3 = 0.15249857 / 0.55288205 = 0.27912801
            3. Calculate the estimated position:
            estimated_position = sum([0.40244444 * [-1680.   300.]
                                     0.31732653 * [-1680.   300.]
                                     0.27912801 * [-1560.   300.]])
            estimated_position = [-1680. * 0.40244444 - 1680. * 0.31732653 - 1560. * 0.27912801,
                                   300. * 0.40244444 + 300. * 0.31732653 + 300. * 0.27912801]
            estimated_position = [-680.8176 - 520.6821, 402.4444 + 95.2653 + 83.848]
            estimated_position = [-680.8176 - 520.6821, 581.5567]
            The estimated location is: [-680.8176
78 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.18898224 0.14744196 0.13608276]) = 0.47240696
            2. Calculate the weight of each neighbor:
            weight_1 = 0.18898224 / 0.47240696 = 0.39999998
            weight_2 = 0.14744196 / 0.47240696 = 0.31249999
            weight_3 = 0.13608276 / 0.47240696 = 0.28750001
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.39999998 * (-1680.) + 0.31249999 * (-1680.) + 0.28750001 * (-1440.)]
            estimated_position = [-648.4444444444444, -648.4444444444444]

            The estimated location is: [-648, -648]
79 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.1767767  0.17149859 0.15617376]) = 0.40444895
            2. Calculate the weight of each neighbor:
            weight_1 = 0.1767767 / 0.40444895 = 0.43688886
            weight_2 = 0.17149859 / 0.40444895 = 0.42484844
            weight_3 = 0.15617376 / 0.40444895 = 0.3982222
            3. Calculate the estimated position:
            estimated_position = sum([0.43688886 * [-1440.   600.]
                                     0.42484844 * [-1680.   300.]
                                     0.3982222 * [-1200.   300.]])
            estimated_position = [-1440. * 0.43688886 - 1680. * 0.42484844 - 1200. * 0.3982222,
                                   600. * 0.43688886 + 300. * 0.42484844 + 300. * 0.3982222]
            estimated_position = [-636.4444, 506.6667]
            The estimated location is: [636, 507]
80 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25 0.2236068 0.21320072]) = 0.68680652
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25 / 0.68680652 = 0.36363636
            weight_2 = 0.2236068 / 0.68680652 = 0.32360676
            weight_3 = 0.21320072 / 0.68680652 = 0.30879352
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.36363636 * [-1680.   600.] + 0.32360676 * [-1800.   840.] + 0.30879352 * [-1800.   600.]]
            estimated_position = [-598.6448, 612.4864]

            The estimated location is: [-598.6448, 612.4864]
81 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.24253563 0.2 0.19611614]) = 0.64065177
            2. Calculate the weight of each neighbor:
            weight_1 = 0.24253563 / 0.64065177 = 0.37817865
            weight_2 = 0.2 / 0.64065177 = 0.3125
            weight_3 = 0.19611614 / 0.64065177 = 0.30928528
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.37817865 * (-1680.) + 0.3125 * (-1560.) + 0.30928528 * (-1800.) + 600.]
            estimated_position = [-624.1444 -486. -540. -1800. + 1800.]
            estimated_position = [-624.1444 + 1320.]
            estimated_position = [795.8556]
            estimated_x = 795.8556
            estimated_position = [-624.1444 + 1800.]
            estimated_position = [1175.8556]
            estimated_y = 1175.8556
            4. The estimated location is: [795.8556, 1175.8556]
82 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.21821789 0.16903085 0.16666667]) = 0.55401541
            2. Calculate the weight of each neighbor:
            weight_1 = 0.21821789 / 0.55401541 = 0.39183673
            weight_2 = 0.16903085 / 0.55401541 = 0.30344827
            weight_3 = 0.16666667 / 0.55401541 = 0.2946944
            3. Calculate the estimated position:
            estimated_position = sum([0.39183673 * [-1680.   600.]
                                     0.30344827 * [-1860.   720.]
                                     0.2946944 * [-1680.   300.]])
            estimated_position = [-1680. * 0.39183673 - 1860. * 0.30344827 - 1680. * 0.2946944 + 600. * 0.39183673 + 720. * 0.30344827 + 300. * 0.2946944]
            estimated_position = [-648.4444444444445, 308.4444444444445]
            The estimated location is: [648, 308]
83 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.28867513 0.23570226 0.19611614]) = 0.72049353
            2. Calculate the weight of each neighbor:
            weight_1 = 0.28867513 / 0.72049353 = 0.39867513
            weight_2 = 0.23570226 / 0.72049353 = 0.32758621
            weight_3 = 0.19611614 / 0.72049353 = 0.27372866
            3. Calculate the estimated position:
            estimated_position = sum([0.39867513 * [-1680.   300.]
                                     0.32758621 * [-1680.   300.]
                                     0.27372866 * [-1440.   600.]])
            estimated_position = [-1680. * 0.39867513 - 1680. * 0.32758621 - 1440. * 0.27372866,
                                   300. * 0.39867513 + 300. * 0.32758621 + 600. * 0.27372866]
            estimated_position = [-664.4444444444444, 384.4444444444444]
            The estimated location is: [664, 384]
84 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.22941573 0.18257419 0.18257419]) = 0.59456441
            2. Calculate the weight of each neighbor:
            weight_1 = 0.22941573 / 0.59456441 = 0.38578644
            weight_2 = 0.18257419 / 0.59456441 = 0.30769231
            weight_3 = 0.18257419 / 0.59456441 = 0.30769231
            3. Calculate the estimated position:
            estimated_position = sum([0.38578644 * [-1320.   840.]
                                     0.30769231 * [-1200.   840.]
                                     0.30769231 * [-1560.   840.]])
            estimated_position = [-1248.6444, 840.]

            The estimated location is: [-1248.6444, 840.]
85 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.2773501 0.2773501 0.1767767]) = 0.7294778
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.2773501 / 0.7294778, 0.2773501 / 0.7294778, 0.1767767 / 0.7294778] = [0.3777777, 0.3777777, 0.2444444]
            3. Calculate the estimated position:
            estimated_position = sum([0.3777777, 0.3777777, 0.2444444] * [[-1680.   840.] [-1680.   840.] [-1680.   840.]]) = [-1680. 840.]
            4. The estimated location is: [-1680, 840]
86 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136  0.4472136  0.20412415]) = 1.10854175
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.4472136 / 1.10854175, 0.4472136 / 1.10854175, 0.20412415 / 1.10854175] = [0.40384605, 0.40384605, 0.1936079 ]
            3. Calculate the estimated position:
            estimated_position = sum([0.40384605, 0.40384605, 0.1936079 ] * [[-1680.   840.] [-1680.   840.] [-1680.   840.]]) = [-1680. 840.]
            4. The estimated location is: [%d, %d]
            ANSWER: [-1680, 840]
87 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.30151134 0.2773501  0.26726124]) = 0.84612268
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.30151134 0.2773501  0.26726124] / sum_similarity = [0.35364867 0.3209854  0.32536593]
            3. Calculate the estimated position:
            estimated_position = sum([0.35364867 0.3209854  0.32536593] * [[-1680.   840.]
 [-1560.   840.]
 [-1440.   840.]]) = [-1598.6444 840.0000]
            4. The estimated location is: [%d, %d]
            ANSWER: [-1598.6444, 840.0000]
88 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25819889 0.25       0.22941573]) = 0.73761462
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25819889 / 0.73761462 = 0.34889795
            weight_2 = 0.25 / 0.73761462 = 0.33886207
            weight_3 = 0.22941573 / 0.73761462 = 0.30223008
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = [(0.34889795 * -1800.) + (0.33886207 * -1680.) + (0.30223008 * -1800.)]
            estimated_position = [-1768.4444444444446, -1648.4444444444446]
            4. The estimated location is: [-1768, -1648]
            ANSWER: [-1768, -1648]
89 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25 0.20412415 0.18898224]) = 0.64300639
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25 / 0.64300639 = 0.3888888888888889
            weight_2 = 0.20412415 / 0.64300639 = 0.3173913043478261
            weight_3 = 0.18898224 / 0.64300639 = 0.2937066017177381
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.3888888888888889 * [-1560.     0.] + 0.3173913043478261 * [-1770.  -240.] + 0.2937066017177381 * [-1880.     0.]]
            estimated_position = [-598.4444444444444, -198.66666666666666]
            4. The estimated location is: [-598, -199]
90 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.31622777 0.20851441]) = 1.22184896
            neighbor_weight = [0.70710678 / 1.22184896, 0.31622777 / 1.22184896, 0.20851441 / 1.22184896] = [0.58333333, 0.25833333, 0.16666667]
            2. Calculate the estimated position:
            estimated_position = sum([0.58333333, 0.25833333, 0.16666667] * [[-1560.     0.]
 [-1560.     0.]
 [-1560.     0.]]) = [-1560. 0.]

            The estimated location is: [-1560, 0]
91 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.33333333 0.23570226]) = 1.14638586
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.14638586 = 0.50588235
            weight_2 = 0.33333333 / 1.14638586 = 0.29032258
            weight_3 = 0.23570226 / 1.14638586 = 0.20389497
            3. Calculate the estimated position:
            estimated_position = [0.50588235 * (-1560.) + 0.29032258 * (-1560.) + 0.20389497 * (-1560.)]
            estimated_position = [-1560. * 1.00000000]
            estimated_position = [-1560., 0.]
            The estimated location is: [-1560., 0.]
92 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.33333333 0.23570226]) = 1.56903059
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / sum_similarity = 1 / 1.56903059 = 0.63888889
            weight_2 = 0.33333333 / sum_similarity = 0.21111111
            weight_3 = 0.23570226 / sum_similarity = 0.14999999
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.63888889 * [-1560. 0.] + 0.21111111 * [-1560. 0.] + 0.14999999 * [-1560. 0.]]
            estimated_position = [-1560. 0.]

            The estimated location is: [-1560, 0]
93 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.22941573 0.18257419]) = 0.82023821
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 0.82023821 = 0.49884959
            weight_2 = 0.22941573 / 0.82023821 = 0.28367347
            weight_3 = 0.18257419 / 0.82023821 = 0.22347692
            3. Calculate the estimated position:
            estimated_position = sum([0.49884959 * [-1560.   300.]
                                     0.28367347 * [-1560.   300.]
                                     0.22347692 * [-1440.   600.]])
            estimated_position = [-1560. * (0.49884959 + 0.28367347 + 0.22347692) + 300. * (0.49884959 + 0.28367347) + 600. * 0.22347692]
            estimated_position = [-1560. * 0.98600306 + 300. * 0.78332296 + 600. * 0.22347692]
            estimated_position = [-1489.4219 + 234.9978 + 139.0483]
            estimated_position = [-1115.4238]
            Since the position is in
94 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25 0.21821789 0.19611614]) = 0.66433393
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25 / 0.66433393 = 0.37795275
            weight_2 = 0.21821789 / 0.66433393 = 0.32483871
            weight_3 = 0.19611614 / 0.66433393 = 0.29720854
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.37795275 * [-1560.   300.]) + (0.32483871 * [-1680.   300.]) + (0.29720854 * [-1560.   300.])
            estimated_position = [-1560. * 0.37795275 - 1680. * 0.32483871 - 1560. * 0.29720854, 300. * 0.37795275 + 300. * 0.32483871 + 300. * 0.29720854]
            estimated_position = [-576.4444444444444, 300.3248387096774]
            The estimated location is: [576, 300]
95 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.70710678 0.20851441 0.20851441]) = 1.1241216
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.1241216 = 0.6288964
            weight_2 = 0.20851441 / 1.1241216 = 0.1854835
            weight_3 = 0.20851441 / 1.1241216 = 0.1854835
            3. Calculate the estimated position:
            estimated_position = sum([0.6288964 * [-1560.   300.]
                                     0.1854835 * [-1560.   300.]
                                     0.1854835 * [-1680.   300.]])
            estimated_position = [-1560. * 0.6288964 - 1560. * 0.1854835 - 1680. * 0.1854835,
                                   300. * 0.6288964 + 300. * 0.1854835 + 300. * 0.1854835]
            estimated_position = [-960. -12. 630.]
            The estimated location is: [-960., 630.]
96 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25819889 0.23570226 0.20851441]) = 0.70241556
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25819889 / 0.70241556 = 0.36786889
            weight_2 = 0.23570226 / 0.70241556 = 0.33426221
            weight_3 = 0.20851441 / 0.70241556 = 0.29791884
            3. Calculate the estimated position:
            estimated_position = sum([0.36786889 * [-1560.   300.]
                                     0.33426221 * [-1560.   300.]
                                     0.29791884 * [-1680.   300.]])
            estimated_position = [-1560. * (0.36786889 + 0.33426221 + 0.29791884) + 300. * (0.36786889 + 0.33426221 + 0.29791884)]
            estimated_position = [-1560. * 1 + 300. * 1]
            estimated_position = [-1560. + 300.]
            estimated_position = [-1260.]
            The y-coordinate is the same for all neighbors, so it remains 300.
            The answer is: [%d, %d]
            ANSWER: [-1260., 300.]
97 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.22941573 0.19611614]) = 0.75886516
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.75886516 = 0.44117647
            weight_2 = 0.22941573 / 0.75886516 = 0.30194805
            weight_3 = 0.19611614 / 0.75886516 = 0.25689938
            3. Calculate the estimated position:
            estimated_position = sum([0.44117647 * [-1560.   300.]
                                     0.30194805 * [-1560.   300.]
                                     0.25689938 * [-1680.   300.]])
            estimated_position = [-1560. * 0.44117647 - 1560. * 0.30194805 - 1680. * 0.25689938,
                                   300. * 0.44117647 + 300. * 0.30194805 + 300. * 0.25689938]
            estimated_position = [-688.6444, 503.5596]
            The estimated location is: [688, 504]
98 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.30151134 0.25819889]) = 1.26681701
            neighbor_weight = [0.70710678 0.30151134 0.25819889] / 1.26681701 = [0.55555556 0.23809524 0.1963482]
            2. Calculate the estimated position:
            estimated_position = sum([0.55555556 0.23809524 0.1963482] * [[-1560.   600.]
 [-1560.   600.]
 [-1560.   600.]])
            estimated_position = [-1560. * 0.55555556 + -1560. * 0.23809524 + -1560. * 0.1963482, 600. * 0.55555556 + 600. * 0.23809524 + 600. * 0.1963482]
            estimated_position = [-1560. -1560. -1560.] + [318.18444444 159.09222222 31.26555556]
            estimated_position = [-1241.81555556, 498.07777778]
            The estimated location is: [-1241.81555556, 498.07777778]
99 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.21821789 0.21320072]) = 0.80938208
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 0.80938208 = 0.46666667
            weight_2 = 0.21821789 / 0.80938208 = 0.27083333
            weight_3 = 0.21320072 / 0.80938208 = 0.26249999
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.46666667 * [-1560.   600.] + 0.27083333 * [-1680.   600.] + 0.26249999 * [-1800.   840.]]
            estimated_position = [-706.6666666666667, 636.6666666666667]
            The estimated location is: [-706, 637]
100 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.30151134 0.28867513 0.28867513]) = 0.87884699
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.30151134 0.28867513 0.28867513] / sum_similarity = [0.34047619 0.32295806 0.33656575]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.34047619 0.32295806 0.33656575] * [[-1800.   840.]
 [-1680.   600.]
 [-1560.   600.]])
            estimated_position = [-1688.4444, 600.3333]
            4. The estimated location is: [-1688.4444, 600.3333]
101 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.1796053  0.1796053  0.17149859]) = 0.53070828
            2. Calculate the weight of each neighbor:
            weight_1 = 0.1796053 / 0.53070828 = 0.33769231
            weight_2 = 0.1796053 / 0.53070828 = 0.33769231
            weight_3 = 0.17149859 / 0.53070828 = 0.32360737
            3. Calculate the estimated position:
            estimated_position = sum([0.33769231 * [-1860.   480.]
                                     0.33769231 * [-1560.   600.]
                                     0.32360737 * [-1680.   600.]])
            estimated_position = [-1688.4444, 576.3232]
            4. The estimated location is: [1688, 576]
102 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.31622777 0.26726124 0.25819889]) = 0.8316889
            2. Calculate the weight of each neighbor:
            weight_1 = 0.31622777 / 0.8316889 = 0.37888884
            weight_2 = 0.26726124 / 0.8316889 = 0.31944444
            weight_3 = 0.25819889 / 0.8316889 = 0.30966666
            3. Calculate the estimated position:
            estimated_position = sum([0.37888884 * [-1680.   600.]
                                     0.31944444 * [-1560.   600.]
                                     0.30966666 * [-1680.   600.]])
            estimated_position = [-1680. * 0.37888884 - 1560. * 0.31944444 - 1680. * 0.30966666,
                                   600. * 0.37888884 + 600. * 0.31944444 + 600. * 0.30966666]
            estimated_position = [-623.4444, 600.3333]
            The estimated location is: [600.3333, -623.4444]
103 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.33333333 0.26726124]) = 1.09726124
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 1.09726124 = 0.45454545
            weight_2 = 0.33333333 / 1.09726124 = 0.30612245
            weight_3 = 0.26726124 / 1.09726124 = 0.23908761
            3. Calculate the estimated position:
            estimated_position = sum([0.45454545 * [-1560.   600.]
                                     0.30612245 * [-1560.   600.]
                                     0.23908761 * [-1560.   600.]])
            estimated_position = [-1560. * (0.45454545 + 0.30612245 + 0.23908761) + 600. * (0.45454545 + 0.30612245 + 0.23908761)]
            estimated_position = [-1560. * 0.9997555 + 600. * 0.9997555]
            estimated_position = [-1560. + 599.8775]
            estimated_position = [-960.1225]
            estimated_y = 600. * 0.9997555 = 599.8775
            The estimated location is: [-960.1225, 599.8775]
104 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.37796447 0.30151134]) = 1.48658259
            neighbor_weight = [0.70710678 / 1.48658259, 0.37796447 / 1.48658259, 0.30151134 / 1.48658259] = [0.47683716, 0.25343884, 0.18372399]
            2. Calculate the estimated position:
            estimated_position = [0.47683716 * -1560. + 0.25343884 * -1800. + 0.18372399 * -1800.] = [-1008. -360. -324.]
            3. The estimated location is: [-1008, -360]
105 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.26726124 0.25819889 0.25819889]) = 0.78356093
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.26726124 0.25819889 0.25819889] / sum_similarity = [0.33333333 0.32222222 0.33333333]
            3. Calculate the estimated position:
            estimated_position = sum([0.33333333 0.32222222 0.33333333] * [[-1680.   840.]
 [-1200.   840.]
 [-1800.   840.]]) = [(-1680. * 0.33333333 + -1200. * 0.32222222 + -1800. * 0.33333333), (840. * 0.33333333 + 840. * 0.32222222 + 840. * 0.33333333)]
            The final answer is: [ -1606.6666666666667, 840. ]
106 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.21320072 0.18569534 0.18257419]) = 0.58136925
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.21320072 0.18569534 0.18257419] / sum_similarity = [0.36284846 0.31481469 0.31233685]
            3. Calculate the estimated position:
            estimated_position = sum([0.36284846 0.31481469 0.31233685] * [[-1560.   840.]
 [-1560.   840.]
 [-1320.   840.]]) = [-1538.6444 836.8864]
            4. The estimated location is: [-1538.6444, 836.8864]
107 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.24253563 0.20412415 0.1767767 ]) = 0.62343648
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.24253563 0.20412415 0.1767767] / sum_similarity = [0.38571429 0.32576471 0.2885208 ]
            3. Calculate the estimated position:
            estimated_position = sum([0.38571429 0.32576471 0.2885208] * [[-1560.   840.]
 [-1680.   840.]
 [-1560.   840.]])
            estimated_position = [-1560. * 0.38571429 + -1680. * 0.32576471 + -1560. * 0.2885208, 840. * 0.38571429 + 840. * 0.32576471 + 840. * 0.2885208]
            estimated_position = [-1560. * 0.38571429 - 1680. * 0.32576471 - 1560. * 0.2885208 + 840. * 0.38571429 + 840. * 0.32576471 + 840. * 0.2885208]
            estimated_position = [-1560. * 0.38571429 - 1680. * 0.3257
108 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.18898224 0.17407766 0.17149859]) = 0.5345585
            2. Calculate the weight of each neighbor:
            weight_1 = 0.18898224 / 0.5345585 = 0.3534426
            weight_2 = 0.17407766 / 0.5345585 = 0.3256883
            weight_3 = 0.17149859 / 0.5345585 = 0.3208566
            3. Calculate the estimated position:
            estimated_position = sum([0.3534426 * [-1320.   840.]
                                     0.3256883 * [-1560.   840.]
                                     0.3208566 * [-1560.   840.]])
            estimated_position = [-1320. * 0.3534426 - 1560. * 0.3256883 - 1560. * 0.3208566,
                                   840. * 0.3534426 + 840. * 0.3256883 + 840. * 0.3208566]
            estimated_position = [-473.444 - 499.999 - 499.999, 840.353 + 840.256 + 840.209]
            estimated_position = [-1473.444, 2520.818]
            The estimated location is: [1473, 2521]
109 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.26726124 0.24253563 0.20412415]) = 0.71391998
            2. Calculate the weight of each neighbor:
            weight_1 = 0.26726124 / 0.71391998 = 0.37343478
            weight_2 = 0.24253563 / 0.71391998 = 0.33986507
            weight_3 = 0.20412415 / 0.71391998 = 0.28659915
            3. Calculate the estimated position:
            estimated_position = sum([0.37343478 * [-1440.  -490.]
                                     0.33986507 * [-1440.  -270.]
                                     0.28659915 * [-1440.  -270.]])
            estimated_position = [-1440. * (0.37343478 + 0.33986507 + 0.28659915) -490. * 0.37343478 -270. * (0.33986507 + 0.28659915)]
            estimated_position = [-1440. * 1 -490. * 0.37343478 -270. * 0.62646422]
            estimated_position = [-1440. -183.4444 -171.3288]
            estimated_position = [-1440. -354.7732]
            The estimated location is: [-1440., -354.7
110 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.20412415 0.13483997 0.12700013]) = 0.46596425
            2. Calculate the weight of each neighbor:
            weight_1 = 0.20412415 / 0.46596425 = 0.43787944
            weight_2 = 0.13483997 / 0.46596425 = 0.28888889
            weight_3 = 0.12700013 / 0.46596425 = 0.27323167
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.43787944 * [-1440.     0.] + 0.28888889 * [-1770.  -240.] + 0.27323167 * [-1440.  -490.]]
            estimated_position = [-638.4444444444444, -305.66666666666666]
            4. The estimated location is: [-638, -306]
111 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.25819889 0.14142136 0.11396058]) = 0.51366033
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.25819889 0.14142136 0.11396058] / sum_similarity = [0.50384648 0.27871064 0.19744288]
            3. Calculate the estimated position:
            estimated_position = sum([0.50384648 0.27871064 0.19744288] * [[-1440.     0.]
 [-1770.  -240.]
 [-1080.  -450.]]) = [-1328.4324  -203.6888]
            4. The estimated location is: [-1328.4324, -203.6888]
112 done_____________________________
1. First, calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.70710678 0.40824829]) = 1.82246195
            neighbor_weight = [0.70710678 / 1.82246195, 0.70710678 / 1.82246195, 0.40824829 / 1.82246195] = [0.38888889, 0.38888889, 0.22222222]
            2. Then, calculate the estimated position:
            estimated_position = sum([0.38888889, 0.38888889, 0.22222222] * [[-1440.  -490.], [-1440.  -490.], [-1440.  -490.]])
            estimated_position = [(-1440. * 0.38888889) + (-1440. * 0.38888889) + (-1440. * 0.22222222), (-490. * 0.38888889) + (-490. * 0.38888889) + (-490. * 0.22222222)]
            estimated_position = [-1440. * 0.97777778, -490. * 0.97777778]
            estimated_position = [-1423.6664, -482.2221]

            The estimated location is: [1423, 482]
113 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.33333333 0.20851441 0.2       ]) = 0.74234774
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.74234774 = 0.45154639
            weight_2 = 0.20851441 / 0.74234774 = 0.27777778
            weight_3 = 0.2 / 0.74234774 = 0.27268261
            3. Calculate the estimated position:
            estimated_position = sum([0.45154639 * [-1440.  -270.]
                                     0.27777778 * [-1440.  -270.]
                                     0.27268261 * [-1440.  -270.]])
            estimated_position = [-1440. * (0.45154639 + 0.27777778 + 0.27268261) - 270. * (0.45154639 + 0.27777778 + 0.27268261)]
            estimated_position = [-1440. * 0.99999998 - 270. * 0.99999998]
            estimated_position = [-1439.9998, -269.9998]
            The estimated location is: [-1439, -269]
114 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.57735027 0.5       ]) = 1.72205081
            2. Normalize the similarities:
            weight_1 = 0.57735027 / 1.72205081 = 0.33673469
            weight_2 = 0.57735027 / 1.72205081 = 0.33673469
            weight_3 = 0.5 / 1.72205081 = 0.29053484
            3. Calculate the estimated position:
            estimated_position = sum([0.33673469 * [-1440.  -270.]
                                     0.33673469 * [-1440.  -270.]
                                     0.29053484 * [-1440.  -270.]])
            estimated_position = [-1440. * 0.33673469 * 2 - 270. * 0.33673469 * 2 - 1440. * 0.29053484 * 1]
            estimated_position = [-1669.4138 -560.4278 -393.6539]
            4. The estimated location is: [%d, %d]
            ANSWER: [-1669.4138, -560.4278]
115 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.40824829 0.31622777]) = 1.30182633
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.30182633 = 0.44264865
            weight_2 = 0.40824829 / 1.30182633 = 0.31387803
            weight_3 = 0.31622777 / 1.30182633 = 0.24347328
            3. Calculate the estimated position:
            estimated_position = sum([0.44264865 * [-1440.  -270.]
                                     0.31387803 * [-1440.  -270.]
                                     0.24347328 * [-1440.  -270.]])
            estimated_position = [-1440. * (0.44264865 + 0.31387803 + 0.24347328) - 270. * (0.44264865 + 0.31387803 + 0.24347328)]
            estimated_position = [-1440. * 0.99999998 - 270. * 0.99999998]
            estimated_position = [-1439.9998, -269.9998]
            The estimated location is: [-1439, -270]
116 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.5 0.30151134 0.30151134]) = 0.60302268
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.5 / 0.60302268, 0.30151134 / 0.60302268, 0.30151134 / 0.60302268] = [0.83333333, 0.50000000, 0.50000000]
            3. Calculate the estimated position:
            estimated_position = sum([0.83333333, 0.50000000, 0.50000000] * [[-1440.  -270.] [-1440.  -270.] [-1440.  -270.]]) = [-1440. -270.]
            4. The estimated location is: [-1440, -270]
117 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.21320072 0.20851441]) = 1.12882191
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 0.21320072 0.20851441] / sum_similarity = [0.63398446 0.18769923 0.17831531]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.63398446 0.18769923 0.17831531] * [[-1200.     0.]
            [-1440.  -270.]
            [-1440.  -270.]]) = [-1200. + 0.258 * (-1440.) + 0.258 * (-1440.)] = [-1200. -366.]
            4. The estimated location is: [-1200., -366.]
118 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.28867513 0.26726124 0.23570226]) = 0.89163843
            2. Calculate the weight of each neighbor:
            weight_1 = 0.28867513 / 0.89163843 = 0.32184873
            weight_2 = 0.26726124 / 0.89163843 = 0.29999998
            weight_3 = 0.23570226 / 0.89163843 = 0.26214899
            3. Calculate the estimated position:
            estimated_position = sum([0.32184873 * [-1440.  -270.]
                                     0.29999998 * [-1440.  -270.]
                                     0.26214899 * [-1440.  -270.]])
            estimated_position = [-1440. * (0.32184873 + 0.29999998 + 0.26214899) - 270. * (0.32184873 + 0.29999998 + 0.26214899)]
            estimated_position = [-1440. * 0.98403764 - 270. * 0.98403764]
            estimated_position = [-1398.8208 - 261.6091]
            estimated_position = [-1398.8208, -261.6091]
            The estimated location is: [-1398.8208, -261.6091]
119 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.18257419 0.16666667 0.16439899]) = 0.51364085
            2. Calculate the weight of each neighbor:
            weight_1 = 0.18257419 / 0.51364085 = 0.35555556
            weight_2 = 0.16666667 / 0.51364085 = 0.32432432
            weight_3 = 0.16439899 / 0.51364085 = 0.31999998
            3. Calculate the estimated position:
            estimated_position = sum([0.35555556 * [-1440.  -120.]
                                     0.32432432 * [-1440.  -120.]
                                     0.31999998 * [-1110.  -300.]])
            estimated_position = [-1440. * (0.35555556 + 0.32432432 + 0.31999998) - 120. * (0.35555556 + 0.32432432) - 300. * 0.31999998]
            estimated_position = [-1440. * 1 - 120. * 0.68027994 - 300. * 0.31999998]
            estimated_position = [-1440. -816.6666 - 95.999998]
            estimated_position = [-1440. -822.6666]
            The estimated location is: [-1440
120 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.17407766 0.16222142 0.15811388]) = 0.49441296
            2. Calculate the weight of each neighbor:
            weight_1 = 0.17407766 / 0.49441296 = 0.3529411764705882
            weight_2 = 0.16222142 / 0.49441296 = 0.3270663435294118
            weight_3 = 0.15811388 / 0.49441296 = 0.3198184800900884
            3. Calculate the estimated position:
            estimated_position = (weight_1 * [-1110.  -300.]) + (weight_2 * [-1440.  -120.]) + (weight_3 * [-1440.  -120.])
            estimated_position = [(-1110. * 0.3529411764705882) - (-1440. * 0.3270663435294118) - (-1440. * 0.3198184800900884) * -300.,
                                   (-1110. * 0.0) - (-1440. * 0.0) - (-1440. * 0.0) * -120.]
            estimated_position = [(-388.6468638892362), (-432.)]
            The estimated location is: [388, 432]
121 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.15249857 0.14586499 0.13867505]) = 0.43693861
            2. Calculate the weight of each neighbor:
            weight_1 = 0.15249857 / 0.43693861 = 0.34999999
            weight_2 = 0.14586499 / 0.43693861 = 0.33333333
            weight_3 = 0.13867505 / 0.43693861 = 0.31666667
            3. Calculate the estimated position:
            estimated_position = sum([0.34999999 * [-1440.  -120.]
                                     0.33333333 * [-1440.  -120.]
                                     0.31666667 * [-1110.  -300.]])
            estimated_position = [-1440. * (0.34999999 + 0.33333333 + 0.31666667) - 120. * (0.34999999 + 0.33333333) - 300. * 0.31666667]
            estimated_position = [-1440. * 1 - 120. * 0.68333333 - 300. * 0.31666667]
            estimated_position = [-1440. -81.666667 - 94.999999]
            estimated_position = [-1440. -96.666667]
            The estimated location is: [-14
122 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.37796447 0.37796447]) = 1.33326814
            2. Next, calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.33326814 = 0.43333333
            weight_2 = 0.37796447 / 1.33326814 = 0.28333333
            weight_3 = 0.37796447 / 1.33326814 = 0.28333333
            3. Finally, calculate the estimated position:
            estimated_position = sum([0.43333333 * [-1440.  -120.]
                                     0.28333333 * [-1440.  -120.]
                                     0.28333333 * [-1440.  -120.]])
            estimated_position = [-1440. * 0.43333333 - 120. * 0.43333333 - 1440. * 0.28333333 - 120. * 0.28333333 - 1440. * 0.28333333 - 120. * 0.28333333]
            estimated_position = [-626.6666666666667, -104.0]
            The estimated location is: [-626.6666666666667, -104.0]
123 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2 0.18898224 0.1767767 ]) = 0.55465894
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2 / 0.55465894 = 0.36170205
            weight_2 = 0.18898224 / 0.55465894 = 0.33988185
            weight_3 = 0.1767767 / 0.55465894 = 0.3133651
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.36170205 * (-1110.) + 0.33988185 * (-1440.) + 0.3133651 * (-1440.)]
            estimated_position = [-804.44 -480.44 -474.44]
            4. The estimated position is the average of the weighted sum of the neighbor positions:
            estimated_position = [-804.44 / 3, -480.44 / 3, -474.44 / 3]
            estimated_position = [-268.14, -160.14, -158.14]
            The estimated location is: [-268.14, -160.14]
124 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.21320072 0.18257419 0.16439899]) = 0.56017489
            2. Calculate the weight of each neighbor:
            weight_1 = 0.21320072 / 0.56017489 = 0.37735849
            weight_2 = 0.18257419 / 0.56017489 = 0.32576625
            weight_3 = 0.16439899 / 0.56017489 = 0.29684426
            3. Calculate the estimated position:
            estimated_position = sum([0.37735849 * [-1320.     0.]
                                     0.32576625 * [-1200.     0.]
                                     0.29684426 * [-1200.     0.]])
            estimated_position = [-1200. * (0.37735849 + 0.32576625 + 0.29684426) 0 * (0.37735849 + 0.32576625 + 0.29684426)]
            estimated_position = [-1200. * 1 0]
            estimated_position = [-1200. 0.]

            The estimated location is: [-1200, 0]
125 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.28867513 0.1796053 ]) = 1.96787543
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 1.96787543 = 0.25471698
            weight_2 = 0.28867513 / 1.96787543 = 0.14683801
            weight_3 = 0.1796053 / 1.96787543 = 0.09084009
            3. Calculate the estimated position:
            estimated_position = sum([0.25471698 * [-1440.  -120.]
                                     0.14683801 * [-1440.  -120.]
                                     0.09084009 * [-1880.     0.]])
            estimated_position = [-369.6435 -28.36116]
            4. The estimated location is: [-369.6435, -28.36116]
126 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.14433757 0.12700013 0.11867817]) = 0.38999577
            2. Calculate the weight of each neighbor:
            weight_1 = 0.14433757 / 0.38999577 = 0.36989444
            weight_2 = 0.12700013 / 0.38999577 = 0.32484889
            weight_3 = 0.11867817 / 0.38999577 = 0.30525669
            3. Calculate the estimated position:
            estimated_position = sum([0.36989444 * [-1440.  -120.]
                                     0.32484889 * [-1440.  -120.]
                                     0.30525669 * [-1440.  -120.]])
            estimated_position = [-1440. * (0.36989444 + 0.32484889 + 0.30525669) - 120. * (0.36989444 + 0.32484889 + 0.30525669)]
            estimated_position = [-1440. * 1 - 120. * 1]
            estimated_position = [-1440. - 120.]
            The estimated location is: [-1440, -120]
127 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.24253563 0.20412415 0.19611614]) = 0.64277587
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.24253563 0.20412415 0.19611614] / sum_similarity = [0.37692311 0.31764689 0.28542999]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.37692311 0.31764689 0.28542999] * [[-1560.     0.]
 [-1440.     0.]
 [-1560.     0.]]) = [-1518.43444444 0.]
            4. The estimated location is: [-1518.43444444, 0.]
128 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25819889 0.20851441 0.18898224]) = 0.65569554
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25819889 / 0.65569554 = 0.39388889
            weight_2 = 0.20851441 / 0.65569554 = 0.31666667
            weight_3 = 0.18898224 / 0.65569554 = 0.28544444
            3. Calculate the estimated position:
            estimated_position = sum([0.39388889 * [-1440.     0.]
                                     0.31666667 * [-1440.     0.]
                                     0.28544444 * [-1560.     0.]])
            estimated_position = [-1348.67664444, 0.]
            4. The estimated location is: [-1348.67664444, 0.]
129 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.22941573 0.16222142 0.15075567]) = 0.54239282
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.22941573 0.16222142 0.15075567] / sum_similarity = [0.42584646 0.29863078 0.27552276]
            3. Calculate the estimated position:
            estimated_position = sum([0.42584646 0.29863078 0.27552276] * [[-1440.     0.]
 [-1440.  -490.]
 [-1440.  -490.]]) = [-1440. -1440. -1440.]
            4. The estimated location is: [-1440, -1440]
130 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2773501  0.2773501  0.19611614]) = 0.74977628
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2773501 / 0.74977628 = 0.36888889
            weight_2 = 0.2773501 / 0.74977628 = 0.36888889
            weight_3 = 0.19611614 / 0.74977628 = 0.25211111
            3. Calculate the estimated position:
            estimated_position = sum([0.36888889 * [-1440.     0.]
                                     0.36888889 * [-1440.     0.]
                                     0.25211111 * [-1560.     0.]])
            estimated_position = [-1440. * 0.36888889 * 2 - 1560. * 0.25211111]
            estimated_position = [-1440. * 0.73777778 - 1560. * 0.25211111]
            estimated_position = [-1064.6664 - 390.27777]
            estimated_position = [-1064.6664 - 390.27777]
            estimated_position = [-1454.9441, 0.]
            The estimated location is: [-1454.9441, 0.]
131 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.22941573 0.20851441]) = 0.76125947
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.76125947 = 0.43835616
            weight_2 = 0.22941573 / 0.76125947 = 0.29999998
            weight_3 = 0.20851441 / 0.76125947 = 0.26764375
            3. Calculate the estimated position:
            estimated_position = sum([0.43835616 * [-1440.     0.]
                                     0.29999998 * [-1440.     0.]
                                     0.26764375 * [-1440.     0.]])
            estimated_position = [-1440. * (0.43835616 + 0.29999998 + 0.26764375) 0 * (0.43835616 + 0.29999998 + 0.26764375)]
            estimated_position = [-1440. * 1 0]
            estimated_position = [-1440. 0]

            The estimated location is: [-1440, 0]
132 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.15811388 0.14586499 0.14586499]) = 0.45004386
            2. Calculate the weight of each neighbor:
            weight_1 = 0.15811388 / 0.45004386 = 0.34838775
            weight_2 = 0.14586499 / 0.45004386 = 0.32349444
            weight_3 = 0.14586499 / 0.45004386 = 0.32349444
            3. Calculate the estimated position:
            estimated_position = sum([0.34838775 * [-1440.   300.]
                                     0.32349444 * [-1440.   300.]
                                     0.32349444 * [-1440.   300.]])
            estimated_position = [-1440. * 0.34838775 - 1440. * 0.32349444 - 1440. * 0.32349444 + 300. * 0.34838775 + 300. * 0.32349444 + 300. * 0.32349444]
            estimated_position = [-480.625 - 461.0996 - 461.0996 + 104.525 + 96.8992 + 96.8992]
            estimated_position = [-1481.3044, 300.]
            The estimated location is: [-1481.3044, 3
133 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.13130643 0.12216944 0.10910895]) = 0.36258482
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.13130643 0.12216944 0.10910895] / sum_similarity = [0.36258482 0.33584821 0.27556697]
            3. Calculate the estimated position:
            estimated_position = sum([0.36258482 0.33584821 0.27556697] * [[-1440.   300.]
 [-1440.   300.]
 [-1320.   600.]]) = [-1440. * 0.36258482 + -1440. * 0.33584821 + -1320. * 0.27556697, 300. * 0.36258482 + 300. * 0.33584821 + 600. * 0.27556697]
            estimated_position = [-1440. * 0.36258482 - 1440. * 0.33584821 - 1320. * 0.27556697, 300. * 0.36258482 + 300. * 0.33584821 + 600. * 0.27556697]
            estimated_position = [-1440. * 0.36258482 - 1440. * 0.33
134 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.17407766 0.14586499 0.14142136]) = 0.46136395
            2. Calculate the weight of each neighbor:
            weight_1 = 0.17407766 / 0.46136395 = 0.37738095
            weight_2 = 0.14586499 / 0.46136395 = 0.31639605
            weight_3 = 0.14142136 / 0.46136395 = 0.30512199
            3. Calculate the estimated position:
            estimated_position = sum([0.37738095 * [-1440.   300.]
                                     0.31639605 * [-1440.   300.]
                                     0.30512199 * [-1440.   300.]])
            estimated_position = [-1440. * 0.37738095 - 1440. * 0.31639605 - 1440. * 0.30512199 + 300. * 0.37738095 + 300. * 0.31639605 + 300. * 0.30512199]
            estimated_position = [-1440. * 0.37738095 - 1440. * 0.31639605 - 1440. * 0.30512199 + 946.59975 + 458.65985 + 435.83099]
            estimated_position = [-1
135 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.15617376 0.15075567 0.13483997]) = 0.4417633966666667
            2. Calculate the weight of each neighbor:
            weight_1 = 0.15617376 / 0.4417633966666667 = 0.3537828125
            weight_2 = 0.15075567 / 0.4417633966666667 = 0.3413888875
            weight_3 = 0.13483997 / 0.4417633966666667 = 0.3048273000
            3. Calculate the estimated position:
            estimated_position = sum([0.3537828125 * [-1440.   300.]
                                     0.3413888875 * [-1440.   300.]
                                     0.3048273000 * [-1440.   300.]])
            estimated_position = [-1440. * (0.3537828125 + 0.3413888875 + 0.3048273000) + 300. * (0.3537828125 + 0.3413888875 + 0.3048273000)]
            estimated_position = [-1440. * 1 + 300. * 1]
            estimated_position = [-1440. + 300.]
            estimated_position = [-1140.]
            The y-coordinate is the same for all neighbors, so it remains 
136 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.31622777 0.24253563]) = 0.96701169
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 0.96701169 = 0.42361116
            weight_2 = 0.31622777 / 0.96701169 = 0.32631574
            weight_3 = 0.24253563 / 0.96701169 = 0.24965245
            3. Calculate the estimated position:
            estimated_position = sum([0.42361116 * [-1440.   600.]
                                     0.32631574 * [-1440.   600.]
                                     0.24965245 * [-1440.   600.]])
            estimated_position = [-1440. * (0.42361116 + 0.32631574 + 0.24965245) + 600. * (0.42361116 + 0.32631574 + 0.24965245)]
            estimated_position = [-1440. * 0.9995844 + 600. * 0.9995844]
            estimated_position = [-1439.89882, 599.7722]
            The estimated location is: [-1439.89882, 599.7722]
137 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.28867513 0.24253563 0.21320072]) = 0.74441148
            2. Calculate the weight of each neighbor:
            weight_1 = 0.28867513 / 0.74441148 = 0.38784444
            weight_2 = 0.24253563 / 0.74441148 = 0.32486847
            weight_3 = 0.21320072 / 0.74441148 = 0.28728609
            3. Calculate the estimated position:
            estimated_position = [0.38784444 * (-1440.   600.) + 0.32486847 * (-1440.   600.) + 0.28728609 * (-1440.   600.)]
            estimated_position = [-1440. * (0.38784444 + 0.32486847 + 0.28728609) + 600. * (0.38784444 + 0.32486847 + 0.28728609)]
            estimated_position = [-1440. * 1 + 600. * 1]
            estimated_position = [-1440. + 600.]
            estimated_position = [-840.]
            The estimated y-coordinate is 600.
            Since the x-coordinate is the average of the x-coordinates of the top-3 neighbors, we can calculate it as follows:
            estimated_x = (-1440. * 0.38784444 + -1440. * 0.
138 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.31622777 0.26726124]) = 0.91682224
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.91682224 = 0.36269268
            weight_2 = 0.31622777 / 0.91682224 = 0.34444444
            weight_3 = 0.26726124 / 0.91682224 = 0.29287308
            3. Calculate the estimated position:
            estimated_position = sum([0.36269268 * [-1440.   600.]
                                     0.34444444 * [-1440.   600.]
                                     0.29287308 * [-1440.   600.]])
            estimated_position = [-1440. * (0.36269268 + 0.34444444 + 0.29287308) + 600. * (0.36269268 + 0.34444444 + 0.29287308)]
            estimated_position = [-1440. * 1 + 600. * 1]
            estimated_position = [-1440. + 600.]
            estimated_position = [-840.]
            The estimated y-coordinate is 600.
            Since the x-coordinate is the average of the x-coordinates of the top-3 neighbors, we can calculate it as follows:
            average_x = (-1440. + -1440. + -1440.) / 3 =
139 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.25819889 0.23570226]) = 0.87186562
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 0.87186562 = 0.43333333
            weight_2 = 0.25819889 / 0.87186562 = 0.29746235
            weight_3 = 0.23570226 / 0.87186562 = 0.26880721
            3. Calculate the estimated position:
            estimated_position = sum([0.43333333 * [-1440.   600.]
                                     0.29746235 * [-1440.   600.]
                                     0.26880721 * [-1440.   600.]])
            estimated_position = [-1440. * (0.43333333 + 0.29746235 + 0.26880721) + 600. * (0 + 0 + 0)]
            estimated_position = [-1440. * 0.9996019 + 600. * 0]
            estimated_position = [-1439.0996019, 0]

            The estimated location is: [-1439.0996019, 0]
140 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.12909944 0.12598816 0.12216944]) = 0.37715704
            2. Calculate the weight of each neighbor:
            weight_1 = 0.12909944 / 0.37715704 = 0.34147196
            weight_2 = 0.12598816 / 0.37715704 = 0.33248304
            weight_3 = 0.12216944 / 0.37715704 = 0.32598499
            3. Calculate the estimated position:
            estimated_position = sum([0.34147196 * [-1860.   480.]
                                     0.33248304 * [-1860.   720.]
                                     0.32598499 * [-1800.   840.]])
            estimated_position = [-5788.4844 2068.6448]
            4. The estimated location is: [%d, %d]
            ANSWER: [-5788.4844, 2068.6448]
141 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.17149859 0.16222142 0.16222142]) = 0.49594043
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.17149859 0.16222142 0.16222142] / sum_similarity = [0.34444444 0.32666667 0.32666667]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.34444444 0.32666667 0.32666667] * [[-1800.   840.]
 [-1800.   840.]
 [-1860.   720.]]) = [-1823.3333 783.3333]
            4. The estimated location is: [1823, 783]
142 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.20412415 0.20412415 0.20412415]) = 0.61237245
            2. Then, calculate the weight of each neighbor: neighbor_weight = [0.20412415 0.20412415 0.20412415] / sum_similarity = [0.33333333 0.33333333 0.33333333]
            3. Finally, calculate the estimated position: estimated_position = sum([0.33333333 0.33333333 0.33333333] * [[-1800.   840.] [-1800.   840.] [-1800.   840.]]) = [(-1800. * 0.33333333 + -1800. * 0.33333333 + -1800. * 0.33333333), (840. * 0.33333333 + 840. * 0.33333333 + 840. * 0.33333333)] = [-1800., 840.]

            The estimated location is: [-1800., 840.]
143 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.31622777 0.18569534 0.17149859]) = 0.6734227
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.31622777 0.18569534 0.17149859] / sum_similarity = [0.46784356 0.27388468 0.25827176]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.46784356 0.27388468 0.25827176] * [[-1680.   840.]
 [-1440.   840.]
 [-1440.   840.]])
            estimated_position = [-1568.4444, 840.]
            The estimated location is: [-1568.4444, 840.]
144 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25819889 0.2236068  0.21320072]) = 0.70490643
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25819889 / 0.70490643 = 0.36666667
            weight_2 = 0.2236068 / 0.70490643 = 0.3173913
            weight_3 = 0.21320072 / 0.70490643 = 0.30394263
            3. Calculate the estimated position:
            estimated_position = sum([0.36666667 * [-1800.   840.]
                                     0.3173913 * [-1560.   840.]
                                     0.30394263 * [-1680.   600.]])
            estimated_position = [-1680. * 0.36666667 - 1560. * 0.3173913 - 1680. * 0.30394263,
                                   840. * 0.36666667 + 840. * 0.3173913 + 600. * 0.30394263]
            estimated_position = [-608.4444444444444, 804.4444444444444]
            The estimated location is: [%d, %d]
            ANSWER: [608, 804]
145 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.18898224 0.18569534 0.1796053 ]) = 0.55428288
            2. Calculate the weight of each neighbor:
            weight_1 = 0.18898224 / 0.55428288 = 0.33888888
            weight_2 = 0.18569534 / 0.55428288 = 0.33444444
            weight_3 = 0.1796053 / 0.55428288 = 0.32666667
            3. Calculate the estimated position:
            estimated_position = sum([0.33888888 * [-1320.     0.]
                                     0.33444444 * [-1320.     0.]
                                     0.32666667 * [-1440.  -270.]])
            estimated_position = [-1320. * 0.33888888 - 1320. * 0.33444444 - 1440. * 0.32666667,
                                   0. * 0.33888888 + 0. * 0.33444444 + -270. * 0.32666667]
            estimated_position = [-456.6666666666666, -89.33333333333334]
            The estimated location is: [456, -90]
146 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.16666667 0.15811388 0.15617376]) = 0.48085131
            2. Calculate the weight of each neighbor:
            weight_1 = 0.16666667 / 0.48085131 = 0.34644858
            weight_2 = 0.15811388 / 0.48085131 = 0.32894531
            weight_3 = 0.15617376 / 0.48085131 = 0.32437685
            3. Calculate the estimated position:
            estimated_position = sum([0.34644858 * [-1320.     0.]
                                     0.32894531 * [-1440.     0.]
                                     0.32437685 * [-1440.  -120.]])
            estimated_position = [-1320. * 0.34644858 - 1440. * 0.32894531 - 1440. * 0.32437685 - 120. * 0.32437685]
            estimated_position = [-458.4444444444444, -476.4444444444444]

            The estimated location is: [458, 476]
147 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.16666667 0.16439899]) = 1.73105556
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 1.73105556 = 0.28868852
            weight_2 = 0.16666667 / 1.73105556 = 0.09629629
            weight_3 = 0.16439899 / 1.73105556 = 0.09510371
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.28868852 * [-1320. 0.] + 0.09629629 * [-1440. -270.] + 0.09510371 * [-1320. 0.]]
            estimated_position = [-384.4444444444444, -26.66666666666666]
            4. The estimated location is: [-384.4444444444444, -26.66666666666666]
148 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2 0.19611614 0.14433757]) = 0.53045371
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2 / 0.53045371 = 0.37681113
            weight_2 = 0.19611614 / 0.53045371 = 0.36936507
            weight_3 = 0.14433757 / 0.53045371 = 0.2538062
            3. Calculate the estimated position:
            estimated_position = sum([0.37681113 * [-1320.     0.]
                                     0.36936507 * [-1320.     0.]
                                     0.2538062 * [-1320.     0.]])
            estimated_position = [-1320. * (0.37681113 + 0.36936507 + 0.2538062) 0 * (0.37681113 + 0.36936507 + 0.2538062)]
            estimated_position = [-1320. * 1 0]
            estimated_position = [-1320., 0.]

            The estimated location is: [-1320., 0.]
149 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.23570226 0.19245009 0.13018891]) = 0.55839126
            2. Calculate the weight of each neighbor:
            weight_1 = 0.23570226 / 0.55839126 = 0.42142857
            weight_2 = 0.19245009 / 0.55839126 = 0.34482758
            weight_3 = 0.13018891 / 0.55839126 = 0.23368385
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.42142857 * -1320. + 0.34482758 * -1320. + 0.23368385 * -1440.]
            estimated_position = [-564.4444444444444, -564.4444444444444]

            The estimated location is: [-564, -564]
150 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.18569534 0.18569534 0.1796053 ]) = 0.55090092
            2. Calculate the weight of each neighbor:
            weight_1 = 0.18569534 / 0.55090092 = 0.33726886
            weight_2 = 0.18569534 / 0.55090092 = 0.33726886
            weight_3 = 0.1796053 / 0.55090092 = 0.32486602
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.33726886 * [-1080.     0.]
                                     0.33726886 * [-1080.     0.]
                                     0.32486602 * [-1080.     0.]])
            estimated_position = [-1080. * 0.33726886 * 2 + -1080. * 0.33726886 + -1080. * 0.32486602]
            estimated_position = [-1080. * 0.67453772 -1080. * 0.67453772 -1080. * 0.32486602]
            estimated_position = [-714.3468 -714.3468 -348.2796]
            estimated_position = [-714.3468 -714.3468 -348.2796] / 3
            estimated_position = [-238.1156 -238.1156 -1
151 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.35355339 0.31622777 0.26726124]) = 0.9370424
            2. Calculate the weight of each neighbor:
            weight_1 = 0.35355339 / 0.9370424 = 0.3758444
            weight_2 = 0.31622777 / 0.9370424 = 0.3354644
            weight_3 = 0.26726124 / 0.9370424 = 0.2886912
            3. Calculate the estimated position:
            estimated_position = [0.3758444 * (-1320.   300.) + 0.3354644 * (-1320.   300.) + 0.2886912 * (-1320.   300.)]
            estimated_position = [-1320. * (0.3758444 + 0.3354644 + 0.2886912) + 300. * (0.3758444 + 0.3354644 + 0.2886912)]
            estimated_position = [-1320. * 1 + 300. * 1]
            estimated_position = [-1320. + 300.]
            estimated_position = [-1020.]
            The y-coordinate is the same for all neighbors, so it remains 300.
            The answer is: [-1020., 300.]
152 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.23570226 0.13867505 0.125     ]) = 0.49997736
            2. Calculate the weight of each neighbor:
            weight_1 = 0.23570226 / 0.49997736 = 0.47142857
            weight_2 = 0.13867505 / 0.49997736 = 0.2765625
            weight_3 = 0.125 / 0.49997736 = 0.25195887
            3. Calculate the estimated position:
            estimated_position = sum([0.47142857 * [-1320.   300.]
                                     0.2765625 * [-1320.   300.]
                                     0.25195887 * [-1320.   300.]])
            estimated_position = [-1320. * (0.47142857 + 0.2765625 + 0.25195887) + 300. * (0.47142857 + 0.2765625 + 0.25195887)]
            estimated_position = [-1320. * 0.99958884 + 300. * 0.99958884]
            estimated_position = [-1288.24711964, 1288.24711964]
            The estimated location is: [1288.24711964, -1288.24711964]
153 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136  0.33333333 0.2773501 ]) = 1.05789373
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 1.05789373 = 0.42484844
            weight_2 = 0.33333333 / 1.05789373 = 0.31515152
            weight_3 = 0.2773501 / 1.05789373 = 0.26094899
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.42484844 * [-1320.   300.] + 0.31515152 * [-1320.   300.] + 0.26094899 * [-1320.   300.]]
            estimated_position = [-1320. + -1320. + -1320.]
            estimated_position = [-3960.]
            estimated_position_y = 300 * (0.42484844 + 0.31515152 + 0.26094899)
            estimated_position_y = 300 * 1
            estimated_position_y = 300
            The estimated location is: [%d, %d]
            ANSWER: [-3960., 300.]
154 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.23570226 0.19245009]) = 1.92775235
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 1.92775235 = 0.26046566
            weight_2 = 0.23570226 / 1.92775235 = 0.12248444
            weight_3 = 0.19245009 / 1.92775235 = 0.10046001
            3. Calculate the estimated position:
            estimated_position = sum([0.26046566 * [-1320.   300.]
                                     0.12248444 * [-1320.   300.]
                                     0.10046001 * [-1440.   300.]])
            estimated_position = [-1320. * 0.26046566 - 1320. * 0.12248444 - 1440. * 0.10046001,
                                   300. * 0.26046566 + 300. * 0.12248444 + 300. * 0.10046001]
            estimated_position = [-336.4766 - 158.8961 - 144.46001, 300.26046566 + 300.12248444 + 300.10046001]
            estimated_position = [-336.4766 - 158.8961 - 144.46001
155 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.2236068  0.13736056]) = 0.76921575
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / sum_similarity = 0.52865444
            weight_2 = 0.2236068 / sum_similarity = 0.29230769
            weight_3 = 0.13736056 / sum_similarity = 0.17903787
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.52865444 * [-1320.   300.] + 0.29230769 * [-1320.   300.] + 0.17903787 * [-1440.   300.]]
            estimated_position = [-1320. + 0.3565444 * (-1320.) + 0.21869231 * (-1320.) + 0.17903787 * (-1440.), 300. + 0.52865444 * 300. + 0.29230769 * 300. + 0.17903787 * 300.]
            estimated_position = [-1320. -684. -360., 600.]
            The estimated location is: [-1320., -360.]
156 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.2773501  0.15430335]) = 0.99890372
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 0.99890372 = 0.57854889
            weight_2 = 0.2773501 / 0.99890372 = 0.27854889
            weight_3 = 0.15430335 / 0.99890372 = 0.15430335
            3. Calculate the estimated position:
            estimated_position = sum([0.57854889 * [-1320.   600.]
                                     0.27854889 * [-1320.   600.]
                                     0.15430335 * [-1320.   600.]])
            estimated_position = [-1320. * (0.57854889 + 0.27854889 + 0.15430335) + 600. * (0.57854889 + 0.27854889 + 0.15430335)]
            estimated_position = [-1320. * 0.99940118 + 600. * 0.99940118]
            estimated_position = [-1267.0715, 597.0715]
            The estimated location is: [-1267, 597]
157 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.28867513 0.22941573 0.19611614]) = 0.69420699
            2. Calculate the weight of each neighbor:
            weight_1 = 0.28867513 / 0.69420699 = 0.41764706
            weight_2 = 0.22941573 / 0.69420699 = 0.32835827
            weight_3 = 0.19611614 / 0.69420699 = 0.27399467
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.41764706 * -1320. + 0.32835827 * -1320. + 0.27399467 * -1320.]
            estimated_position = [-540. -540. -540.]
            4. The estimated location is: [-540, -540]
158 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.18898224 0.1796053  0.15075567]) = 0.51934321
            2. Calculate the weight of each neighbor:
            weight_1 = 0.18898224 / 0.51934321 = 0.36288889
            weight_2 = 0.1796053 / 0.51934321 = 0.34644444
            weight_3 = 0.15075567 / 0.51934321 = 0.28966667
            3. Calculate the estimated position:
            estimated_position = sum([0.36288889 * [-1560.   300.]
                                     0.34644444 * [-1560.   300.]
                                     0.28966667 * [-1680.   300.]])
            estimated_position = [-1560. * (0.36288889 + 0.34644444 + 0.28966667) + 300. * (0.36288889 + 0.34644444 + 0.28966667)]
            estimated_position = [-1560. * 1 + 300. * 1]
            estimated_position = [-1560. + 300.]
            estimated_position = [-1260.]
            The y-coordinate is 300, so the estimated location is [0, 300].
159 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.19611614 0.19245009]) = 0.72189952
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.72189952 = 0.46363636
            weight_2 = 0.19611614 / 0.72189952 = 0.27272727
            weight_3 = 0.19245009 / 0.72189952 = 0.26363636
            3. Calculate the estimated position:
            estimated_position = sum([0.46363636 * [-1320.   600.]
                                     0.27272727 * [-1320.   600.]
                                     0.26363636 * [-1320.   600.]])
            estimated_position = [-1320. * (0.46363636 + 0.27272727 + 0.26363636) + 600. * (0.46363636 + 0.27272727 + 0.26363636)]
            estimated_position = [-1320. * 0.99996667 + 600. * 0.99996667]
            estimated_position = [-1299.6667, 600.]
            The estimated location is: [1299, 600]
160 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.28867513 0.21320072 0.17149859]) = 0.67337444
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.28867513 0.21320072 0.17149859] / sum_similarity = [0.42584646 0.31348357 0.25066997]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.42584646 0.31348357 0.25066997] * [[-1320.   840.]
 [-1320.   840.]
 [-1560.   840.]]) = [-1353.6244 840.0000]
            4. The estimated location is: [-1353.6244, 840.0000]
161 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136  0.40824829 0.33333333]) = 1.18879522
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.4472136  0.40824829 0.33333333] / sum_similarity = [0.37364818 0.33898059 0.28737123]
            3. Calculate the estimated position:
            estimated_position = sum([0.37364818 0.33898059 0.28737123] * [[-1320.   840.]
 [-1320.   840.]
 [-1320.   840.]]) = [-1320. + -1320. + -1320.] + [0.37364818 * 840. + 0.33898059 * 840. + 0.28737123 * 840.] = [-3960. + 1152. + 840.] = [-2968.]
            4. The estimated location is: [-2968., 0.]
162 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.57735027 0.57735027]) = 2.15470054
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 2.15470054 = 0.46363636
            weight_2 = 0.57735027 / 2.15470054 = 0.26470588
            weight_3 = 0.57735027 / 2.15470054 = 0.26470588
            3. Calculate the estimated position:
            estimated_position = sum([0.46363636 * [-1320.   840.]
                                     0.26470588 * [-1320.   840.]
                                     0.26470588 * [-1320.   840.]])
            estimated_position = [-1320. * 0.46363636 - 1320. * 0.26470588 - 1320. * 0.26470588 + 840. * 0.46363636 + 840. * 0.26470588 + 840. * 0.26470588]
            estimated_position = [-588.9999999999999, 588.9999999999999]
            The estimated location is: [588, 588]
163 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.22941573 0.21821789]) = 0.85587191
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.40824829 0.22941573 0.21821789] / sum_similarity = [0.48137147 0.26668714 0.25194139]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.48137147 0.26668714 0.25194139] * [[-1320.   840.] [-1320.   840.] [-1320.   840.]])
            estimated_position = [-1320. + -1320. + -1320.] + [0. + 0. + 0.] = [-3960.]
            Since the position is a 2D vector, we need to find the y-coordinate. The y-coordinate is 840.
            The answer is: [%d, %d] = [-3960., 840.]
164 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.5 0.40824829]) = 1.61535507
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 / 1.61535507, 0.5 / 1.61535507, 0.40824829 / 1.61535507] = [0.43869565, 0.31034483, 0.25195952]
            3. Calculate the estimated position:
            estimated_position = sum([0.43869565, 0.31034483, 0.25195952] * [[-1320.   840.] [-1320.   840.] [-1320.   840.]]) = [-1320. 840.]
            4. The estimated location is: [-1320, 840]
165 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.26726124 0.25       0.19611614]) = 0.61837738
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.26726124 0.25       0.19611614] / sum_similarity = [0.43488371 0.40824819 0.15686809]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.43488371 0.40824819 0.15686809] * [[-1320.   840.]
 [-1320.   840.]
 [-1560.   840.]]) = [-1353.624447 840.265667]
            4. The estimated location is: [-1353.624447, 840.265667]
166 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25 0.23570226 0.1796053]) = 0.66430756
            2. Normalize the similarities:
            weight_1 = 0.25 / 0.66430756 = 0.37796411
            weight_2 = 0.23570226 / 0.66430756 = 0.35288089
            weight_3 = 0.1796053 / 0.66430756 = 0.26915405
            3. Calculate the weighted average of the positions:
            estimated_position = (0.37796411 * [-1320.   840.]) + (0.35288089 * [-1320.   840.]) + (0.26915405 * [-1320.   840.])
            estimated_position = [-1320. * 0.37796411 - 1320. * 0.35288089 - 1320. * 0.26915405 + 840. * 0.37796411 + 840. * 0.35288089 + 840. * 0.26915405]
            estimated_position = [-480. -480. +360. +312. +312. +222.8]
            estimated_position = [-480. +132. +312. +312. +222.8]
            estimated_position = [180. 1034.]
            The estimated location is [180, 1034].
167 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.31622777 0.28867513 0.21821789]) = 0.82312079
            2. Calculate the weight of each neighbor:
            weight_1 = 0.31622777 / 0.82312079 = 0.38484848
            weight_2 = 0.28867513 / 0.82312079 = 0.34980465
            weight_3 = 0.21821789 / 0.82312079 = 0.26533258
            3. Calculate the estimated position:
            estimated_position = sum([0.38484848 * [-1200.     0.]
                                     0.34980465 * [-1200.     0.]
                                     0.26533258 * [-1200.     0.]])
            estimated_position = [-1200. * (0.38484848 + 0.34980465 + 0.26533258) 0 * (0.38484848 + 0.34980465 + 0.26533258)]
            estimated_position = [-1200. * 1 0]
            estimated_position = [-1200. 0]

            The estimated location is: [-1200, 0]
168 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.20851441 0.16903085]) = 0.78579355
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.40824829 0.20851441 0.16903085] / sum_similarity = [0.51448946 0.25724673 0.18826381]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.51448946 0.25724673 0.18826381] * [[-1200.     0.]
            [-1440.  -120.]
            [-1440.  -120.]]) = [-1248.6244466666667, -120.08572]
            4. The estimated location is: [-1248.6244466666667, -120.08572]
169 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.26726124 0.16012815 0.14744196]) = 0.57483135
            2. Calculate the weight of each neighbor:
            weight_1 = 0.26726124 / 0.57483135 = 0.46388889
            weight_2 = 0.16012815 / 0.57483135 = 0.27777778
            weight_3 = 0.14744196 / 0.57483135 = 0.25833333
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.46388889 * [-1200.     0.] + 0.27777778 * [-1440.  -120.] + 0.25833333 * [-1440.     0.]]
            estimated_position = [-562.66666667, -120.00000000]
            The estimated location is: [-562.66666667, -120.00000000]
170 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25819889 0.1767767  0.16012815]) = 0.59500384
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25819889 / 0.59500384 = 0.43478261
            weight_2 = 0.1767767 / 0.59500384 = 0.29688421
            weight_3 = 0.16012815 / 0.59500384 = 0.26833218
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.43478261 * [-1200.     0.] + 0.29688421 * [-1440.  -120.] + 0.26833218 * [-1440.     0.]]
            estimated_position = [-530.4347826064444, -120.26833218461536]
            The estimated location is: [-530.4347826064444, -120.26833218461536]
171 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.31622777 0.26726124]) = 1.0017373
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 1.0017373 = 0.4067845
            weight_2 = 0.31622777 / 1.0017373 = 0.3154634
            weight_3 = 0.26726124 / 1.0017373 = 0.2677481
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.4067845 * [-1200.     0.] + 0.3154634 * [-1200.     0.] + 0.2677481 * [-1110.  -300.]]
            estimated_position = [-488.647 -120.000]

            The estimated location is: [-488.647, -120.000]
172 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.26726124 0.21821789]) = 1.20238591
            neighbor_weight = [0.70710678 / 1.20238591, 0.26726124 / 1.20238591, 0.21821789 / 1.20238591] = [0.58888889, 0.22333333, 0.18333333]
            2. Calculate the estimated position:
            estimated_position = [0.58888889 * -1200., 0.22333333 * -1200., 0.18333333 * -1200.] = [-706.67, -266.67, -213.33]
            3. The estimated location is: [-706.67, -266.67]
173 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.35355339 0.13483997]) = 0.98840336
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 0.98840336 = 0.50418368
            weight_2 = 0.35355339 / 0.98840336 = 0.35762711
            weight_3 = 0.13483997 / 0.98840336 = 0.13678025
            3. Calculate the estimated position:
            estimated_position = sum([0.50418368 * [-1200.   300.]
                                     0.35762711 * [-1200.   300.]
                                     0.13678025 * [-1200.   300.]])
            estimated_position = [-1200. * (0.50418368 + 0.35762711 + 0.13678025) + 300. * (0.50418368 + 0.35762711 + 0.13678025)]
            estimated_position = [-1200. * 1.0 + 300. * 1.0]
            estimated_position = [-1200. + 300.]
            estimated_position = [-900.]
            The y-coordinate is 300, but the x-coordinate is not provided in the given data.
            ANSWER: [-900., 300.]
174 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.5        0.4472136 ]) = 1.58456407
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.58456407 = 0.36183888
            weight_2 = 0.5 / 1.58456407 = 0.31481481
            weight_3 = 0.4472136 / 1.58456407 = 0.28334625
            3. Calculate the estimated position:
            estimated_position = sum([0.36183888 * [-1200.   300.]
                                     0.31481481 * [-1200.   300.]
                                     0.28334625 * [-1200.   300.]])
            estimated_position = [-1200. * (0.36183888 + 0.31481481 + 0.28334625) + 300. * (0.36183888 + 0.31481481 + 0.28334625)]
            estimated_position = [-1200. * 1 + 300. * 1]
            estimated_position = [-1200. + 300.]
            estimated_position = [-900.]
            The y-coordinate is 300, but the x-coordinate is not provided in the given data.
            ANSWER: [0, -900]
175 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.16222142 0.10660036 0.10482848]) = 0.37365026
            2. Calculate the weight of each neighbor:
            weight_1 = 0.16222142 / 0.37365026 = 0.43333333
            weight_2 = 0.10660036 / 0.37365026 = 0.28481481
            weight_3 = 0.10482848 / 0.37365026 = 0.28084519
            3. Calculate the estimated position:
            estimated_position = sum([0.43333333 * [-1320.   600.]
                                     0.28481481 * [-1320.   600.]
                                     0.28084519 * [-1440.   300.]])
            estimated_position = [-1320. * 0.43333333 - 1320. * 0.28481481 - 1440. * 0.28084519,
                                   600. * 0.43333333 + 600. * 0.28481481 + 300. * 0.28084519]
            estimated_position = [-573.4444, 537.6667]
            The estimated location is: [573, 538]
176 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.4472136  0.40824829]) = 1.42281164
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.42281164 = 0.40784314
            weight_2 = 0.4472136 / 1.42281164 = 0.31568687
            weight_3 = 0.40824829 / 1.42281164 = 0.28026000
            3. Calculate the estimated position:
            estimated_position = sum([0.40784314 * [-1200.   300.]
                                     0.31568687 * [-1200.   300.]
                                     0.28026000 * [-1200.   300.]])
            estimated_position = [-1200. * (0.40784314 + 0.31568687 + 0.28026000) + 300. * (0.40784314 + 0.31568687 + 0.28026000)]
            estimated_position = [-1200. * 1 + 300. * 1]
            estimated_position = [-1200. + 300.]
            estimated_position = [-900.]
            The y-coordinate is 300, so the estimated location is: [-900., 300.]
177 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.23570226 0.22941573 0.22941573]) = 0.69452375
            2. Calculate the weight of each neighbor:
            weight_1 = 0.23570226 / 0.69452375 = 0.33784844
            weight_2 = 0.22941573 / 0.69452375 = 0.32869565
            weight_3 = 0.22941573 / 0.69452375 = 0.33345561
            3. Calculate the estimated position:
            estimated_position = sum([0.33784844 * [-1200.   300.]
                                     0.32869565 * [-1200.   300.]
                                     0.33345561 * [-1200.   300.]])
            estimated_position = [-1200. * (0.33784844 + 0.32869565 + 0.33345561) + 300. * (0.33784844 + 0.32869565 + 0.33345561)]
            estimated_position = [-1200. * 0.9996 + 300. * 0.9996]
            estimated_position = [-1199.0004, 999.5984]
            The estimated location is: [-1199, 999]
178 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.1767767  0.1767767  0.16903085]) = 0.52258422
            2. Calculate the weight of each neighbor:
            weight_1 = 0.1767767 / 0.52258422 = 0.33784344
            weight_2 = 0.1767767 / 0.52258422 = 0.33784344
            weight_3 = 0.16903085 / 0.52258422 = 0.32428578
            3. Calculate the estimated position:
            estimated_position = sum([0.33784344 * [-1200.   300.]
                                     0.33784344 * [-1200.   300.]
                                     0.32428578 * [-1200.   300.]])
            estimated_position = [-1200. * 0.33784344 * 2 + 300. * 0.33784344 * 2 + -1200. * 0.32428578]
            estimated_position = [-2416.6216 + 913.4616 - 384.3436]
            estimated_position = [-1629.816]
            Since the position is a 2D vector, we need to find the y-coordinate as well. The y-coordinate is 300.
            The answer is: "[-1629.816, 300]"
179 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.12216944 0.11867817 0.11704115]) = 0.35788866
            2. Calculate the weight of each neighbor:
            weight_1 = 0.12216944 / 0.35788866 = 0.34147969
            weight_2 = 0.11867817 / 0.35788866 = 0.33042031
            weight_3 = 0.11704115 / 0.35788866 = 0.32798095
            3. Calculate the estimated position:
            estimated_position = sum([0.34147969 * [-1200.   600.]
                                     0.33042031 * [-1080.   300.]
                                     0.32798095 * [-1200.   600.]])
            estimated_position = [-1200. * 0.34147969 - 1080. * 0.33042031 - 1200. * 0.32798095 + 600. * 0.34147969 + 300. * 0.33042031 + 600. * 0.32798095]
            estimated_position = [-410.4486 - 363.1209 - 394.4486 + 204.4486 + 100.1209 + 198.8885]
            estimated_position = [-410.4486 - 363.1209 - 394.4486 + 4
180 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.2773501  0.21821789]) = 0.90381638
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.40824829 / 0.90381638, 0.2773501 / 0.90381638, 0.21821789 / 0.90381638] = [0.45315156, 0.30749955, 0.23934889]
            3. Calculate the estimated position:
            estimated_position = sum([0.45315156, 0.30749955, 0.23934889] * [[-1200.   600.] [-1200.   600.] [ -840.   595.]]) = [-1199.6214, 600.3468]
            4. The estimated location is: [-1199.6214, 600.3468]
181 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.19245009 0.18898224 0.16439899]) = 0.54583132
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.19245009 0.18898224 0.16439899] / sum_similarity = [0.35484468 0.34766667 0.29748865]
            3. Calculate the estimated position:
            estimated_position = sum([0.35484468 0.34766667 0.29748865] * [[-1200.   600.]
 [-1080.   300.]
 [ -840.   595.]])
            estimated_position = [-1104.6726 498.3398]
            The estimated location is: [-1104, 498]
182 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.2236068  0.18257419 0.1796053 ]) = 0.58578628
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2236068 / 0.58578628 = 0.38194706
            weight_2 = 0.18257419 / 0.58578628 = 0.31140594
            weight_3 = 0.1796053 / 0.58578628 = 0.30604696
            3. Calculate the estimated position:
            estimated_position = sum([0.38194706 * [-1200.   600.]
                                     0.31140594 * [-1080.   600.]
                                     0.30604696 * [-1200.   600.]])
            estimated_position = [-1200. * 0.38194706 - 1080. * 0.31140594 - 1200. * 0.30604696,
                                   600. * 0.38194706 + 600. * 0.31140594 + 600. * 0.30604696]
            estimated_position = [-444.4444444444444, 600.0000000000001]
            The estimated location is: [444, 600]
183 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.16666667 0.1490712  0.14586499]) = 0.42159836
            2. Calculate the weight of each neighbor:
            weight_1 = 0.16666667 / 0.42159836 = 0.39487179
            weight_2 = 0.1490712 / 0.42159836 = 0.35338821
            weight_3 = 0.14586499 / 0.42159836 = 0.34973975
            3. Calculate the estimated position:
            estimated_position = sum([0.39487179 * [-1200.   600.]
                                     0.35338821 * [-1200.   600.]
                                     0.34973975 * [-1200.   600.]])
            estimated_position = [-3600. 1800.]
            4. The estimated location is: [%d, %d]
            ANSWER: [-3600, 1800]
184 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.16666667 0.13736056 0.13608276]) = 0.43970943
            2. Calculate the weight of each neighbor:
            weight_1 = 0.16666667 / 0.43970943 = 0.37878787
            weight_2 = 0.13736056 / 0.43970943 = 0.31111111
            weight_3 = 0.13608276 / 0.43970943 = 0.31111111
            3. Calculate the estimated position:
            estimated_position = sum([0.37878787 * [-1200.   600.]
                                     0.31111111 * [-1200.   600.]
                                     0.31111111 * [-1080.   600.]])
            estimated_position = [-1200. * (0.37878787 + 0.31111111 + 0.31111111) + 600. * (0.37878787 + 0.31111111 + 0.31111111),
                                   -1200. * (0.0 + 0.0 + 0.0) + 600. * (0.0 + 0.0 + 0.0)]
            estimated_position = [-1200. * 0.99999998 + 600. * 0.99999998, -1200. * 0.0 + 600. * 0.0]
            estimated_position = [-1199.999
185 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25819889 0.1796053  0.1796053 ]) = 0.61740998
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25819889 / 0.61740998 = 0.42095895
            weight_2 = 0.1796053 / 0.61740998 = 0.29285011
            weight_3 = 0.1796053 / 0.61740998 = 0.29285011
            3. Calculate the estimated position:
            estimated_position = sum([0.42095895 * [-1200.   600.]
                                     0.29285011 * [-1200.   600.]
                                     0.29285011 * [-1200.   600.]])
            estimated_position = [-1200. * 0.42095895 - 1200. * 0.29285011 - 1200. * 0.29285011 + 600. * 0.42095895 + 600. * 0.29285011 + 600. * 0.29285011]
            estimated_position = [-505.9999999999999, 505.9999999999999]
            The estimated location is: [505, 505]
186 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.2773501  0.22941573]) = 0.83970916
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.83970916 = 0.3968253968253968
            weight_2 = 0.2773501  / 0.83970916 = 0.327660462962963
            weight_3 = 0.22941573 / 0.83970916 = 0.2755786086956522
            3. Calculate the estimated position:
            estimated_position = sum([0.3968253968253968 * [-1200.   840.]
                                     0.327660462962963 * [-1200.   840.]
                                     0.2755786086956522 * [-1080.   840.]])
            estimated_position = [-1200. * (0.3968253968253968 + 0.327660462962963 + 0.2755786086956522) + 840. * (0.3968253968253968 + 0.327660462962963 + 0.2755786086956522)
                                   -1200. * (0.2755786086956522) + 840. *
187 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.22941573 0.19245009]) = 0.72337716
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.72337716 = 0.41868853
            weight_2 = 0.22941573 / 0.72337716 = 0.31764707
            weight_3 = 0.19245009 / 0.72337716 = 0.26366439
            3. Calculate the estimated position:
            estimated_position = sum([0.41868853 * [-1200.   840.]
                                     0.31764707 * [-1200.   840.]
                                     0.26366439 * [-1200.   840.]])
            estimated_position = [-1200. * (0.41868853 + 0.31764707 + 0.26366439) + 840. * (0.41868853 + 0.31764707 + 0.26366439)]
            estimated_position = [-1200. * 1 + 840. * 1]
            estimated_position = [-1200. + 840.]
            estimated_position = [-360.]
            The estimated y-coordinate is 840.
            Since the x-coordinate is the average of the x-coordinates of the top-3 neighbors, we can calculate it as follows:
            average_x = sum([-1200.    -1200.    -1200.]) /
188 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.28867513 0.26726124]) = 0.85583637
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 0.85583637 = 0.58333333
            weight_2 = 0.28867513 / 0.85583637 = 0.33666667
            weight_3 = 0.26726124 / 0.85583637 = 0.31000001
            3. Calculate the estimated position:
            estimated_position = sum([0.58333333 * [-1200.   840.]
                                     0.33666667 * [-1200.   840.]
                                     0.31000001 * [-1200.   840.]])
            estimated_position = [-1200. * (0.58333333 + 0.33666667 + 0.31000001) + 840. * (0.58333333 + 0.33666667 + 0.31000001)]
            estimated_position = [-1200. * 1.23000001 + 840. * 1.23000001]
            estimated_position = [-1436. + 1016.]
            estimated_position = [-416.]
            estimated_y = 840.
            estimated_position = [-416., 840.]
            The estimated location is: [-416., 840.]
189 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.30151134 0.2773501  0.21821789]) = 0.80707933
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.30151134 0.2773501  0.21821789] / sum_similarity = [0.37384646 0.3409833  0.28516985]
            3. Calculate the estimated position:
            estimated_position = sum([0.37384646 0.3409833  0.28516985] * [[-1200.   840.] [-1200.   840.] [-1200.   840.]]) = [-1200. 840.]
            4. The estimated location is: [-1200, 840]
190 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.26726124 0.25819889 0.21821789]) = 0.74377792
            neighbor_weight = [0.26726124 0.25819889 0.21821789] / 0.74377792 = [0.35714286 0.34349524 0.2993619]
            2. Calculate the estimated position:
            estimated_position = sum([0.35714286 0.34349524 0.2993619] * [[-1140.  -600.]
            [-1140.  -600.]
            [-1140.  -600.]])
            estimated_position = [-1140. * 0.35714286 -600. * 0.35714286 -1140. * 0.34349524 -600. * 0.34349524 -1140. * 0.2993619 -600. * 0.2993619]
            estimated_position = [-399.99999999999995 -199.9999999999999]
            The estimated location is: [-399, -200]
191 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.20851441 0.18898224]) = 0.69899799
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.69899799 = 0.43333333
            weight_2 = 0.20851441 / 0.69899799 = 0.29888889
            weight_3 = 0.18898224 / 0.69899799 = 0.26777778
            3. Calculate the estimated position:
            estimated_position = sum([0.43333333 * [-1140.  -600.]
                                     0.29888889 * [-1140.  -600.]
                                     0.26777778 * [-1140.  -600.]])
            estimated_position = [-1140. * (0.43333333 + 0.29888889 + 0.26777778) -600. * (0.43333333 + 0.29888889 + 0.26777778)]
            estimated_position = [-1140. * 1.00000000 -600. * 1.00000000]
            estimated_position = [-1140. -600.]

            The estimated location is: [-1140, -600]
192 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.40824829 0.25819889]) = 1.66644718
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 1.66644718 = 0.60000002
            weight_2 = 0.40824829 / 1.66644718 = 0.24444444
            weight_3 = 0.25819889 / 1.66644718 = 0.15111111
            3. Calculate the estimated position:
            estimated_position = sum([0.60000002 * [-1140.  -600.]
                                     0.24444444 * [-1140.  -600.]
                                     0.15111111 * [-1140.  -600.]])
            estimated_position = [-704. -360.]
            The estimated location is: [-704, -360]
193 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.4472136  0.31622777]) = 1.46854815
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 0.4472136  0.31622777] / sum_similarity = [0.4865534  0.3032768  0.1901698]
            3. Calculate the estimated position:
            estimated_position = sum([0.4865534  0.3032768  0.1901698] * [[-1140.  -600.]
 [-1140.  -600.]
 [-1140.  -600.]]) = [-1140. -600.]
            4. The estimated location is: [-1140, -600]
194 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.37796447 0.35355339 0.24253563]) = 1.07405349
            2. Next, calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 1.07405349 = 0.35344444
            weight_2 = 0.35355339 / 1.07405349 = 0.32866667
            weight_3 = 0.24253563 / 1.07405349 = 0.22389989
            3. Finally, calculate the estimated position:
            estimated_position = sum([0.35344444 * [-1140.  -600.]
                                     0.32866667 * [-1140.  -600.]
                                     0.22389989 * [-1140.  -600.]])
            estimated_position = [-1140. * (0.35344444 + 0.32866667 + 0.22389989) -600. * (0.35344444 + 0.32866667 + 0.22389989)]
            estimated_position = [-1140. * 0.90600001 -600. * 0.90600001]
            estimated_position = [-1039.6, -543.0000000000001]
            The estimated location is: [-1039.6, -543.0]
195 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25 0.21320072 0.21320072]) = 0.67640072
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25 / 0.67640072 = 0.36787944
            weight_2 = 0.21320072 / 0.67640072 = 0.31312078
            weight_3 = 0.21320072 / 0.67640072 = 0.31312078
            3. Calculate the estimated position:
            estimated_position = sum([0.36787944 * [-1440.  -490.]
                                     0.31312078 * [-1200.     0.]
                                     0.31312078 * [-1110.  -300.]])
            estimated_position = [-1308.44 -365.88]

            The estimated location is: [-1308, -366]
196 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.14586499 0.13867505]) = 1.00164682
            neighbor_weight = [0.70710678 0.14586499 0.13867505] / 1.00164682 = [0.70685566 0.14543234 0.14771201]
            2. Calculate the estimated position:
            estimated_position = sum([0.70685566 0.14543234 0.14771201] * [[-1110.  -300.]
            [ -960.  -420.]
            [-1440.  -120.]])
            estimated_position = [-1110. * 0.70685566 -300. * 0.14543234 -960. * 0.14771201 -1440. * 0.14771201 -120. * 0.14543234]
            estimated_position = [-748.4499999999999 -43.49999999999999 -144.4499999999999 -208.88999999999998 -18.99999999999999]
            estimated_position = [-748, -43]
            The estimated location is [-748, -43].
197 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.4472136  0.30151134 0.28867513]) = 1.03739998
            neighbor_weight = [0.4472136  0.30151134 0.28867513] / 1.03739998 = [0.4333484  0.2914486  0.275203]
            2. Calculate the estimated position:
            estimated_position = sum([0.4333484  0.2914486  0.275203] * [[-1110.  -300.]
            [-1440.  -490.]
            [-1110.  -300.]]) = [-1088.44 -327.32]
            The estimated location is: [-1088, -327]
198 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.40824829 0.16903085 0.14744196]) = 0.72472010
            neighbor_weight = [0.40824829 0.16903085 0.14744196] / 0.72472010 = [0.56568543 0.23339226 0.19992231]
            2. Calculate the estimated position:
            estimated_position = sum([0.56568543 0.23339226 0.19992231] * [[-1110.  -300.]
            [ -960.  -420.]
            [-1440.  -120.]])
            estimated_position = [-1088.4344  -366.0972]
            The estimated location is: [-1088, -366]
199 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.37796447 0.24253563]) = 1.32756688
            2. Next, calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.32756688 = 0.53055556
            weight_2 = 0.37796447 / 1.32756688 = 0.28333333
            weight_3 = 0.24253563 / 1.32756688 = 0.18309521
            3. Finally, calculate the estimated position:
            estimated_position = sum([0.53055556 * [-1110.  -150.]
                                     0.28333333 * [-1110.  -150.]
                                     0.18309521 * [-1110.  -150.]])
            estimated_position = [-1110. * (0.53055556 + 0.28333333 + 0.18309521) - 150. * (0.53055556 + 0.28333333 + 0.18309521)]
            estimated_position = [-1110. * 0.99698454 - 150. * 0.99698454]
            estimated_position = [-1099.9698454, -149.9698454]
            The estimated location is: [-1099.9698454, -149.9698454]
200 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2236068  0.13130643 0.12309149]) = 0.47800472
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2236068 / 0.47800472 = 0.46844444
            weight_2 = 0.13130643 / 0.47800472 = 0.27487179
            weight_3 = 0.12309149 / 0.47800472 = 0.25648337
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.46844444 * (-1080.) + 0.27487179 * (-1080.) + 0.25648337 * (-1440.)]
            estimated_position = [-816.4444, -816.4444]

            The estimated location is: [-816.4444, -816.4444]
201 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.19611614 0.1767767  0.16439899]) = 0.53729193
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.19611614 0.1767767  0.16439899] / sum_similarity = [0.36784311 0.32860856 0.28354833]
            3. Calculate the estimated position:
            estimated_position = sum([0.36784311 0.32860856 0.28354833] * [[-1110.  -300.]
            [-1200.     0.]
            [-1110.  -300.]]) = [-1098.4444 -283.5483]
            4. The estimated location is: [-1098.4444, -283.5483]
202 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.4472136 0.21320072]) = 1.15041334
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 1.15041334 = 0.43478261
            weight_2 = 0.4472136 / 1.15041334 = 0.38888889
            weight_3 = 0.21320072 / 1.15041334 = 0.1763265
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.43478261 * [-1110.  -150.]) + (0.38888889 * [-1110.  -150.]) + (0.1763265 * [-1110.  -150.])
            estimated_position = [-1110. -150.]

            The estimated location is: [-1110, -150]
203 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1. 0.5 0.5]) = 2
            2. Normalize the similarities: neighbor_weight = [1. 0.5 0.5] / 2 = [0.5, 0.25, 0.25]
            3. Calculate the weighted average of the neighbor positions: estimated_position = sum([0.5 * [-1110.  -150.]
                                                                                                    0.25 * [-1110.  -150.]
                                                                                                    0.25 * [-1110.  -150.]]) = [-1110. -75.]
            4. The estimated location is: [-1110, -75]
204 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.16439899 0.16222142 0.16222142]) = 0.48884083
            neighbor_weight = [0.16439899 0.16222142 0.16222142] / 0.48884083 = [0.33333333 0.33333333 0.33333333]
            2. Calculate the estimated position:
            estimated_position = sum([0.33333333 0.33333333 0.33333333] * [[-1080.  -450.]
            [-1110.  -300.]
            [-1440.  -490.]])
            estimated_position = [-1080. * 0.33333333 - 1110. * 0.33333333 - 1440. * 0.33333333 - 450. * 0.33333333 - 300. * 0.33333333 - 490. * 0.33333333]
            estimated_position = [-366. -366. -483. -154. -100. -161.]
            estimated_position = [-366, -366]
            The estimated location is [-366, -366]
205 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.33333333 0.23570226]) = 1.14638586
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.14638586 = 0.50588235
            weight_2 = 0.33333333 / 1.14638586 = 0.29032258
            weight_3 = 0.23570226 / 1.14638586 = 0.20389497
            3. Calculate the estimated position:
            estimated_position = sum([0.50588235 * [-1080.  -450.]
                                     0.29032258 * [-1080.  -450.]
                                     0.20389497 * [-1110.  -300.]])
            estimated_position = [-594.1767  -143.6446]
            4. The estimated location is: [-594.1767, -143.6446]
206 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.5 0.5 0.30151134]) = 1.30151134
            neighbor_weight = [0.5/1.30151134, 0.5/1.30151134, 0.30151134/1.30151134] = [0.38461538, 0.38461538, 0.23078428]
            2. Calculate the estimated position:
            estimated_position = sum([0.38461538, 0.38461538, 0.23078428] * [[-1080.  -450.]
            [-1080.  -450.]
            [-1110.  -300.]])
            estimated_position = [-1080. * 0.38461538 - 450. * 0.38461538 - 1110. * 0.23078428 - 1080. * 0.38461538 - 450. * 0.38461538 - 300. * 0.23078428]
            estimated_position = [-432.2467 -189.2307 -248.2842 -432.2467 -189.2307 -69.2842]
            estimated_position = [-1080. -450.] + [-432.2467 -189.2307]
            estimated_position = [-1512.2467 -639.2307]
            The estimated location is [-1512.2467, -639.2307]
207 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.57735027 0.37796447]) = 1.95531474
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 1.95531474 = 0.51176471
            weight_2 = 0.57735027 / 1.95531474 = 0.29483619
            weight_3 = 0.37796447 / 1.95531474 = 0.1933991
            3. Calculate the estimated position:
            estimated_position = sum([0.51176471 * [-1080.  -450.]
                                     0.29483619 * [-1080.  -450.]
                                     0.1933991 * [-1080.  -450.]])
            estimated_position = [-1080. * 0.51176471 -450. * 0.51176471 -1080. * 0.29483619 -450. * 0.29483619 -1080. * 0.1933991 -450. * 0.1933991]
            estimated_position = [-560. -245.]
            The estimated location is: [-560., -245.]
208 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.35355339 0.28867513]) = 1.35833529
            2. Next, calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.35833529 = 0.52360679
            weight_2 = 0.35355339 / 1.35833529 = 0.26086667
            weight_3 = 0.28867513 / 1.35833529 = 0.21546154
            3. Finally, calculate the estimated position:
            estimated_position = sum([0.52360679 * [-1080.  -450.]
                                     0.26086667 * [-1080.  -450.]
                                     0.21546154 * [-1080.  -450.]])
            estimated_position = [-1080. * (0.52360679 + 0.26086667 + 0.21546154) - 450. * (0.52360679 + 0.26086667 + 0.21546154)]
            estimated_position = [-1080. * 0.99993499 - 450. * 0.99993499]
            estimated_position = [-1039.9999699969997, -449.9999699969997]
            The estimated location is: [-1040, -450]
209 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.57735027 0.37796447]) = 1.53266498
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.53266498 = 0.37796447
            weight_2 = 0.57735027 / 1.53266498 = 0.37796447
            weight_3 = 0.37796447 / 1.53266498 = 0.24407098
            3. Calculate the estimated position:
            estimated_position = sum([0.37796447 * [-1080.  -450.]
                                     0.37796447 * [-1080.  -450.]
                                     0.24407098 * [-1080.  -450.]])
            estimated_position = [-1080. * 0.37796447 * 2 -450. * 0.37796447 * 2 -1080. * 0.24407098 * 2]
            estimated_position = [-1566.9668 -933.4724 -252.3619]
            4. The estimated location is: [round(-1566.9668), round(-933.4724)]
            ANSWER: [-1567, -933]
210 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25 0.2236068 0.18898224]) = 0.66258804
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25 / 0.66258804 = 0.3783783783783784
            weight_2 = 0.2236068 / 0.66258804 = 0.334920634920635
            weight_3 = 0.18898224 / 0.66258804 = 0.286641629032258
            3. Calculate the estimated position:
            estimated_position = sum([0.3783783783783784 * [-1080.  -450.]
                                     0.334920634920635 * [-1080.  -450.]
                                     0.286641629032258 * [-1080.  -450.]])
            estimated_position = [-1080. * 0.3783783783783784 -450. * 0.3783783783783784
                                  -1080. * 0.334920634920635 -450. * 0.334920634920635
                                  -1080. * 0.286641629032258 -450. * 0.286641629032258]
            estimated_position = [-396.4644444444444
211 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.35355339 0.28867513 0.25      ]) = 0.89222852
            2. Calculate the weight of each neighbor:
            weight_1 = 0.35355339 / 0.89222852 = 0.39684211
            weight_2 = 0.28867513 / 0.89222852 = 0.32246267
            weight_3 = 0.25 / 0.89222852 = 0.27867421
            3. Calculate the estimated position:
            estimated_position = sum([0.39684211 * [-1080.     0.]
                                     0.32246267 * [-1080.     0.]
                                     0.27867421 * [-1080.     0.]])
            estimated_position = [-1080. * (0.39684211 + 0.32246267 + 0.27867421) 0 * (0.39684211 + 0.32246267 + 0.27867421)]
            estimated_position = [-1080. * 1 0]
            estimated_position = [-1080. 0.]

            The estimated location is: [-1080, 0]
212 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.1796053 0.125     0.125    ]) = 0.4247053
            2. Calculate the weight of each neighbor:
            weight_1 = 0.1796053 / 0.4247053 = 0.4218487
            weight_2 = 0.125 / 0.4247053 = 0.2956522
            weight_3 = 0.125 / 0.4247053 = 0.2956522
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.4218487 * -1080. + 0.2956522 * -1880. + 0.2956522 * -1880.]
            estimated_position = [-468.444 -554.644 -554.644]
            4. The estimated location is the average of the estimated position:
            estimated_location = [(-468.444 + -554.644 + -554.644) / 3]
            estimated_location = [-560.480]
            Since the position is a 2D point, we need to find the corresponding y-value.
            The y-value is 0, as all the neighbor positions have a y-value of 0.
            estimated_location = [-560.480, 0]
            The estimated location is [-560.480, 0].
213 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.25819889 0.15249857 0.14285714]) = 0.5535546
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.25819889 0.15249857 0.14285714] / sum_similarity = [0.46384646 0.27463063 0.26152291]
            3. Calculate the estimated position:
            estimated_position = sum([0.46384646 0.27463063 0.26152291] * [[-1080.     0.]
 [ -600.  -450.]
 [ -840.     0.]]) = [-840. -226.5]
            4. The estimated location is: [-840, -226.5]
214 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.26726124 0.125      0.11785113]) = 0.50996237
            2. Calculate the weight of each neighbor:
            weight_1 = 0.26726124 / 0.50996237 = 0.52388889
            weight_2 = 0.125 / 0.50996237 = 0.24545455
            weight_3 = 0.11785113 / 0.50996237 = 0.22665556
            3. Calculate the estimated position:
            estimated_position = sum([0.52388889 * [-1080.     0.]
                                     0.24545455 * [-600.  -450.]
                                     0.22665556 * [-840.  -300.]])
            estimated_position = [-588.61114444, -138.33222222]
            4. The estimated location is: [588, -138]
215 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.12803688 0.11785113]) = 0.54739935
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.54739935 = 0.55084697
            weight_2 = 0.12803688 / 0.54739935 = 0.23264865
            weight_3 = 0.11785113 / 0.54739935 = 0.21649438
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.55084697 * -1080. + 0.23264865 * -600. + 0.21649438 * -1880.]
            estimated_position = [-600. -135.44]
            The estimated location is: [-600., -135.44]
216 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.35355339 0.30151134 0.28867513]) = 0.94374006
            2. Calculate the weight of each neighbor:
            weight_1 = 0.35355339 / 0.94374006 = 0.37142857
            weight_2 = 0.30151134 / 0.94374006 = 0.31868843
            weight_3 = 0.28867513 / 0.94374006 = 0.30088399
            3. Calculate the estimated position:
            estimated_position = sum([0.37142857 * [-1770.  -240.]
                                     0.31868843 * [-1770.  -240.]
                                     0.30088399 * [-1770.  -240.]])
            estimated_position = [-1770. * (0.37142857 + 0.31868843 + 0.30088399) - 240. * (0.37142857 + 0.31868843 + 0.30088399)]
            estimated_position = [-1770. * 0.98160101 - 240. * 0.98160101]
            estimated_position = [-1688.46066099, -235.48210101]
            The estimated location is: [-1688, -235]
217 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.5 0.5 0.31622777]) = 1.31622777
            neighbor_weight = [0.5/1.31622777, 0.5/1.31622777, 0.31622777/1.31622777] = [0.38095238, 0.38095238, 0.23804562]
            2. Calculate the estimated position:
            estimated_position = sum([0.38095238, 0.38095238, 0.23804562] * [[-1080., 300.], [-1080., 300.], [-1080., 300.]])
            estimated_position = [(-1080.*0.38095238 - 1080.*0.38095238 - 1080.*0.23804562), (300.*0.38095238 + 300.*0.38095238 + 300.*0.23804562)]
            estimated_position = [-3242.4676, 901.9816]
            The estimated location is: [-3242.4676, 901.9816]
218 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.21821789 0.20851441 0.12700013]) = 0.55373243
            2. Calculate the weight of each neighbor:
            weight_1 = 0.21821789 / 0.55373243 = 0.39184874
            weight_2 = 0.20851441 / 0.55373243 = 0.37388889
            weight_3 = 0.12700013 / 0.55373243 = 0.23426237
            3. Calculate the estimated position:
            estimated_position = sum([0.39184874 * [-1080.   300.]
                                     0.37388889 * [-1080.   300.]
                                     0.23426237 * [-1200.   600.]])
            estimated_position = [-1080. * 0.39184874 - 1080. * 0.37388889 - 1200. * 0.23426237 + 300. * 0.39184874 + 300. * 0.37388889 + 600. * 0.23426237]
            estimated_position = [-417.4746 - 386.4676 - 277.2946 + 117.4746 + 105.4676 + 148.9946]
            estimated_position = [-417.4746 - 386.4676 - 277.2946 + 2
219 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.16222142 0.15430335 0.12216944]) = 0.43869416
            2. Calculate the weight of each neighbor:
            weight_1 = 0.16222142 / 0.43869416 = 0.36988474
            weight_2 = 0.15430335 / 0.43869416 = 0.35294117
            weight_3 = 0.12216944 / 0.43869416 = 0.27796989
            3. Calculate the estimated position:
            estimated_position = sum([0.36988474 * [-1080.   300.]
                                     0.35294117 * [-1080.   300.]
                                     0.27796989 * [-1200.   600.]])
            estimated_position = [-1080. * 0.36988474 - 1080. * 0.35294117 - 1200. * 0.27796989,
                                   300. * 0.36988474 + 300. * 0.35294117 + 600. * 0.27796989]
            estimated_position = [-400.474588, 432.491057]
            The estimated location is: [400.474588, 432.491057]
220 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.5 0.26726124 0.25]) = 0.96726124
            neighbor_weight = [0.5/0.96726124, 0.26726124/0.96726124, 0.25/0.96726124] = [0.52083333, 0.27457597, 0.24458866]
            2. Calculate the estimated position:
            estimated_position = sum([0.52083333, 0.27457597, 0.24458866] * [[-1080., 300.], [-1080., 300.], [-1080., 300.]])
            estimated_position = [(-1080.*0.52083333 - 1080.*0.27457597 - 1080.*0.24458866) + (300.*0.52083333 + 300.*0.27457597 + 300.*0.24458866)]
            estimated_position = [-1080.*1.0 + 300.*1.0, -1080.*1.0 + 300.*1.0]
            estimated_position = [-1080. + 300., -1080. + 300.]
            estimated_position = [-780., -780.]
            The estimated location is [-780., -780.]
221 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.31622777 0.21320072 0.20851441]) = 0.7379429
            2. Calculate the weight of each neighbor:
            weight_1 = 0.31622777 / 0.7379429 = 0.42545454
            weight_2 = 0.21320072 / 0.7379429 = 0.28888889
            weight_3 = 0.20851441 / 0.7379429 = 0.28064517
            3. Calculate the estimated position:
            estimated_position = sum([0.42545454 * [-1080.   300.]
                                     0.28888889 * [-1080.   300.]
                                     0.28064517 * [-1080.   300.]])
            estimated_position = [-1080. * (0.42545454 + 0.28888889 + 0.28064517) + 300. * (0.42545454 + 0.28888889 + 0.28064517)]
            estimated_position = [-1080. * 0.995 + 300. * 0.995]
            estimated_position = [-1004.5, 995.]
            The estimated location is: [-1004.5, 995.]
222 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.21821789 0.19611614 0.1796053 ]) = 0.59393933
            2. Calculate the weight of each neighbor:
            weight_1 = 0.21821789 / 0.59393933 = 0.36666667
            weight_2 = 0.19611614 / 0.59393933 = 0.33130435
            weight_3 = 0.1796053 / 0.59393933 = 0.30203068
            3. Calculate the estimated position:
            estimated_position = sum([0.36666667 * [-1200.   300.]
                                     0.33130435 * [-1200.   300.]
                                     0.30203068 * [-1200.   300.]])
            estimated_position = [-1200. * (0.36666667 + 0.33130435 + 0.30203068) + 300. * (0.36666667 + 0.33130435 + 0.30203068)]
            estimated_position = [-1200. * 0.99999999 + 300. * 0.99999999]
            estimated_position = [-1199. 299.99999999999997]
            The estimated location is: [-1199, 299]
223 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.31622777 0.30151134 0.16903085]) = 0.78677001
            2. Calculate the weight of each neighbor:
            weight_1 = 0.31622777 / 0.78677001 = 0.400000004
            weight_2 = 0.30151134 / 0.78677001 = 0.382000006
            weight_3 = 0.16903085 / 0.78677001 = 0.217999996
            3. Calculate the estimated position:
            estimated_position = (weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3)
            estimated_position = (0.400000004 * [-1080.   600.] + 0.382000006 * [-1080.   600.] + 0.217999996 * [ -960.   720.])
            estimated_position = [-1080.   600.] + 0.400000004 * (-1080.   600.) + 0.382000006 * (-1080.   600.) + 0.217999996 * ( -960.   720.)
            estimated_position = [-1080.   600.] - 439.2 - 390.72 - 218.36
            estimated_position = [-1080.   600.] - 1048.28
            estimated_position = [-2818.   600.]
            The estimated location is: [-2818.   
224 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.31622777 0.19245009 0.19245009]) = 0.69910005
            2. Calculate the weight of each neighbor:
            weight_1 = 0.31622777 / 0.69910005 = 0.45285714
            weight_2 = 0.19245009 / 0.69910005 = 0.27466306
            weight_3 = 0.19245009 / 0.69910005 = 0.27466306
            3. Calculate the estimated position:
            estimated_position = sum([0.45285714 * [-1080.   600.]
                                     0.27466306 * [-1080.   600.]
                                     0.27466306 * [ -960.   720.]])
            estimated_position = [-1336.6   609.98]

            The estimated location is: [-1336, 609]
225 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.21821789 0.15811388 0.15430335]) = 0.53063112
            2. Calculate the weight of each neighbor:
            weight_1 = 0.21821789 / 0.53063112 = 0.41138585
            weight_2 = 0.15811388 / 0.53063112 = 0.29836065
            weight_3 = 0.15430335 / 0.53063112 = 0.2918502
            3. Calculate the estimated position:
            estimated_position = sum([0.41138585 * [-1080.   600.]
                                     0.29836065 * [-1080.   840.]
                                     0.2918502 * [-1200.   600.]])
            estimated_position = [-548.64444444, 588.48888889]
            4. The estimated location is: [548, 588]
226 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.1796053  0.1796053  0.16903085]) = 0.52824115
            2. Calculate the weight of each neighbor:
            weight_1 = 0.1796053 / 0.52824115 = 0.33774194
            weight_2 = 0.1796053 / 0.52824115 = 0.33774194
            weight_3 = 0.16903085 / 0.52824115 = 0.31451611
            3. Calculate the estimated position:
            estimated_position = sum([0.33774194 * [-1200.   600.]
                                     0.33774194 * [-1200.   600.]
                                     0.31451611 * [-1080.   600.]])
            estimated_position = [-1200. * 0.67548388 + 600. * 0.67548388 - 1200. * 0.67548388 + 600. * 0.67548388 - 1080. * 0.31451611 + 600. * 0.31451611]
            estimated_position = [-765.9999999999999, 600. * 1.35996776]
            estimated_position = [-765.9999999999999, 842.9999999999999]
            The estimated location is: [-765, 843]
227 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2236068  0.2        0.16666667]) = 0.60027347
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2236068 / 0.60027347 = 0.3726726
            weight_2 = 0.2 / 0.60027347 = 0.33333333
            weight_3 = 0.16666667 / 0.60027347 = 0.29333333
            3. Calculate the estimated position:
            estimated_position = sum([0.3726726 * [-1080.   840.]
                                     0.33333333 * [-1080.   840.]
                                     0.29333333 * [-1080.   840.]])
            estimated_position = [-1080. * 0.3726726 - 1080. * 0.33333333 - 1080. * 0.29333333 + 840. * 0.3726726 + 840. * 0.33333333 + 840. * 0.29333333]
            estimated_position = [-366.66666666666666, 583.3333333333333]
            4. The estimated location is: [366, 583]
228 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.35355339 0.35355339 0.28867513]) = 0.99578162
            2. Calculate the weight of each neighbor:
            weight_1 = 0.35355339 / 0.99578162 = 0.35483871
            weight_2 = 0.35355339 / 0.99578162 = 0.35483871
            weight_3 = 0.28867513 / 0.99578162 = 0.28668358
            3. Calculate the estimated position:
            estimated_position = sum([0.35483871 * [-1080.   840.]
                                     0.35483871 * [-1080.   840.]
                                     0.28668358 * [-1080.   840.]])
            estimated_position = [-3256.6742 2603.9646]

            The estimated location is: [-3256.6742, 2603.9646]
229 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.37796447 0.28867513 0.28867513]) = 0.95520463
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.37796447 0.28867513 0.28867513] / sum_similarity = [0.39388889 0.29999999 0.20611111]
            3. Calculate the estimated position:
            estimated_position = sum([0.39388889 0.29999999 0.20611111] * [[-1080.   840.] [-1080.   840.] [-1080.   840.]]) = [-1080. + -1080. + -1080.] + [0.29999999 * 840. + 0.29999999 * 840. + 0.20611111 * 840.] = [-3240. + 1799.9998 + 1799.9998] = [-3240. + 3600.] = [360.]
            4. The estimated location is: [360., 840.]
230 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.2773501  0.23570226 0.20851441]) = 0.71156677
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.2773501 / 0.71156677, 0.23570226 / 0.71156677, 0.20851441 / 0.71156677] = [0.38848559, 0.33284859, 0.27866582]
            3. Calculate the estimated position:
            estimated_position = sum([0.38848559, 0.33284859, 0.27866582] * [[-1080.   840.] [-1080.   840.] [-1200.   600.]]) = [-1080. + 0.38848559 * (-1080.) + 0.33284859 * (-1080.) + 0.27866582 * (-1200.) + 0.38848559 * 840. + 0.33284859 * 840. + 0.27866582 * 600.] = [-1080. -366.672 -366.672 -396. -366.672 -366.672 + 216.538 + 216.538 + 167.499] = [-1080. -789.499]
            4. The estimated location is: [-1080., -789.499]
231 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.21821789 0.21821789 0.20412415]) = 0.63656913
            2. Calculate the weight of each neighbor:
            weight_1 = 0.21821789 / 0.63656913 = 0.34147098
            weight_2 = 0.21821789 / 0.63656913 = 0.34147098
            weight_3 = 0.20412415 / 0.63656913 = 0.32004805
            3. Calculate the estimated position:
            estimated_position = sum([0.34147098 * [-1080.   840.]
                                     0.34147098 * [-1080.   840.]
                                     0.32004805 * [-1080.   840.]])
            estimated_position = [-3242.6196 2521.8204]

            The estimated location is: [-3242.6196, 2521.8204]
232 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136  0.37796447 0.31622777]) = 1.13140584
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.4472136  0.37796447 0.31622777] / sum_similarity = [0.4472136  0.37796447 0.31622777] / 1.13140584 = [0.39387756 0.33333333 0.27272727]
            3. Calculate the estimated position:
            estimated_position = sum([0.39387756 0.33333333 0.27272727] * [[-1080.   840.] [-1080.   840.] [-1080.   840.]]) = sum([[-405.6123 310.8889] [-405.6123 310.8889] [-405.6123 310.8889]]) = [-405.6123, 310.8889]
            4. The estimated location is: [-405.6123, 310.8889]
233 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.5 0.30151134]) = 1.30151134
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 1.30151134 = 0.38461538
            weight_2 = 0.5 / 1.30151134 = 0.38461538
            weight_3 = 0.30151134 / 1.30151134 = 0.23078462
            3. Calculate the estimated position:
            estimated_position = sum([0.38461538 * [-960. -420.]
                                     0.38461538 * [-960. -420.]
                                     0.23078462 * [-960. -420.]])
            estimated_position = [-1008.4276 -441.2156]
            4. The estimated location is: [-1008.4276, -441.2156]
234 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.2773501  0.26726124]) = 0.92257581
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 0.92257581 = 0.40888888
            weight_2 = 0.2773501 / 0.92257581 = 0.30095238
            weight_3 = 0.26726124 / 0.92257581 = 0.29015584
            3. Calculate the estimated position:
            estimated_position = sum([0.40888888 * [-960. -420.]
                                     0.30095238 * [-960. -420.]
                                     0.29015584 * [-960. -420.]])
            estimated_position = [-1196. -366.]
            The estimated location is: [-1196, -366]
235 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.31622777 0.16666667 0.16222142]) = 0.64489586
            2. Calculate the weight of each neighbor:
            weight_1 = 0.31622777 / 0.64489586 = 0.48888888
            weight_2 = 0.16666667 / 0.64489586 = 0.25974026
            weight_3 = 0.16222142 / 0.64489586 = 0.25135106
            3. Calculate the estimated position:
            estimated_position = (0.48888888 * [-960.  -420.]) + (0.25974026 * [-960.  -420.]) + (0.25135106 * [-1200.     0.])
            estimated_position = [-848.88888888 -369.74025974]

            The estimated location is: [-848, -369]
236 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2773501  0.20851441 0.15249857]) = 0.63831298
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2773501 / sum_similarity = 0.43184846
            weight_2 = 0.20851441 / sum_similarity = 0.31848465
            weight_3 = 0.15249857 / sum_similarity = 0.25066689
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.43184846 * [-960.  -420.] + 0.31848465 * [-960.  -420.] + 0.25066689 * [-1110.  -300.]]
            estimated_position = [-748.43184846 -298.43184846]
            The estimated location is: [-748, -298]
237 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.16666667 0.15075567 0.14433757]) = 0.46165991
            2. Calculate the weight of each neighbor:
            weight_1 = 0.16666667 / 0.46165991 = 0.36130435
            weight_2 = 0.15075567 / 0.46165991 = 0.32688889
            weight_3 = 0.14433757 / 0.46165991 = 0.30984666
            3. Calculate the estimated position:
            estimated_position = sum([0.36130435 * [-1080.  -450.]
                                     0.32688889 * [-1110.  -150.]
                                     0.30984666 * [-1080.  -450.]])
            estimated_position = [-1104.4444444444446, -403.6666666666666]
            4. The estimated location is: [%d, %d]
            ANSWER: [-1104, -404]
238 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.37796447 0.26726124]) = 1.63722571
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 1.63722571 = 0.60869565
            weight_2 = 0.37796447 / 1.63722571 = 0.22860869
            weight_3 = 0.26726124 / 1.63722571 = 0.16351966
            3. Calculate the estimated position:
            estimated_position = (0.60869565 * [-960.    0.]) + (0.22860869 * [-960.    0.]) + (0.16351966 * [-960.    0.])
            estimated_position = [-577.38043 0.]
            4. The estimated location is: [-577.38043, 0]
239 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.28867513 0.2773501]) = 1.56597523
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 1.56597523 = 0.63888888
            weight_2 = 0.28867513 / 1.56597523 = 0.18333333
            weight_3 = 0.2773501 / 1.56597523 = 0.17777777
            3. Calculate the estimated position:
            estimated_position = sum([0.63888888 * [-960.    0.]
                                     0.18333333 * [-960.    0.]
                                     0.17777777 * [-960.    0.]])
            estimated_position = [-604.61111111, 0.]
            4. The estimated location is: [-604.61111111, 0.]
240 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.35355339 0.28867513]) = 1.64222852
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 1.64222852 = 0.60606061
            weight_2 = 0.35355339 / 1.64222852 = 0.21428571
            weight_3 = 0.28867513 / 1.64222852 = 0.17564858
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.60606061 * [-960.    0.] + 0.21428571 * [-960.    0.] + 0.17564858 * [-960.    0.]]
            estimated_position = [-577.2366666666666, 0.]

            The estimated location is: [-577, 0]
241 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.26726124 0.23570226 0.2       ]) = 0.7231635
            neighbor_weight = [0.26726124 0.23570226 0.2        ] / 0.7231635
            neighbor_weight = [0.36666667 0.32173913 0.3115942
            2. Calculate the estimated position:
            estimated_position = sum([0.36666667 0.32173913 0.3115942] * [[-960.    0.]
            [-960.    0.]
            [-720. -150.]])
            estimated_position = [-960. * 0.36666667 -960. * 0.32173913 -720. * 0.3115942 -150. * 0.3115942]
            estimated_position = [-348.33333333 -321.79999999 -223.44200000 -46.66666667]
            estimated_position = [-348, -322]

            The estimated location is [-348, -322].
242 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.2236068  0.20851441]) = 0.80998578
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 0.80998578 = 0.46784845
            weight_2 = 0.2236068 / 0.80998578 = 0.27684211
            weight_3 = 0.20851441 / 0.80998578 = 0.25530944
            3. Calculate the estimated position:
            estimated_position = [0.46784845 * (-960.  360.) + 0.27684211 * (-960.  360.) + 0.25530944 * (-960.  600.)]
            estimated_position = [-774.3624 -345.6808 -243.6466]
            4. The estimated position is a vector, to get the final answer, we need to round the values to the nearest integer:
            estimated_position = [-774, -346, -244]
            The estimated location is: [774, -346]
243 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.22941573 0.18569534 0.1767767 ]) = 0.59188777
            2. Calculate the weight of each neighbor:
            weight_1 = 0.22941573 / 0.59188777 = 0.38645649
            weight_2 = 0.18569534 / 0.59188777 = 0.31349209
            weight_3 = 0.1767767 / 0.59188777 = 0.29984542
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.38645649 * [-960.  360.] + 0.31349209 * [-720. -150.] + 0.29984542 * [-840. -300.]]
            estimated_position = [-368.4444444444444,  -103.65656565656566]
            The estimated location is: [-368, -104]
244 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.20412415 0.20412415]) = 0.9082483
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 0.9082483 = 0.55172414
            weight_2 = 0.20412415 / 0.9082483 = 0.22471387
            weight_3 = 0.20412415 / 0.9082483 = 0.22471387
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.55172414 * [-960.  360.] + 0.22471387 * [-720. -150.] + 0.22471387 * [-720. -450.]]
            estimated_position = [-538.12214 + -165.54284 + -165.54284]
            estimated_position = [-869.16582]
            estimated_x = -960 + 869.16582 = 90.83418
            estimated_y = 360 + 165.54284 + 165.54284 = 691.17768
            The estimated location is: [90.83418, 691.17768]
245 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2 0.19245009 0.18569534]) = 0.57714543
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2 / 0.57714543 = 0.34540541
            weight_2 = 0.19245009 / 0.57714543 = 0.33333333
            weight_3 = 0.18569534 / 0.57714543 = 0.31730469
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.34540541 * [-960.  360.]) + (0.33333333 * [-840.  795.]) + (0.31730469 * [-960.    0.])
            estimated_position = [-313.641664 272.844444]
            4. The estimated location is: [-313.641664, 272.844444]
246 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.25819889 0.24253563 0.22941573]) = 0.72985025
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.25819889 0.24253563 0.22941573] / sum_similarity = [0.34899667 0.33333333 0.31767866]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.34899667 0.33333333 0.31767866] * [[-600.  240.]
            [-720.  240.]
            [-720.  240.]]) = [-648.666666667, 240.]
            4. The estimated location is: [-648.666666667, 240.]
247 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.25819889 0.23570226 0.22941573]) = 0.72331688
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25819889 / 0.72331688 = 0.35479488
            weight_2 = 0.23570226 / 0.72331688 = 0.32548102
            weight_3 = 0.22941573 / 0.72331688 = 0.31970409
            3. Calculate the estimated position:
            estimated_position = sum([0.35479488 * [-600.  595.]
                                     0.32548102 * [-600.  595.]
                                     0.31970409 * [-600.  595.]])
            estimated_position = [-1814.6476 595.3468]
            4. The estimated location is: [1814, 595]
248 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.20412415 0.15249857]) = 0.73458669
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 0.73458669 = 0.51214286
            weight_2 = 0.20412415 / 0.73458669 = 0.27462681
            weight_3 = 0.15249857 / 0.73458669 = 0.20832823
            3. Calculate the estimated position:
            estimated_position = sum([0.51214286 * [-960.  480.]
                                     0.27462681 * [-960.  480.]
                                     0.20832823 * [-960.  480.]])
            estimated_position = [-1456. 480.]
            The estimated location is: [-1456, 480]
249 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.22941573 0.18898224 0.18898224]) = 0.50737819
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.22941573 0.18898224 0.18898224] / sum_similarity = [0.45434646 0.37167111 0.37167111]
            3. Calculate the estimated position:
            estimated_position = sum([0.45434646 0.37167111 0.37167111] * [[-960.  480.]
            [-720.  595.]
            [-720.  595.]]) = [-1036.6424 403.5888]
            4. The estimated location is: [-1036.6424, 403.5888]
250 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.18569534 0.14142136]) = 0.73536499
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 0.73536499 = 0.55479449
            weight_2 = 0.18569534 / 0.73536499 = 0.25359821
            weight_3 = 0.14142136 / 0.73536499 = 0.19150531
            3. Calculate the estimated position:
            estimated_position = sum([0.55479449 * [-960.  480.]
                                     0.25359821 * [-960.  480.]
                                     0.19150531 * [-960.  480.]])
            estimated_position = [-1471.96 480.543]
            The estimated location is: [-1471.96, 480.543]
251 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.57735027 0.57735027]) = 1.72105081
            2. Next, calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.72105081 = 0.33333333
            weight_2 = 0.57735027 / 1.72105081 = 0.33333333
            weight_3 = 0.57735027 / 1.72105081 = 0.33333333
            3. Finally, calculate the estimated position:
            estimated_position = sum([0.33333333 * [-960.  600.]
                                     0.33333333 * [-960.  600.]
                                     0.33333333 * [-960.  600.]])
            estimated_position = [-960. * 3 + 600. * 3] = [-2880. 1800.]
            The estimated location is: [-2880., 1800.]
252 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.28867513 0.25819889]) = 0.84838536
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.84838536 = 0.35479488
            weight_2 = 0.28867513 / 0.84838536 = 0.33820508
            weight_3 = 0.25819889 / 0.84838536 = 0.30699504
            3. Calculate the estimated position:
            estimated_position = sum([0.35479488 * [-960.  600.]
                                     0.33820508 * [-960.  600.]
                                     0.30699504 * [-960.  600.]])
            estimated_position = [-960. * 0.35479488 - 960. * 0.33820508 - 960. * 0.30699504 + 600. * 0.35479488 + 600. * 0.33820508 + 600. * 0.30699504]
            estimated_position = [-960. * 0.35479488 - 960. * 0.33820508 - 960. * 0.30699504 + 600. * 0.35479488 + 600. * 0.33820508 + 600. * 0.30699
253 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25 0.25 0.24253563]) = 0.74253563
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25 / 0.74253563 = 0.3378378378378378
            weight_2 = 0.25 / 0.74253563 = 0.3378378378378378
            weight_3 = 0.24253563 / 0.74253563 = 0.3243243243243243
            3. Calculate the estimated position:
            estimated_position = sum([0.3378378378378378 * [-960.  600.]
                                     0.3378378378378378 * [-960.  600.]
                                     0.3243243243243243 * [-960.  600.]])
            estimated_position = [-960. * 0.3378378378378378 * 2 + 600. * 0.3378378378378378 * 2 + -960. * 0.3243243243243243 * 2]
            estimated_position = [-960. * 0.6756756756756757 + 1200. * 0.6756756756756757 - 960. * 0.3243243243243243]
            estimated_position = [-600. + 800. - 313
254 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.23570226 0.18898224]) = 0.72619584
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.72619584 = 0.41666667
            weight_2 = 0.23570226 / 0.72619584 = 0.32333333
            weight_3 = 0.18898224 / 0.72619584 = 0.25999999
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.41666667 * [-120.  395.] + 0.32333333 * [-840.  595.] + 0.25999999 * [-120.  395.] ]
            estimated_position = [-49.6, 154.4]
            The estimated location is: [-49.6, 154.4]
255 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.23570226 0.21821789]) = 0.83288462
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 0.83288462 = 0.45384615
            weight_2 = 0.23570226 / 0.83288462 = 0.28361708
            weight_3 = 0.21821789 / 0.83288462 = 0.25853577
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.45384615 * -960. + 0.28361708 * -960. + 0.25853577 * -960.]
            estimated_position = [-816. -816. -816.]
            4. The estimated location is: [-816, -816]
256 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.23570226 0.18257419 0.1796053 ]) = 0.59788175
            2. Calculate the weight of each neighbor:
            weight_1 = 0.23570226 / 0.59788175 = 0.39344444
            weight_2 = 0.18257419 / 0.59788175 = 0.30555556
            weight_3 = 0.1796053 / 0.59788175 = 0.29999994
            3. Calculate the estimated position:
            estimated_position = sum([0.39344444 * [-960.  720.]
                                     0.30555556 * [-960.  720.]
                                     0.29999994 * [-960.  720.]])
            estimated_position = [-2881.6666  2262.6666]
            4. The estimated location is: [-2881.6666, 2262.6666]
257 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.31622777 0.25 0.19245009]) = 0.75917786
            2. Calculate the weight of each neighbor:
            weight_1 = 0.31622777 / 0.75917786 = 0.417647056
            weight_2 = 0.25 / 0.75917786 = 0.324319342
            weight_3 = 0.19245009 / 0.75917786 = 0.258013592
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.417647056 * [-960.  720.] + 0.324319342 * [-960.  720.] + 0.258013592 * [-960.  720.]]
            estimated_position = [-738.4444444444444, 706.8888888888889]
            4. The estimated location is: [-738, 707]
258 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2236068  0.21320072 0.18569534]) = 0.62240286
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2236068 / 0.62240286 = 0.35714286
            weight_2 = 0.21320072 / 0.62240286 = 0.33985714
            weight_3 = 0.18569534 / 0.62240286 = 0.29393979
            3. Calculate the estimated position:
            estimated_position = sum([0.35714286 * [-960.  720.]
                                     0.33985714 * [-960.  720.]
                                     0.29393979 * [-960.  720.]])
            estimated_position = [-960. * 0.35714286 - 960. * 0.33985714 - 960. * 0.29393979 + 720. * 0.35714286 + 720. * 0.33985714 + 720. * 0.29393979]
            estimated_position = [-336.6427 - 322.6427 - 279.6427 + 254.6427 + 231.6427 + 207.6427]
            estimated_position = [-336.6427 - 322.6427 - 279.6427 + 486.9254 +
259 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.2773501  0.25      ]) = 1.099999972220508
            2. Next, calculate the weight of each neighbor:
            weight_1 = 0.57735027 / sum_similarity = 0.5344444444444445
            weight_2 = 0.2773501 / sum_similarity = 0.2544444444444445
            weight_3 = 0.25 / sum_similarity = 0.2111111111111111
            3. Then, calculate the estimated position:
            estimated_position = sum([0.5344444444444445 0.2544444444444445 0.2111111111111111] * [[-960.  720.]
            [-960.  720.]
            [-960.  720.]])
            estimated_position = [-1456. 432.]
            4. Finally, the estimated location is: [-1456, 432]
260 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.31622777 0.24253563 0.20851441]) = 0.76727781
            2. Calculate the weight of each neighbor:
            weight_1 = 0.31622777 / 0.76727781 = 0.40982456
            weight_2 = 0.24253563 / 0.76727781 = 0.31372549
            weight_3 = 0.20851441 / 0.76727781 = 0.26645995
            3. Calculate the estimated position:
            estimated_position = sum([0.40982456 * [-960.  720.]
                                     0.31372549 * [-960.  720.]
                                     0.26645995 * [-960.  720.]])
            estimated_position = [-2726.6248 1901.3744]
            4. The estimated location is: [%d, %d]
            ANSWER: [-2726.6248, 1901.3744]
261 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.25819889 0.12909944]) = 0.71963166
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.71963166 = 0.46406646
            weight_2 = 0.25819889 / 0.71963166 = 0.35714286
            weight_3 = 0.12909944 / 0.71963166 = 0.17874068
            3. Calculate the estimated position:
            estimated_position = sum([0.46406646 * [-840. -450.]
                                     0.35714286 * [-840. -450.]
                                     0.17874068 * [-840. -300.]])
            estimated_position = [-688. -384.]
            The estimated location is: [-688, -384]
262 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.23570226 0.14744196 0.14285714]) = 0.5259999999999999
            2. Calculate the weight of each neighbor:
            weight_1 = 0.23570226 / 0.5259999999999999 = 0.4471428571428571
            weight_2 = 0.14744196 / 0.5259999999999999 = 0.2797056274863915
            weight_3 = 0.14285714 / 0.5259999999999999 = 0.2731428571428571
            3. Calculate the estimated position:
            estimated_position = sum([0.4471428571428571 * [-840. -450.]
                                     0.2797056274863915 * [-840. -450.]
                                     0.2731428571428571 * [-840. -300.]])
            estimated_position = [-1048.428571428571, -450.428571428571]
            4. The estimated location is: [-1048, -450]
263 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.15249857 0.14586499]) = 0.5998749
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.5998749 = 0.5024444
            weight_2 = 0.15249857 / 0.5998749 = 0.2545556
            weight_3 = 0.14586499 / 0.5998749 = 0.2429790
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.5024444 * [-840. -450.]) + (0.2545556 * [-840. -300.]) + (0.2429790 * [-840. -450.])
            estimated_position = [-840. -450.] * (0.5024444 + 0.2545556 + 0.2429790) + (-840. -300.) * (0.5024444 * 0 + 0.2545556 * 0 + 0.2429790 * 0) + (-840. -450.) * (0.5024444 * 0 + 0.2545556 * 0 + 0.2429790 * 0)
            estimated_position = [-840. -450.] * 1 + (-840. -300.) * 0 + (-840. -450.) * 0
            estimated_position = [-840. -450.]
            The estimated location is: [-840
264 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.57735027 0.13483997]) = 1.28944034
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.28944034 = 0.44444444
            weight_2 = 0.57735027 / 1.28944034 = 0.44444444
            weight_3 = 0.13483997 / 1.28944034 = 0.10328467
            3. Calculate the estimated position:
            estimated_position = sum([0.44444444 * [-840. -450.] 0.44444444 * [-840. -450.] 0.10328467 * [-720. -300.]])
            estimated_position = [-704. -378.]
            The estimated location is: [-704, -378]
265 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.35355339 0.33333333 0.15617376]) = 0.84295948
            2. Calculate the weight of each neighbor:
            weight_1 = 0.35355339 / 0.84295948 = 0.41868852
            weight_2 = 0.33333333 / 0.84295948 = 0.39691358
            weight_3 = 0.15617376 / 0.84295948 = 0.18435469
            3. Calculate the estimated position:
            estimated_position = sum([0.41868852 * [-840. -450.]
                                     0.39691358 * [-840. -450.]
                                     0.18435469 * [-600. -450.]])
            estimated_position = [-544. -306.]
            The estimated location is: [-544, -306]
266 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.12700013 0.12403473 0.11952286]) = 0.36855772
            2. Calculate the weight of each neighbor:
            weight_1 = 0.12700013 / 0.36855772 = 0.34444444
            weight_2 = 0.12403473 / 0.36855772 = 0.33666667
            weight_3 = 0.11952286 / 0.36855772 = 0.32444444
            3. Calculate the estimated position:
            estimated_position = sum([0.34444444 * [-1080.     0.]
                                     0.33666667 * [-1770.  -240.]
                                     0.32444444 * [-1200.     0.]])
            estimated_position = [-418.66666666666666, -79.33333333333333]
            4. The estimated location is: [418, -79]
267 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.11624764 0.10425721 0.10206207]) = 0.32256692
            2. Calculate the weight of each neighbor:
            weight_1 = 0.11624764 / 0.32256692 = 0.36014494
            weight_2 = 0.10425721 / 0.32256692 = 0.32306606
            weight_3 = 0.10206207 / 0.32256692 = 0.31678698
            3. Calculate the estimated position:
            estimated_position = sum([0.36014494 * [-720. -150.]
                                     0.32306606 * [-720. -300.]
                                     0.31678698 * [-720. -150.]])
            estimated_position = [-720. * (0.36014494 + 0.32306606 + 0.31678698) - 150. * (0.36014494 + 0.31678698) - 300. * 0.32306606]
            estimated_position = [-720. * 1 - 150. * 0.67693192 - 300. * 0.32306606]
            estimated_position = [-720. -96.49485 - 96.918996]
            estimated_position = [-720. -293.41385]
            The estimated location is: [-720, -293]
268 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.11396058 0.1132277  0.10910895]) = 0.33629731
            2. Calculate the weight of each neighbor:
            weight_1 = 0.11396058 / 0.33629731 = 0.33848484
            weight_2 = 0.1132277 / 0.33629731 = 0.33818889
            weight_3 = 0.10910895 / 0.33629731 = 0.32232637
            3. Calculate the estimated position:
            estimated_position = sum([0.33848484 * [-840. -300.]
                                     0.33818889 * [-840. -300.]
                                     0.32232637 * [-720. -300.]])
            estimated_position = [-840. -300.] * (0.33848484 + 0.33818889 + 0.32232637) + [-840. -300.] * 0.33848484 + [-720. -300.] * 0.32232637
            estimated_position = [-840. -300.] * 1 + [-840. -300.] * 0.33848484 + [-720. -300.] * 0.32232637
            estimated_position = [-840. -300.] + [-292.99999999999997 -108.99999999999998] + [-235.
269 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.37796447 0.37796447 0.28867513]) = 1.0445999999999999
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 1.0445999999999999 = 0.36184209
            weight_2 = 0.37796447 / 1.0445999999999999 = 0.36184209
            weight_3 = 0.28867513 / 1.0445999999999999 = 0.27627464
            3. Calculate the estimated position:
            estimated_position = sum([0.36184209 * [-840. -300.]
                                     0.36184209 * [-840. -300.]
                                     0.27627464 * [-840. -300.]])
            estimated_position = [-1056. -434.]

            The estimated location is: [-1056, -434]
270 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.1767767  0.15430335 0.10206207]) = 0.43314212
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.1767767 / 0.43314212, 0.15430335 / 0.43314212, 0.10206207 / 0.43314212] = [0.40684931, 0.35714286, 0.23599783]
            3. Calculate the estimated position:
            estimated_position = sum([0.40684931, 0.35714286, 0.23599783] * [[-840. -300.] [-840. -300.] [-840. -300.]]) = [-840. -300.]
            4. The estimated location is: [-840, -300]
271 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.20851441 0.18898224]) = 0.72482998
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.72482998 = 0.46153846
            weight_2 = 0.20851441 / 0.72482998 = 0.28578629
            weight_3 = 0.18898224 / 0.72482998 = 0.25267525
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.46153846 * (-840.) + 0.28578629 * (-360.) + 0.25267525 * (-840.)]
            estimated_position = [-400. -240.]
            The estimated location is: [-400., -240.]
272 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.13018891 0.12126781 0.12126781]) = 0.37266253
            2. Calculate the weight of each neighbor:
            weight_1 = 0.13018891 / 0.37266253 = 0.34883721
            weight_2 = 0.12126781 / 0.37266253 = 0.32480746
            weight_3 = 0.12126781 / 0.37266253 = 0.32480746
            3. Calculate the estimated position:
            estimated_position = sum([0.34883721 * [-840. -300.]
                                     0.32480746 * [-840. -300.]
                                     0.32480746 * [-840. -450.]])
            estimated_position = [-1016. -400.]

            The estimated location is: [-1016, -400]
273 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.57735027 0.5 ]) = 2.07735027
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 2.07735027 = 0.48187773
            weight_2 = 0.57735027 / 2.07735027 = 0.27735027
            weight_3 = 0.5 / 2.07735027 = 0.23584953
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.48187773 * [-840. -150.]) + (0.27735027 * [-840. -150.]) + (0.23584953 * [-840. -150.])
            estimated_position = [-840. -150.]

            The estimated location is: [-840, -150]
274 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.57735027 0.5       ]) = 1.78245705
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.78245705 = 0.39589284
            weight_2 = 0.57735027 / 1.78245705 = 0.32266667
            weight_3 = 0.5 / 1.78245705 = 0.28144049
            3. Calculate the estimated position:
            estimated_position = sum([0.39589284 * [-840. -150.]
                                     0.32266667 * [-840. -150.]
                                     0.28144049 * [-840. -150.]])
            estimated_position = [-840. -150.] * (0.39589284 + 0.32266667 + 0.28144049)
            estimated_position = [-840. -150.] * 1
            estimated_position = [-840. -150.]

            The estimated location is: [-840, -150]
275 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.57735027 0.57735027]) = 1.85975732
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.85975732 = 0.37837837
            weight_2 = 0.57735027 / 1.85975732 = 0.30943396
            weight_3 = 0.57735027 / 1.85975732 = 0.30943396
            3. Calculate the estimated position:
            estimated_position = sum([0.37837837 * [-840. -150.]
                                     0.30943396 * [-840. -150.]
                                     0.30943396 * [-840. -150.]])
            estimated_position = [-1006. -226.]

            The estimated location is: [-1006, -226]
276 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.57735027 0.5 ]) = 2.07735027
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 2.07735027 = 0.48187773
            weight_2 = 0.57735027 / 2.07735027 = 0.27735027
            weight_3 = 0.5 / 2.07735027 = 0.23584953
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.48187773 * [-840. -150.]) + (0.27735027 * [-840. -150.]) + (0.23584953 * [-840. -150.])
            estimated_position = [-840. -150.]

            The estimated location is: [-840, -150]
277 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.5 0.37796447]) = 1.58507125
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.58507125 = 0.44444444
            weight_2 = 0.5 / 1.58507125 = 0.31481481
            weight_3 = 0.37796447 / 1.58507125 = 0.23622049
            3. Calculate the estimated position:
            estimated_position = sum([0.44444444 * [-840. -150.]
                                     0.31481481 * [-840. -150.]
                                     0.23622049 * [-840. -150.]])
            estimated_position = [-840. -150.] * (0.44444444 + 0.31481481 + 0.23622049)
            estimated_position = [-840. -150.] * 0.99547974
            estimated_position = [-833.4666666666667 -149.29999999999998]
            The estimated location is: [-833, -149]
278 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.28867513 0.23570226]) = 0.93262578
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 0.93262578 = 0.43689658
            weight_2 = 0.28867513 / 0.93262578 = 0.30983623
            weight_3 = 0.23570226 / 0.93262578 = 0.25346719
            3. Calculate the estimated position:
            estimated_position = [0.43689658 * -840. + 0.30983623 * -720. - 0.25346719 * -840.]
            estimated_position = [-363. -227.]
            The estimated location is: [-363, -227]
279 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.15617376 0.14586499 0.14142136]) = 0.44346015
            2. Calculate the weight of each neighbor:
            weight_1 = 0.15617376 / 0.44346015 = 0.35185102
            weight_2 = 0.14586499 / 0.44346015 = 0.32874857
            weight_3 = 0.14142136 / 0.44346015 = 0.31979996
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.35185102 * [-840.    0.] + 0.32874857 * [-600.    0.] + 0.31979996 * [-720. -150.]]
            estimated_position = [-298.43566 -47.964596]
            The estimated location is: [-298.43566, -47.964596]
280 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2 0.18898224 0.18569534]) = 0.56467758
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2 / 0.56467758 = 0.35355339
            weight_2 = 0.18898224 / 0.56467758 = 0.33333333
            weight_3 = 0.18569534 / 0.56467758 = 0.32258061
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.35355339 * [-390. -120.]) + (0.33333333 * [-840.    0.]) + (0.32258061 * [-390. -120.])
            estimated_position = [-308.99999999999997 -106.66666666666667]
            4. The estimated location is: [-309, -107]
281 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.26726124 0.25       0.09950372]) = 0.62376501
            2. Calculate the weight of each neighbor:
            weight_1 = 0.26726124 / 0.62376501 = 0.42860109
            weight_2 = 0.25 / 0.62376501 = 0.40384689
            weight_3 = 0.09950372 / 0.62376501 = 0.16755102
            3. Calculate the estimated position:
            estimated_position = sum([0.42860109 * [-840.    0.]
                                     0.40384689 * [-840.    0.]
                                     0.16755102 * [-600.    0.]])
            estimated_position = [-513.64264 0.]
            4. The estimated location is: [-513.64264, 0]
282 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.18898224 0.18257419 0.1796053 ]) = 0.55116173
            2. Calculate the weight of each neighbor:
            weight_1 = 0.18898224 / 0.55116173 = 0.34184844
            weight_2 = 0.18257419 / 0.55116173 = 0.33149056
            weight_3 = 0.1796053 / 0.55116173 = 0.32866099
            3. Calculate the estimated position:
            estimated_position = sum([0.34184844 * [-360.  795.]
                                     0.33149056 * [-480.    0.]
                                     0.32866099 * [-840.    0.]])
            estimated_position = [-360. * 0.34184844 - 480. * 0.33149056 - 840. * 0.32866099, 795. * 0.34184844 + 0. * 0.33149056 + 0. * 0.32866099]
            estimated_position = [-124.44, 280.12]
            The estimated location is: [124, 280]
283 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([1. 0.70710678 0.4472136]) = 1.15432038
            neighbor_weight = [1. / 1.15432038 0.70710678 / 1.15432038 0.4472136 / 1.15432038] = [0.87358974 0.60869565 0.38641461]
            2. Calculate the estimated position:
            estimated_position = [0.87358974 * [-840.  120.] + 0.60869565 * [-600.  240.] + 0.38641461 * [-840.  595.]] = [-734.44444444 203.64444444]
            3. The estimated location is: [-734, 204]
284 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([1. 0.70710678 0.4472136]) = 1.15432038
            neighbor_weight = [1. / 1.15432038 0.70710678 / 1.15432038 0.4472136 / 1.15432038] = [0.87358974 0.60869565 0.38641026]
            2. Calculate the estimated position:
            estimated_position = [0.87358974 * (-840.  120.) + 0.60869565 * (-840.  120.) + 0.38641026 * (-840.  120.)] = [-708.43444444 103.76444444]
            The estimated location is: [-708, 104]
285 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.40824829 0.37796447]) = 0.87621276
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 0.87621276 = 0.56862746
            weight_2 = 0.40824829 / 0.87621276 = 0.46862746
            weight_3 = 0.37796447 / 0.87621276 = 0.43270898
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = [(0.56862746 * -840) + (0.46862746 * -840) + (0.43270898 * -720)] = [-840.432612, 120.432612]
            4. The estimated location is: [-840.432612, 120.432612]
286 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.5 0.4472136 0.4472136]) = 1.3944266
            neighbor_weight = [0.5 / 1.3944266 0.4472136 / 1.3944266 0.4472136 / 1.3944266] = [0.3618358 0.3188889 0.3188889]
            2. Calculate the estimated position:
            estimated_position = sum([0.3618358 * [-840.  120.] 0.3188889 * [-720.  120.] 0.3188889 * [-720.  120.]]) = [-708.644 -103.768]
            The estimated location is: [-708.644, -103.768]
287 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.40824829 0.35355339]) = 1.34015195
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.57735027 0.40824829 0.35355339] / sum_similarity = [0.43183646 0.29999811 0.23816543]
            3. Calculate the estimated position:
            estimated_position = sum([0.43183646 0.29999811 0.23816543] * [[-600.  240.]
            [-840.  595.]
            [-720.  595.]]) = [-600. * 0.43183646 + -840. * 0.29999811 + -720. * 0.23816543, 240. * 0.43183646 + 595. * 0.29999811 + 595. * 0.23816543]
            estimated_position = [-348.4444444444444, 228.4444444444444]
            The estimated location is: [-348, 228]
288 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.40824829 0.37796447]) = 1.19446095
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 1.19446095 = 0.34444444
            weight_2 = 0.40824829 / 1.19446095 = 0.34444444
            weight_3 = 0.37796447 / 1.19446095 = 0.31111111
            3. Calculate the estimated position:
            estimated_position = sum([0.34444444 * [-840.  240.]
                                     0.34444444 * [-840.  240.]
                                     0.31111111 * [-840.  240.]])
            estimated_position = [-2520.  720.]
            4. The estimated location is: [%d, %d]
            ANSWER: [-2520, 720]
289 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.33333333 0.31622777]) = 1.02752557
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 1.02752557 = 0.36744444
            weight_2 = 0.33333333 / 1.02752557 = 0.32444444
            weight_3 = 0.31622777 / 1.02752557 = 0.30809721
            3. Calculate the estimated position:
            estimated_position = sum([0.36744444 * [-840.  240.]
                                     0.32444444 * [-840.  120.]
                                     0.30809721 * [-840.  120.]])
            estimated_position = [-840. * 0.36744444 + 240. * 0.32444444 + 120. * 0.30809721,
                                   -840. * 0.36744444 + 120. * 0.32444444 + 120. * 0.30809721]
            estimated_position = [-300.4444, 130.4444]
            The estimated location is: [300, 130]
290 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.16439899 0.15617376 0.15430335]) = 0.47487610
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.16439899 0.15617376 0.15430335] / sum_similarity = [0.34484444 0.32484444 0.33031111]
            3. Calculate the estimated position:
            estimated_position = sum([0.34484444 0.32484444 0.33031111] * [[-480.  595.]
            [-840.  240.]
            [-840.  240.]]) = [-480. * 0.34484444 + -840. * 0.32484444 + -840. * 0.33031111, 595. * 0.34484444 + 240. * 0.32484444 + 240. * 0.33031111]
            estimated_position = [-480. * 0.34484444 - 840. * 0.32484444 - 840. * 0.33031111 + 595. * 0.34484444 + 240. * 0.32484444 + 240. * 0.33031111, 595. * 0.34484444 + 240. * 0.32484444 + 240. * 0
291 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([1.00000000e+04 7.07106781e-01 5.00000000e-01]) = 1.0000000000000006e+04
            neighbor_weight = [1.00000000e+04 7.07106781e-01 5.00000000e-01] / sum_similarity = [1. 7.07106781e-05 5.00000000e-06]
            2. Calculate the estimated position:
            estimated_position = sum([1. 7.07106781e-05 5.00000000e-06] * [[-840.  240.] [-840.  240.] [-840.  240.]])
            estimated_position = [-840. + 7.07106781e-05 * -840. + 5.00000000e-06 * -840.] = [-840. -0.000000564 -0.00000028]
            3. Convert the estimated position to the form of "[%d, %d]":
            estimated_position = [-840., 0.]
            The estimated location is: [-840., 0.]
292 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.4472136 0.4472136 ]) = 1.46878454
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.46878454 = 0.39444444
            weight_2 = 0.4472136 / 1.46878454 = 0.30555556
            weight_3 = 0.4472136 / 1.46878454 = 0.30555556
            3. Perform the weighted averaging calculation:
            estimated_position = [(0.39444444 * -840) + (0.30555556 * -720) + (0.30555556 * -840), (0.39444444 * 240) + (0.30555556 * 120) + (0.30555556 * 240)]
            estimated_position = [-688.6666666666667, 203.33333333333334]
            4. The estimated location is: [-689, 203]
293 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.31622777 0.26726124 0.22941573]) = 0.80290474
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.31622777 0.26726124 0.22941573] / sum_similarity = [0.31622777 0.26726124 0.22941573] / 0.80290474 = [0.39458387 0.33333333 0.26726124]
            3. Calculate the estimated position:
            estimated_position = sum([0.39458387 0.33333333 0.26726124] * [[-840.  120.] [-840.  120.] [-480.  595.]]) = [0.39458387 * (-840.) + 0.33333333 * (-840.) + 0.26726124 * (-480.) + 0.39458387 * 120. + 0.33333333 * 120. + 0.26726124 * 595.] = [-708.6444 -708.6444 -224.0966 132.8899 132.8899 163.4583]
            4. The estimated location is: [round(-708.6444), round(132.8899)] = [-709, 133]

            The estimated location is [-709, 133].
294 done_____________________________
1. First, calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.70710678 0.57735027]) = 1.98156383
            neighbor_weight = [0.70710678 / 1.98156383, 0.70710678 / 1.98156383, 0.57735027 / 1.98156383] = [0.35714686, 0.35714686, 0.28571429]
            2. Then, calculate the estimated position:
            estimated_position = sum([0.35714686, 0.35714686, 0.28571429] * [[-840.  395.] [-840.  395.] [-840.  395.]]) = [-2574.9999999999997, 1182.4999999999998]
            3. Finally, the estimated location is: [-2574, 1182]
295 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.57735027 0.35355339]) = 1.50825393
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.50825393 = 0.38364565
            weight_2 = 0.57735027 / 1.50825393 = 0.38364565
            weight_3 = 0.35355339 / 1.50825393 = 0.23279842
            3. Calculate the estimated position:
            estimated_position = sum([0.38364565 * [-840.  395.]
                                     0.38364565 * [-840.  395.]
                                     0.23279842 * [-840.  395.]])
            estimated_position = [-2626.7725  1182.686]
            4. The estimated location is: [-2626.7725, 1182.686]
296 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 7.07106781e-01 5.77350269e-01]) = 1.0000000000000006e+04
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1.00000000e+04 7.07106781e-01 5.77350269e-01] / sum_similarity = [1. 7.07106781e-05 5.77350269e-05]
            3. Calculate the estimated position:
            estimated_position = sum([1. 7.07106781e-05 5.77350269e-05] * [[-840.  395.] [-840.  395.] [-840.  395.]]) = [-840. 395.]
            4. The estimated location is: [-840, 395]
297 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 1. 0.4472136]) = 2.4472136
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 2.4472136 = 0.408248290463863
            weight_2 = 1 / 2.4472136 = 0.408248290463863
            weight_3 = 0.4472136 / 2.4472136 = 0.184872109375
            3. Calculate the estimated position:
            estimated_position = (0.408248290463863 * [-840.  395.]) + (0.408248290463863 * [-840.  395.]) + (0.184872109375 * [-840.  395.])
            estimated_position = [-1696.766  792.682]
            4. The estimated location is: [-1696.766, 792.682]
298 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1. 0.70710678 0.70710678]) = 2.41421356
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1. / 2.41421356 0.70710678 / 2.41421356 0.70710678 / 2.41421356] = [0.41421356 0.29289322 0.29289322]
            3. Calculate the estimated position:
            estimated_position = sum([0.41421356 0.29289322 0.29289322] * [[-840.  395.] [-840.  395.] [-840.  395.]]) = [-840. 395.]
            4. The estimated location is: [-840, 395]
299 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.4472136 0.37796447 0.33333333]) = 1.1585074
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 1.1585074 = 0.38888888
            weight_2 = 0.37796447 / 1.1585074 = 0.32666667
            weight_3 = 0.33333333 / 1.1585074 = 0.28444444
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.38888888 * [-120.  240.] + 0.32666667 * [-840.  395.] + 0.28444444 * [-840.  395.]]
            estimated_position = [-45.6 203.4]
            The estimated location is: [45.6, 203.4]
300 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.70710678 0.70710678]) = 2.12132176
            2. Then, calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 / 2.12132176, 0.70710678 / 2.12132176, 0.70710678 / 2.12132176] = [0.33333333, 0.33333333, 0.33333333]
            3. Finally, calculate the estimated position:
            estimated_position = sum([0.33333333, 0.33333333, 0.33333333] * [[-840.  395.] [-840.  395.] [-840.  395.]]) = [(-840. * 3) + (395. * 3)] = [-2520. 1185.]

            The estimated location is: [-2520., 1185.]
301 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136 0.4472136 0.28867513]) = 1.18290179
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.4472136 / 1.18290179, 0.4472136 / 1.18290179, 0.28867513 / 1.18290179] = [0.38095236, 0.38095236, 0.23809524]
            3. Calculate the estimated position:
            estimated_position = sum([0.38095236, 0.38095236, 0.23809524] * [[-840.  395.] [-840.  395.] [-600.  120.]]) = [-1053.66, 317.66]
            4. The estimated location is: [-1053.66, 317.66]
302 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 7.07106781e-01 7.07106781e-01]) = 1.00000000e+04 + 7.07106781e-01 + 7.07106781e-01 = 1.0000000000000001e+04
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1.00000000e+04 7.07106781e-01 7.07106781e-01] / sum_similarity = [1.00000000e+04 7.07106781e-01 7.07106781e-01] / 1.0000000000000001e+04 = [1. 7.07106781e-05 7.07106781e-05]
            3. Calculate the estimated position:
            estimated_position = sum([1. 7.07106781e-05 7.07106781e-05] * [[-840.  395.] [-840.  395.] [-840.  395.]]) = [-840.  395.] + 7.07106781e-05 * (-840.  395.) + 7.07106781e-05 * (-840.  395.) = [-840.  395.]
            4. The estimated location is: [-840, 395]
303 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.33333333 0.31622777 0.22941573]) = 0.87897683
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.33333333 0.31622777 0.22941573] / sum_similarity = [0.38333333 0.35666667 0.25999999]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.38333333 0.35666667 0.25999999] * [[-120.  395.]
            [-840.  595.]
            [-600.  240.]]) = [-418.44444444 402.66666667]
            4. The estimated location is: [-418, 403]
304 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.4472136 0.4472136 0.40824829]) = 1.30268457
            neighbor_weight = [0.4472136 0.4472136 0.40824829] / 1.30268457 = [0.34285714 0.34285714 0.31428571]
            2. Calculate the estimated position:
            estimated_position = sum([0.34285714 0.34285714 0.31428571] * [[-720.  595.]
            [-840.  120.]
            [-600.  240.]]) = [-720. * 0.34285714 + -840. * 0.34285714 + -600. * 0.31428571, 595. * 0.34285714 + 120. * 0.34285714 + 240. * 0.31428571]
            estimated_position = [-544.4444444444444, 244.4444444444444]

            The estimated location is: [544, -244]
305 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.30151134 0.23570226 0.23570226]) = 0.77291586
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.30151134 0.23570226 0.23570226] / sum_similarity = [0.38571428 0.29428571 0.29428571]
            3. Calculate the estimated position:
            estimated_position = sum([0.38571428 0.29428571 0.29428571] * [[-840.  595.]
            [-120.  395.]
            [-600.  240.]]) = [-638.4285714285714, 303.4285714285714]
            4. The estimated location is: [-638, 303]
306 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.e+04 5.e-01 5.e-01]) = 1.0000000000000002e+04
            2. Normalize the similarities:
            weight = [1.e+04 5.e-01 5.e-01] / sum_similarity = [1. 0. 0.]
            3. Calculate the estimated position:
            estimated_position = sum([1. 0. 0.] * [[-840.  595.]
            [-840.  595.]
            [-840.  120.]]) = [-840. 595.]
            4. The estimated location is: [-840, 595]
307 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.40824829 0.2236068 ]) = 0.10239587
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.40824829 0.40824829 0.2236068 ] / sum_similarity = [0.40000000 0.40000000 0.20000000]
            3. Calculate the estimated position:
            estimated_position = sum([0.40000000 0.40000000 0.20000000] * [[-720.  240.]
 [-720.  240.]
 [-840.  595.]]) = [-720.  240.] + [-720.  240.] + 0.2 * [-840.  595.] = [-1440.  480.]
            4. The estimated location is: [-1440.  480.]
308 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136 0.4472136 0.25     ]) = 1.1496396
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 1.1496396 = 0.3909836
            weight_2 = 0.4472136 / 1.1496396 = 0.3909836
            weight_3 = 0.25 / 1.1496396 = 0.2170288
            3. Calculate the estimated position:
            estimated_position = sum([0.3909836 * [-720.  240.]
                                     0.3909836 * [-720.  240.]
                                     0.2170288 * [-720.  240.]])
            estimated_position = [-720. * 0.3909836 * 2 + 240. * 0.3909836 * 2 + -720. * 0.2170288 * 2]
            estimated_position = [-1037.6648 + 480.7936 - 148.62768]
            estimated_position = [-1037.6648 + 480.7936 - 148.62768]
            estimated_position = [-1037.6648 + 332.16632]
            estimated_position = [-705.4985]
            estimated_position_y = 240. * 0.3909836 * 2 + 240. * 0.3909836 * 2 + 240. * 0.21702
309 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 1.71498585e-01 1.62221421e-01]) = 1.00000000e+04
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1.00000000e+04 1.71498585e-01 1.62221421e-01] / sum_similarity = [1. 0. 0.]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([1. 0. 0.] * [[-840.  795.] [-840.  795.] [-840.  795.]]) = [-840.  795.]
            4. The estimated location is: [-840, 795]
310 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.21320072 0.2        0.1796053 ]) = 0.40380605
            2. Calculate the weight of each neighbor:
            weight_1 = 0.21320072 / 0.40380605 = 0.52688182
            weight_2 = 0.2 / 0.40380605 = 0.49611818
            weight_3 = 0.1796053 / 0.40380605 = 0.44650286
            3. Calculate the estimated position:
            estimated_position = sum([0.52688182 * [-840.  795.]
                                     0.49611818 * [-840.    0.]
                                     0.44650286 * [-480.  120.]])
            estimated_position = [-431.44364364, 298.64615152]
            4. The estimated location is: [431, 299]
311 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2773501  0.22941573 0.20412415]) = 0.70988998
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2773501 / sum_similarity = 0.2773501 / 0.70988998 = 0.39044444
            weight_2 = 0.22941573 / sum_similarity = 0.22941573 / 0.70988998 = 0.32483871
            weight_3 = 0.20412415 / sum_similarity = 0.20412415 / 0.70988998 = 0.28467675
            3. Calculate the estimated position:
            estimated_position = sum([0.39044444 * [-840.   795.]
                                     0.32483871 * [-840.   795.]
                                     0.28467675 * [-1080.   600.]])
            estimated_position = [-304.64444444 248.64444444]
            4. The estimated location is: [304, 249]
312 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.5 0.2236068 0.19611614]) = 1.91972298
            neighbor_weight = [0.5 / 1.91972298, 0.2236068 / 1.91972298, 0.19611614 / 1.91972298] = [0.26139895, 0.11638811, 0.10248394]
            2. Calculate the estimated position:
            estimated_position = [0.26139895 * (-840.  795.) + 0.11638811 * (-960.  360.) + 0.10248394 * (-720.    0.)] = [-588.4444444444444, 54.63881102941176]
            3. The estimated location is: [-588, 55]
313 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2773501  0.25819889 0.18569534]) = 0.72124433
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2773501 / sum_similarity = 0.38574684
            weight_2 = 0.25819889 / sum_similarity = 0.34986476
            weight_3 = 0.18569534 / sum_similarity = 0.26438839
            3. Calculate the estimated position:
            estimated_position = sum([0.38574684 * [-600.  795.]
                                     0.34986476 * [-840.  795.]
                                     0.26438839 * [-840.  795.]])
            estimated_position = [-544.4444444444444, 768.4444444444444]
            4. The estimated location is: [544, 768]
314 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.33333333 0.2773501  0.1767767 ]) = 0.78746009
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.33333333 0.2773501  0.1767767 ] / sum_similarity = [0.42857143 0.34615384 0.22527473]
            3. Calculate the estimated position:
            estimated_position = sum([0.42857143 0.34615384 0.22527473] * [[-720. -450.] [-720. -450.] [-360.  795.]])
            estimated_position = [-508.6426 -273.0713]
            The estimated location is: [-508, -273]
315 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.18898224 0.1767767  0.16903085]) = 0.53478989
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.18898224 0.1767767  0.16903085] / sum_similarity = [0.35344444 0.32777777 0.27877778]
            3. Calculate the estimated position:
            estimated_position = sum([0.35344444 0.32777777 0.27877778] * [[-720. -450.] [-720. -450.] [-360.  795.]]) = [-688. -398.]
            4. The estimated location is: [-688, -398]
316 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.23570226 0.2236068  0.20412415]) = 0.66343247
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.23570226 0.2236068  0.20412415] / sum_similarity = [0.35343848 0.33333333 0.29322819]
            3. Calculate the estimated position:
            estimated_position = sum([0.35343848 0.33333333 0.29322819] * [[-720. -450.] [-720. -150.] [-720. -450.]]) = [-720. -346.5]
            4. The estimated location is: [-720, -346.5]
317 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.26726124 0.19245009]) = 1.95971133
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 1.95971133 = 0.25555555555555557
            weight_2 = 0.26726124 / 1.95971133 = 0.1368421052631579
            weight_3 = 0.19245009 / 1.95971133 = 0.09800789473684207
            3. Calculate the estimated position:
            estimated_position = (weight_1 * [-720. -450.]) + (weight_2 * [-720. -450.]) + (weight_3 * [-840. -150.])
            estimated_position = [(0.25555555555555557 * -720.) + (0.1368421052631579 * -720.) + (0.09800789473684207 * -840.),
                                   (0.25555555555555557 * -450.) + (0.1368421052631579 * -450.) + (0.09800789473684207 * -150.)]
            estimated_position = [-564. -344.]
            The estimated location is: [-564, -344]
318 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.e+04 1.e+00 1.e+00]) = 1.0000000000000002e+04
            2. Normalize the similarities: weight = [1.e+04 1.e+00 1.e+00] / sum_similarity = [0.0000000000000001 0. 0.]
            3. Perform the weighted averaging calculation: estimated_position = sum([0.0000000000000001 0. 0.] * [[-720. -300.] [-720. -300.] [-720. -300.]]) = [-720. -300.]
            4. The estimated location is: [-720, -300]
319 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.30151134 0.25      ]) = 1.26011812
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.56888889 0.23444444 0.19666667]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.56888889 0.23444444 0.19666667] * [[-720. -300.]
            [-840. -300.]
            [-840. -300.]])
            estimated_position = [-704.6666666666667, -300.]
            The estimated location is: [-704.6666666666667, -300]
320 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.4472136  0.30151134 0.16012815]) = 0.90885289
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 0.90885289 = 0.49484844
            weight_2 = 0.30151134 / 0.90885289 = 0.33333333
            weight_3 = 0.16012815 / 0.90885289 = 0.17784873
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.49484844 * [-720. -300.] + 0.33333333 * [-720. -300.] + 0.17784873 * [-840. -450.]]
            estimated_position = [-548. -288.]
            The estimated location is: [-548, -288]
321 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.35355339 0.28867513 0.18257419]) = 0.82479772
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.35355339 0.28867513 0.18257419] / sum_similarity = [0.43333333 0.34444444 0.22222222]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.43333333 0.34444444 0.22222222] * [[-720. -300.] [-720. -300.] [-720. -300.]]) = [-720. -300.]
            4. The estimated location is: [-720, -300]
322 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.57735027 0.5       ]) = 1.78245705
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.78245705 = 0.39589284
            weight_2 = 0.57735027 / 1.78245705 = 0.32266667
            weight_3 = 0.5 / 1.78245705 = 0.28144049
            3. Calculate the estimated position:
            estimated_position = sum([0.39589284 * [-720. -300.]
                                     0.32266667 * [-720. -300.]
                                     0.28144049 * [-720. -300.]])
            estimated_position = [-720. -300.] * (0.39589284 + 0.32266667 + 0.28144049)
            estimated_position = [-720. -300.] * 1
            estimated_position = [-720. -300.]

            The estimated location is: [-720, -300]
323 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.26726124 0.23570226 0.15430335]) = 0.65726685
            2. Calculate the weight of each neighbor:
            weight_1 = 0.26726124 / 0.65726685 = 0.40740698
            weight_2 = 0.23570226 / 0.65726685 = 0.35686274
            weight_3 = 0.15430335 / 0.65726685 = 0.23552828
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.40740698 * [-720. -300.] + 0.35686274 * [-720. -300.] + 0.23552828 * [-840. -450.]]
            estimated_position = [-302.64 -300.18]
            The estimated location is: [-302.64, -300.18]
324 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.16222142 0.15811388 0.13483997]) = 0.45517527
            2. Calculate the weight of each neighbor:
            weight_1 = 0.16222142 / 0.45517527 = 0.35484498
            weight_2 = 0.15811388 / 0.45517527 = 0.34664499
            weight_3 = 0.13483997 / 0.45517527 = 0.29841005
            3. Calculate the estimated position:
            estimated_position = sum([0.35484498 * [-840. -450.]
                                     0.34664499 * [-720. -300.]
                                     0.29841005 * [-600. -450.]])
            estimated_position = [-548. -374.]
            The estimated location is: [-548, -374]
325 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.26726124 0.2236068 ]) = 1.06821831
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / sum_similarity = 0.54764705
            weight_2 = 0.26726124 / sum_similarity = 0.24897897
            weight_3 = 0.2236068 / sum_similarity = 0.20157398
            3. Perform the weighted averaging calculation:
            estimated_x = weight_1 * (-720.) + weight_2 * (-720.) + weight_3 * (-600.) = -720. * (0.54764705 + 0.24897897 + 0.20157398) - 600. * 0.20157398 = -600.
            estimated_y = weight_1 * (-150.) + weight_2 * (-150.) + weight_3 * (0.) = -150. * (0.54764705 + 0.24897897) = -150.
            4. The estimated location is: [-600., -150.]
326 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.33333333 0.21320072]) = 0.95478234
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 0.95478234 = 0.42642556
            weight_2 = 0.33333333 / 0.95478234 = 0.34782609
            weight_3 = 0.21320072 / 0.95478234 = 0.21974755
            3. Calculate the estimated position:
            estimated_position = [0.42642556 * (-720. -150.) + 0.34782609 * (-720. -150.) + 0.21974755 * (-600. 0.)]
            estimated_position = [-488.44444444 -276.44444444 -123.97475517]
            4. The estimated position is the sum of the weighted average of the top-3 neighbors' position: [-488.44444444, -276.44444444]
327 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.4472136  0.35355339 0.20851441]) = 1.0093814
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 1.0093814 = 0.44444444
            weight_2 = 0.35355339 / 1.0093814 = 0.35050505
            weight_3 = 0.20851441 / 1.0093814 = 0.20550505
            3. Calculate the estimated position:
            estimated_position = sum([0.44444444 * [-720. -150.]
                                     0.35050505 * [-720. -150.]
                                     0.20550505 * [-720. -150.]])
            estimated_position = [-548. -105.]

            The estimated location is: [-548, -105]
328 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.37796447 0.31622777 0.2236068 ]) = 0.91780104
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 0.91780104 = 0.4098944
            weight_2 = 0.31622777 / 0.91780104 = 0.3444444
            weight_3 = 0.2236068 / 0.91780104 = 0.2456598
            3. Calculate the estimated position:
            estimated_position = sum([0.4098944 * [-720. -150.]
                                     0.3444444 * [-720. -150.]
                                     0.2456598 * [-720. -450.]])
            estimated_position = [-305.6 -104.4]
            The estimated location is: [-305.6, -104.4]
329 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.22941573 0.2236068  0.21320072]) = 0.66622225
            2. Calculate the weight of each neighbor:
            weight_1 = 0.22941573 / 0.66622225 = 0.34388889
            weight_2 = 0.2236068 / 0.66622225 = 0.33333333
            weight_3 = 0.21320072 / 0.66622225 = 0.31277778
            3. Calculate the estimated position:
            estimated_position = [0.34388889 * (-480.  120.) + 0.33333333 * (-120.    0.) + 0.31277778 * (-840.  120.)]
            estimated_position = [-168.44444444444446, 24.33333333333333]
            4. The estimated location is: [-168, 24]
330 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.22941573 0.21320072]) = 0.8195809173797967
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / sum_similarity = 0.4644444444444444
            weight_2 = 0.22941573 / sum_similarity = 0.2777777777777778
            weight_3 = 0.21320072 / sum_similarity = 0.2577777777777778
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.4644444444444444 * [-720.    0.] + 0.2777777777777778 * [-720.    0.] + 0.2577777777777778 * [-360.  795.]]
            estimated_position = [-436.8, 136.66666666666667]

            The estimated location is: [-436.8, 136.66666666666667]
331 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.23570226 0.20412415]) = 0.8480747
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.40824829 / 0.8480747, 0.23570226 / 0.8480747, 0.20412415 / 0.8480747] = [0.4847368, 0.2788434, 0.2364208]
            3. Calculate the estimated position:
            estimated_position = sum([0.4847368 * [-720.    0.], 0.2788434 * [-720.    0.], 0.2364208 * [-840.  795.]]) = [-513.6824, 145.3684]
            4. The estimated location is: [%d, %d]
            ANSWER: [-513.6824, 145.3684]
332 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.21821789 0.21320072 0.20851441]) = 0.64003292
            2. Calculate the weight of each neighbor:
            weight_1 = 0.21821789 / 0.64003292 = 0.33888888
            weight_2 = 0.21320072 / 0.64003292 = 0.33046296
            weight_3 = 0.20851441 / 0.64003292 = 0.32073476
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.33888888 * [-720.    0.] + 0.33046296 * [-360.  795.] + 0.32073476 * [-720.    0.]]
            estimated_position = [-240.4444444444444, 130.88888888888888]
            The estimated location is: [-240, 131]
333 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.25819889 0.25       0.25      ]) = 0.76619778
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25819889 / 0.76619778 = 0.33333333
            weight_2 = 0.25 / 0.76619778 = 0.32258065
            weight_3 = 0.25 / 0.76619778 = 0.32258065
            3. Calculate the estimated position:
            estimated_position = sum([0.33333333 * [-720.    0.]
                                     0.32258065 * [-360.  795.]
                                     0.32258065 * [-720.    0.]])
            estimated_position = [-239.66666666666667, 124.5]
            4. The estimated location is: [-239, 124]
334 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.70710678 0.57735027]) = 1.98156383
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 / 1.98156383, 0.70710678 / 1.98156383, 0.57735027 / 1.98156383] = [0.35594288, 0.35594288, 0.28701422]
            3. Calculate the estimated position:
            estimated_position = sum([0.35594288, 0.35594288, 0.28701422] * [[-720.  120.] [-720.  120.] [-720.  120.]]) = [-720. 120.]

            The estimated location is: [-720, 120]
335 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.37796447 0.37796447]) = 1.46213565
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.46213565 = 0.48187817
            weight_2 = 0.37796447 / 1.46213565 = 0.25882353
            weight_3 = 0.37796447 / 1.46213565 = 0.25882353
            3. Calculate the estimated position:
            estimated_position = sum([0.48187817 * [-840.  120.]
                                     0.25882353 * [-600.  120.]
                                     0.25882353 * [-840.  120.]])
            estimated_position = [-480.  120.]

            The estimated location is: [-480, 120]
336 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([1. 0.57735027 0.35355339]) = 1.93090366
            neighbor_weight = [1. / 1.93090366 0.57735027 / 1.93090366 0.35355339 / 1.93090366] = [0.51857938 0.29788079 0.18354983]
            2. Calculate the estimated position:
            estimated_position = [0.51857938 * [-720.  120.] + 0.29788079 * [-840.  240.] + 0.18354983 * [-840.  120.] ] = [-588.4444444444444, 100.44444444444446]
            3. The estimated location is: [-588, 100]
337 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.70710678 0.40824829]) = 1.82246195
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 / 1.82246195, 0.70710678 / 1.82246195, 0.40824829 / 1.82246195] = [0.38888889, 0.38888889, 0.22222222]
            3. Calculate the estimated position:
            estimated_position = sum([0.38888889, 0.38888889, 0.22222222] * [[-840.  240.] [-720.  120.] [-840.  240.]]) = [-840.  240.]
            4. The estimated location is: [-840, 240]
338 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.37796447 0.31622777 0.31622777]) = 1.00085501
            2. Next, calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 1.00085501 = 0.37699999
            weight_2 = 0.31622777 / 1.00085501 = 0.31499999
            weight_3 = 0.31622777 / 1.00085501 = 0.31499999
            3. Finally, calculate the estimated position:
            estimated_position = sum([0.37699999 * [-720.  240.]
                                     0.31499999 * [-720.  240.]
                                     0.31499999 * [-720.  240.]])
            estimated_position = [-720. * 0.37699999 + -720. * 0.31499999 + -720. * 0.31499999 + 240. * 0.37699999 + 240. * 0.31499999 + 240. * 0.31499999]
            estimated_position = [-720. * 0.37699999 - 720. * 0.31499999 - 720. * 0.31499999 + 240. * 0.37699999 + 240. * 0.31499999 + 240. * 0.31
339 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.31622777 0.2773501  0.2773501 ]) = 0.86989788
            2. Calculate the weight of each neighbor:
            weight_1 = 0.31622777 / 0.86989788 = 0.36146855
            weight_2 = 0.2773501 / 0.86989788 = 0.31622777
            weight_3 = 0.2773501 / 0.86989788 = 0.31622777
            3. Calculate the estimated position:
            estimated_position = sum([0.36146855 * [-720.  240.]
                                     0.31622777 * [-720.  120.]
                                     0.31622777 * [-720.  395.]])
            estimated_position = [-720. * 0.36146855 - 240. * 0.31622777 - 720. * 0.31622777 - 120. * 0.31622777 + 395. * 0.31622777]
            estimated_position = [-258.4746 - 75.8464 - 230.4746 - 37.8464 + 118.4746]
            estimated_position = [-522.6498, 44.2836]

            The estimated location is: [522, 44]
340 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.21821789 0.20412415 0.18569534]) = 0.60803738
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.21821789 0.20412415 0.18569534] / sum_similarity = [0.36084364 0.33648236 0.29267401]
            3. Calculate the estimated position:
            estimated_position = sum([0.36084364 0.33648236 0.29267401] * [[-720.  240.] [-720.  240.] [-840.  595.]]) = [-718.4444444444444, 240.3333333333333]
            4. The estimated location is: [-718, 240]
341 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136  0.24253563 0.2       ]) = 0.90225023
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 0.90225023 = 0.49638775
            weight_2 = 0.24253563 / 0.90225023 = 0.26896551
            weight_3 = 0.2 / 0.90225023 = 0.22464672
            3. Calculate the estimated position:
            estimated_position = sum([0.49638775 * [-720.  240.]
                                     0.26896551 * [-720.  240.]
                                     0.22464672 * [-720.  240.]])
            estimated_position = [-720. * (0.49638775 + 0.26896551 + 0.22464672) + 240. * (0.49638775 + 0.26896551 + 0.22464672)]
            estimated_position = [-720. * 0.98999994 + 240. * 0.98999994]
            estimated_position = [-687.99996, 239.99996]
            The estimated location is: [-688, 240]
342 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.30151134 0.22941573 0.2236068 ]) = 0.75452487
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.75452487 = 0.4
            weight_2 = 0.22941573 / 0.75452487 = 0.3
            weight_3 = 0.2236068 / 0.75452487 = 0.3
            3. Calculate the estimated position:
            estimated_position = sum([0.4 * [-720.  240.]
                                     0.3 * [-720.  240.]
                                     0.3 * [-720.  240.]])
            estimated_position = [-216.  72.]
            4. The estimated location is: [216, 72]
343 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.2236068  0.18569534]) = 0.81754953
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 0.81754953 = 0.49898989
            weight_2 = 0.2236068 / 0.81754953 = 0.27360675
            weight_3 = 0.18569534 / 0.81754953 = 0.22739346
            3. Calculate the estimated position:
            estimated_position = sum([0.49898989 * [-720.  240.]
                                     0.27360675 * [-720.  240.]
                                     0.22739346 * [-720.  395.]])
            estimated_position = [-518.4999999999999, 134.67999999999998]
            4. The estimated location is: [-518, 135]
344 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.28867513 0.26726124 0.2236068 ]) = 0.77954317
            neighbor_weight = [0.28867513 0.26726124 0.2236068 ] / 0.77954317 = [0.36666667 0.33888889 0.29444444]
            2. Calculate the estimated position:
            estimated_position = sum([0.36666667 0.33888889 0.29444444] * [[-720.  395.]
            [-120.  395.]
            [-360.  240.]]) = [-720. * 0.36666667 + -120. * 0.33888889 + -360. * 0.29444444, 395. * 0.36666667 + 395. * 0.33888889 + 240. * 0.29444444]
            estimated_position = [-266.66666666666667, 403.3333333333333]
            The estimated location is: [-266, 403]
345 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.31622777 0.31622777 0.30151134]) = 0.93396688
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.31622777 0.31622777 0.30151134] / sum_similarity = [0.33333333 0.33333333 0.33333333]
            3. Calculate the estimated position:
            estimated_position = sum([0.33333333 0.33333333 0.33333333] * [[-720.  395.]
            [-360.  240.]
            [-480.  240.]]) = [-540.  240.]
            4. The estimated location is: [-540, 240]
346 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([1. 0.70710678 0.5 ]) = 2.20710678
            neighbor_weight = [1. / 2.20710678 0.70710678 / 2.20710678 0.5 / 2.20710678] = [0.45454545 0.32352941 0.22222222]
            2. Calculate the estimated position:
            estimated_position = sum([0.45454545 * [-720.  395.] 0.32352941 * [-720.  395.] 0.22222222 * [-720.  395.]]) = [-604.36471154 158.36471154]
            3. The estimated location is: [-604, 158]
347 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.4472136  0.31622777]) = 1.46954815
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.46954815 = 0.47860869
            weight_2 = 0.4472136 / 1.46954815 = 0.30552083
            weight_3 = 0.31622777 / 1.46954815 = 0.21587042
            3. Calculate the estimated position:
            estimated_position = sum([0.47860869 * [-720.  395.]
                                     0.30552083 * [-720.  395.]
                                     0.21587042 * [-600.  595.]])
            estimated_position = [-448.64354437, 138.76844444]
            4. The estimated location is: [448, 139]
348 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 4.47213595e-01 4.08248290e-01]) = 1.00000000e+04
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1.00000000e+04 4.47213595e-01 4.08248290e-01] / sum_similarity = [1.00000000e+04 4.47213595e-06 3.66666667e-06]
            3. Calculate the estimated position:
            estimated_position = sum([1.00000000e+04 * [-720.  395.] 4.47213595e-06 * [-720.  395.] 3.66666667e-06 * [-720.  395.]]) = [-720. 395.]

            The estimated location is: [-720, 395]
349 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.23570226 0.22941573 0.22941573]) = 0.69452375
            2. Calculate the weight of each neighbor:
            weight_1 = 0.23570226 / 0.69452375 = 0.33784844
            weight_2 = 0.22941573 / 0.69452375 = 0.32869565
            weight_3 = 0.22941573 / 0.69452375 = 0.33345561
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.33784844 * [-480.  395.]) + (0.32869565 * [-360.  595.]) + (0.33345561 * [-480.  395.])
            estimated_position = [-468.4444444444444, 395.3333333333333]
            4. The estimated location is: [%d, %d]
            ANSWER: [468, 395]
350 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.57735027 0.33333333]) = 1.58798387
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.58798387 = 0.36183699
            weight_2 = 0.57735027 / 1.58798387 = 0.36183699
            weight_3 = 0.33333333 / 1.58798387 = 0.20828402
            3. Calculate the estimated position:
            estimated_position = sum([0.36183699 * [-600.  240.]
                                     0.36183699 * [-600.  240.]
                                     0.20828402 * [-720.  595.]])
            estimated_position = [-432.61766 384.57638]
            4. The estimated location is: [432, 385]
351 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 5.77350269e-01 4.47213595e-01]) = 1.00000000e+04 + 5.77350269e-01 + 4.47213595e-01 = 1.000000004024586e+04
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1.00000000e+04 5.77350269e-01 4.47213595e-01] / sum_similarity = [1.00000000e+04 5.77350269e-01 4.47213595e-01] / 1.000000004024586e+04 = [0.999999995024586 0.00000057735027 0.0000004472136]
            3. Calculate the estimated position:
            estimated_position = sum([0.999999995024586 0.00000057735027 0.0000004472136] * [[-720.  595.] [-720.  595.] [-600.  240.]]) = [-720. * 0.999999995024586 + -720. * 0.00000057735027 + -600. * 0.0000004472136, 595. * 0.
352 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([1. 0.70710678 0.70710678]) = 2.41421356
            weight_1 = 1 / 2.41421356 = 0.41421356
            weight_2 = 0.70710678 / 2.41421356 = 0.29549546
            weight_3 = 0.70710678 / 2.41421356 = 0.29549546
            2. Calculate the estimated position:
            estimated_position = (0.41421356 * [-720.  595.]) + (0.29549546 * [-600.  240.]) + (0.29549546 * [-720.  595.])
            estimated_position = [-297.99999999999997, 244.99999999999997]
            3. The estimated location is: [-298, 245]
353 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 7.07106781e-01 7.07106781e-01]) = 1.00000000e+04 + 7.07106781e-01 + 7.07106781e-01 = 1.0000000000000001e+04
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1.00000000e+04 7.07106781e-01 7.07106781e-01] / sum_similarity = [1.00000000e+04 7.07106781e-01 7.07106781e-01] / 1.0000000000000001e+04 = [1. 7.07106781e-05 7.07106781e-05]
            3. Calculate the estimated position:
            estimated_position = sum([1. 7.07106781e-05 7.07106781e-05] * [[-720.  595.] [-720.  595.] [-600.  240.]]) = [-720. * 1. + -720. * 7.07106781e-05 + -600. * 7.07106781e-05, 595. * 1. + 595. * 7.07106781e-05 + 240. * 7.07106781e-05] = [-720. +
354 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.4472136  0.40824829]) = 1.55256877
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.45865343 0.2863068  0.25503977]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.45865343 0.2863068  0.25503977] * [[-720.  595.]
 [-720.  595.]
 [-600.  240.]])
            estimated_position = [-608.6, 401.8]
            The estimated location is: [-608.6, 401.8]
355 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([1. 0.70710678 0.57735027]) = 2.28451555
            neighbor_weight = [1. / 2.28451555 0.70710678 / 2.28451555 0.57735027 / 2.28451555] = [0.43888889 0.30847458 0.25263653]
            2. Calculate the estimated position:
            estimated_position = [0.43888889 * (-720.  595.) + 0.30847458 * (-720.  595.) + 0.25263653 * (-600.  240.)] = [-604.17447736 203.68552264]
            The estimated location is: [-604, 204]
356 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.5 0.5 0.4472136]) = 1.4472136
            neighbor_weight = [0.5/1.4472136, 0.5/1.4472136, 0.4472136/1.4472136] = [0.3472222, 0.3472222, 0.3055556]
            2. Calculate the estimated position:
            estimated_position = sum([0.3472222 * [-720.  795.]
                                     0.3472222 * [-720.  795.]
                                     0.3055556 * [-720.  795.]]) = [-720. 795.]
            The estimated location is: [-720, 795]
357 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.  1.  0.5]) = 2.5
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 2.5 = 0.4
            weight_2 = 1 / 2.5 = 0.4
            weight_3 = 0.5 / 2.5 = 0.2
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.4 * [-720.  795.] + 0.4 * [-720.  795.] + 0.2 * [-720.  795.]) / 3
            estimated_position = (-720 * 0.4 * 2 + 795 * 0.4 * 2 + -720 * 0.2) / 3
            estimated_position = [-448, 396.67]

            The estimated location is: [-448, 396.67]
358 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.  1.  0.5]) = 2.5
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 2.5 = 0.4
            weight_2 = 1 / 2.5 = 0.4
            weight_3 = 0.5 / 2.5 = 0.2
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.4 * [-720.  795.] + 0.4 * [-720.  795.] + 0.2 * [-720.  795.]) / 3
            estimated_position = (-720 * 0.4 * 2 + 795 * 0.4 * 2 + -720 * 0.2) / 3
            estimated_position = [-448, 396.67]
            4. The estimated location is: [-448, 396.67]
359 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.40824829 0.37796447]) = 0.97621276
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 0.97621276 = 0.50882353
            weight_2 = 0.40824829 / 0.97621276 = 0.41860465
            weight_3 = 0.37796447 / 0.97621276 = 0.38457178
            3. Calculate the estimated position:
            estimated_position = sum([0.50882353 * [-720.  795.]
                                     0.41860465 * [-720.  795.]
                                     0.38457178 * [-720.  795.]])
            estimated_position = [-2186. 2386.478]
            4. The estimated location is: [-2186, 2386]
360 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.35355339 0.35355339]) = 1.28845605
            2. Next, calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.28845605 = 0.44444444
            weight_2 = 0.35355339 / 1.28845605 = 0.27272727
            weight_3 = 0.35355339 / 1.28845605 = 0.27272727
            3. Finally, calculate the estimated position:
            estimated_position = sum([0.44444444 * [-720.  795.]
                                     0.27272727 * [-720.  795.]
                                     0.27272727 * [-720.  795.]])
            estimated_position = [-720. * 0.44444444 - 720. * 0.27272727 - 720. * 0.27272727 + 795. * 0.44444444 + 795. * 0.27272727 + 795. * 0.27272727]
            estimated_position = [-309.66666666666666, 596.3333333333333]
            The estimated location is: [309, 596]
361 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.4472136  0.40824829]) = 1.55256877
            2. Normalize the similarities:
            weight_1 = 0.70710678 / 1.55256877 = 0.45384644
            weight_2 = 0.4472136 / 1.55256877 = 0.28868074
            weight_3 = 0.40824829 / 1.55256877 = 0.26147278
            3. Calculate the estimated position:
            estimated_position = sum([0.45384644 * [-600. -450.]
                                     0.28868074 * [-600. -450.]
                                     0.26147278 * [-600. -450.]])
            estimated_position = [-1081. -706.]

            The estimated location is: [-1081, -706]
362 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.37796447 0.37796447 0.30151134]) = 1.05743988
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 1.05743988 = 0.35864102
            weight_2 = 0.37796447 / 1.05743988 = 0.35864102
            weight_3 = 0.30151134 / 1.05743988 = 0.28279756
            3. Calculate the estimated position:
            estimated_position = sum([0.35864102 * [-600. -450.]
                                     0.35864102 * [-600. -450.]
                                     0.28279756 * [-600. -450.]]
            estimated_position = [-600. -450.] * (0.35864102 + 0.35864102 + 0.28279756)
            estimated_position = [-600. -450.] * 1
            estimated_position = [-600. -450.]

            The estimated location is: [-600, -450]
363 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 1.00000000e+00 7.07106781e-01]) = 1.0000000000000006e+04
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1.00000000e+04 1.00000000e+00 7.07106781e-01] / sum_similarity = [1. 0. 0.]
            3. Calculate the estimated position:
            estimated_position = sum([1. 0. 0.] * [[-600. -450.] [-600. -450.] [-600. -450.]]) = [-1800. -1350.]
            4. The estimated location is: [-1800., -1350.]
364 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.37796447 0.26726124]) = 1.35233249
            2. Normalize the similarities:
            weight_1 = 0.70710678 / 1.35233249 = 0.52359886
            weight_2 = 0.37796447 / 1.35233249 = 0.27785542
            weight_3 = 0.26726124 / 1.35233249 = 0.19654562
            3. Calculate the estimated position:
            estimated_position = sum([0.52359886 * [-600. -450.]
                                     0.27785542 * [-600. -450.]
                                     0.19654562 * [-600. -450.]])
            estimated_position = [-600. * (0.52359886 + 0.27785542 + 0.19654562) - 450. * (0.52359886 + 0.27785542 + 0.19654562)]
            estimated_position = [-600. * 0.99805998 - 450. * 0.99805998]
            estimated_position = [-594.21799497, -447.18200503]
            The estimated location is: [-594, -447]
365 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.5 0.40824829 0.40824829]) = 1.31649658
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.5 / 1.31649658, 0.40824829 / 1.31649658, 0.40824829 / 1.31649658] = [0.38095238, 0.31167661, 0.31167661]
            3. Calculate the estimated position:
            estimated_position = sum([0.38095238, 0.31167661, 0.31167661] * [[-600. -450.] [-600. -450.] [-600. -450.]]) = [-600. -450.]
            4. The estimated location is: [-600, -450]
366 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.33333333 0.30151134 0.28867513]) = 0.92352079
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.92352079 = 0.36066017
            weight_2 = 0.30151134 / 0.92352079 = 0.32631579
            weight_3 = 0.28867513 / 0.92352079 = 0.30939894
            3. Calculate the estimated position:
            estimated_position = sum([0.36066017 * [-600. -450.]
                                     0.32631579 * [-600. -450.]
                                     0.30939894 * [-600. -450.]])
            estimated_position = [-1091.6 -746.4]
            4. The estimated location is: [-1091.6, -746.4]
367 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.e+04 1.e+00 1.e+00]) = 1.0000000000000002e+04
            2. Normalize the similarities: weight = [1.e+04 1.e+00 1.e+00] / sum_similarity = [0.0000000000000001 0. 0.]
            3. Perform the weighted averaging calculation: estimated_position = sum([0.0000000000000001 0. 0.] * [[-600. -450.] [-600. -450.] [-600. -450.]]) = [-600. -450.]
            4. The estimated location is: [-600, -450]
368 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.57735027 0.35355339]) = 1.63791044
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.63791044 = 0.43183562
            weight_2 = 0.57735027 / 1.63791044 = 0.34814814
            weight_3 = 0.35355339 / 1.63791044 = 0.21999624
            3. Calculate the estimated position:
            estimated_position = sum([0.43183562 * [-600. -450.]
                                     0.34814814 * [-600. -450.]
                                     0.21999624 * [-600. -450.]])
            estimated_position = [-600. * (0.43183562 + 0.34814814 + 0.21999624) - 450. * (0.43183562 + 0.34814814 + 0.21999624)]
            estimated_position = [-600. * 0.99997999 - 450. * 0.99997999]
            estimated_position = [-599.99996 - 449.99995]
            The estimated location is: [-599.99996, -449.99995]
369 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.2236068  0.18898224 0.16439899]) = 0.57698803
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.2236068 / 0.57698803, 0.18898224 / 0.57698803, 0.16439899 / 0.57698803] = [0.38774387, 0.32631579, 0.28593034]
            3. Calculate the estimated position:
            estimated_position = sum([0.38774387 * [-600.    0.], 0.32631579 * [-360.  795.], 0.28593034 * [-240.    0.] ]) = [-230.6444444444444, 106.88888888888889]
            4. The estimated location is: [%d, %d]
            ANSWER: [-230, 107]
370 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.24253563 0.23570226]) = 0.85620236
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 0.85620236 = 0.44144444
            weight_2 = 0.24253563 / 0.85620236 = 0.28333333
            weight_3 = 0.23570226 / 0.85620236 = 0.27527778
            3. Calculate the estimated position:
            estimated_position = [0.44144444 * (-600.) + 0.28333333 * (-600.) + 0.27527778 * (-480. + 240.)]
            estimated_position = [-441.44444444 -283.33333333 -275.27777778]
            estimated_position = [-1000. ]
            The estimated location is: [-1000., 0.]
371 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.1796053  0.17149859 0.15617376]) = 0.40722765
            2. Calculate the weight of each neighbor:
            weight_1 = 0.1796053 / 0.40722765 = 0.4408484
            weight_2 = 0.17149859 / 0.40722765 = 0.42245154
            weight_3 = 0.15617376 / 0.40722765 = 0.3806795
            3. Calculate the estimated position:
            estimated_position = sum([0.4408484 * [-600.    0.]
                                     0.42245154 * [-480.    0.]
                                     0.3806795 * [-390. -240.]])
            estimated_position = [-265.36448 -163.86752]
            4. The estimated location is: [-265, -164]
            ANSWER: [-265, -164]
372 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.23570226 0.17149859]) = 0.81534894
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 0.81534894 = 0.49999998
            weight_2 = 0.23570226 / 0.81534894 = 0.28999998
            weight_3 = 0.17149859 / 0.81534894 = 0.21000001
            3. Calculate the estimated position:
            estimated_position = [0.49999998 * (-600.) + 0.28999998 * (-600.) + 0.21000001 * (-360. + 240.)]
            estimated_position = [-499.99996 -399.99996 -130.00004]
            estimated_position = [-839.99992, -130.00004]
            The estimated location is: [-839.99992, -130.00004]
373 done_____________________________
1. First, calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.57735027 0.5       ]) = 1.78245705
            neighbor_weight = [0.70710678 0.57735027 0.5        ] / 1.78245705
            neighbor_weight = [0.39287309 0.32142857 0.38570834]
            2. Then, calculate the estimated position:
            estimated_position = sum([0.39287309 0.32142857 0.38570834] * [[-600.  240.]
            [-600.  120.]
            [-360.  240.]])
            estimated_position = [-576. 186.]
            The estimated location is: [-576, 186]
374 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.37796447 0.31622777]) = 1.26154251
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.57735027 0.37796447 0.31622777] / sum_similarity = [0.45784373 0.29568621 0.24647006]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.45784373 0.29568621 0.24647006] * [[-120.  240.]
            [-360.  240.]
            [-840.  395.]])
            estimated_position = [-108.64214123, 213.71888369]
            4. The estimated location is: [-108.64214123, 213.71888369]
375 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.5 0.5 0.4472136]) = 1.4472136
            neighbor_weight = [0.5/1.4472136, 0.5/1.4472136, 0.4472136/1.4472136] = [0.3472222, 0.3472222, 0.3055556]
            2. Calculate the estimated position:
            estimated_position = [0.3472222 * (-120.  240.) + 0.3472222 * (-360.  240.) + 0.3055556 * (-600.  120.)] = [-246.4444444444444, 61.66666666666666]
            The estimated location is: [-246, 62]
376 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.40824829 0.35355339 0.31622777]) = 1.07802945
            neighbor_weight = [0.40824829 0.35355339 0.31622777] / 1.07802945 = [0.38194706 0.33086464 0.2871883]
            2. Calculate the estimated position:
            estimated_position = sum([0.38194706 0.33086464 0.2871883] * [[-480.  395.]
            [-360.  240.]
            [-600.  240.]]) = [-1056.642 338.4688]
            3. The estimated location is: [-1056.642, 338.4688]
377 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.31622777 0.31622777]) = 1.04070483
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.40824829 0.31622777 0.31622777] / sum_similarity = [0.39583333 0.29816667 0.29816667]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.39583333 0.29816667 0.29816667] * [[-360.  240.]
 [-480.  395.]
 [-360.  395.]]) = [-348.42199999999996, 337.42199999999996]
            4. The estimated location is: [-348, 337]
378 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.31622777 0.30151134]) = 0.81773801
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 0.81773801 = 0.60653064
            weight_2 = 0.31622777 / 0.81773801 = 0.38346936
            weight_3 = 0.30151134 / 0.81773801 = 0.36957901
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = [(0.60653064 * -360.) + (0.38346936 * -480.) + (0.36957901 * -360.)]
            estimated_position = [-360. * 0.60653064 -480. * 0.38346936 -360. * 0.36957901]
            estimated_position = [-216.432256 -179.058644 -125.94474]
            estimated_position = [-216.432256 -179.058644 -125.94474 + 240.]
            estimated_position = [443.567744 164.041356 -94.055256]
            The estimated location is: [443.567744, 164.041356]
379 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136 0.4472136 0.37796447]) = 1.26238814
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 1.26238814 = 0.35355339
            weight_2 = 0.4472136 / 1.26238814 = 0.35355339
            weight_3 = 0.37796447 / 1.26238814 = 0.29388282
            3. Calculate the estimated position:
            estimated_position = sum([0.35355339 * [-600.  120.]
                                     0.35355339 * [-600.  120.]
                                     0.29388282 * [-360.  240.]])
            estimated_position = [-600. * 0.35355339 * 2 + 120. * 0.35355339 * 2 + -360. * 0.29388282]
            estimated_position = [-1087.6666666666667, 288.77777777777776]
            4. The estimated location is: [1087, 289]
380 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.31622777 0.31622777]) = 1.20980061
            2. Normalize the similarities: neighbor_weight = [0.57735027 0.31622777 0.31622777] / sum_similarity = [0.47956963 0.26313989 0.25729048]
            3. Calculate the weighted average of the neighbor positions: estimated_position = sum([0.47956963 0.26313989 0.25729048] * [[-840.  120.]
 [-600.  120.]
 [-840.  120.]]) = [-748.642647, 120.]

            The estimated location is: [-748.642647, 120]
381 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.57735027 0.40824829]) = 1.55294883
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.55294883 = 0.36862069
            weight_2 = 0.57735027 / 1.55294883 = 0.36862069
            weight_3 = 0.40824829 / 1.55294883 = 0.26273034
            3. Calculate the estimated position:
            estimated_position = sum([0.36862069 * [-720.  240.]
                                     0.36862069 * [-720.  120.]
                                     0.26273034 * [-720.  120.]])
            estimated_position = [-720. * 0.36862069 * 2 + 240. * 0.36862069 + -720. * 0.36862069 + 120. * 0.36862069 + -720. * 0.26273034 * 2 + 120. * 0.26273034]
            estimated_position = [-720. * 0.73724138 + 240. * 0.36862069 + -720. * 0.36862069 + 120. * 0.36862069 + -720. * 0.52546068 + 120. * 
382 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.28867513 0.25819889]) = 1.05512231
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.40824829 0.28867513 0.25819889] / sum_similarity = [0.39183626 0.27696207 0.33120167]
            3. Calculate the estimated position:
            estimated_position = sum([0.39183626 0.27696207 0.33120167] * [[-720.  595.]
            [-600.  240.]
            [-720.  595.]]) = [-688.4444444444445, 407.8888888888889]
            4. The estimated location is: [-688, 408]
383 done_____________________________
1. First, calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.57735027 0.4472136 ]) = 1.72166965
            neighbor_weight = [0.70710678 / 1.72166965, 0.57735027 / 1.72166965, 0.4472136 / 1.72166965] = [0.41369898, 0.33289854, 0.25340258]
            2. Then, calculate the estimated position:
            estimated_position = sum([0.41369898 * [-720.  120.], 0.33289854 * [-720.  120.], 0.25340258 * [-720.  120.]]) = [-568.64, 100.84]
            3. The estimated location is: [-568.64, 100.84]
384 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136 0.40824829 0.40824829]) = 1.26370998
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 1.26370998 = 0.35384615
            weight_2 = 0.40824829 / 1.26370998 = 0.32307692
            weight_3 = 0.40824829 / 1.26370998 = 0.32307692
            3. Calculate the estimated position:
            estimated_position = sum([0.35384615 * [-720.  595.]
                                     0.32307692 * [-840.  120.]
                                     0.32307692 * [-720.  595.]])
            estimated_position = [-518.444 -174.968]
            4. The estimated location is: [-518.444, -174.968]
385 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.26726124 0.24253563 0.24253563]) = 0.75233249
            2. Calculate the weight of each neighbor:
            weight_1 = 0.26726124 / 0.75233249 = 0.35384615
            weight_2 = 0.24253563 / 0.75233249 = 0.32173913
            weight_3 = 0.24253563 / 0.75233249 = 0.32173913
            3. Calculate the estimated position:
            estimated_position = sum([0.35384615 * [-360.  395.]
                                     0.32173913 * [-360.  395.]
                                     0.32173913 * [-600.  395.]])
            estimated_position = [-360. * 0.35384615 - 360. * 0.32173913 - 600. * 0.32173913
                                   + 395. * 0.35384615 + 395. * 0.32173913 + 395. * 0.32173913]
            estimated_position = [-128.424747 - 116.424747 - 192.424747 + 136.424747 + 124.424747 + 124.424747]
            estimated_position = [-128.424747 + 261.4247
386 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.5        0.40824829]) = 1.58560063
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.58560063 = 0.36111111
            weight_2 = 0.5 / 1.58560063 = 0.31372549
            weight_3 = 0.40824829 / 1.58560063 = 0.26512126
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = [(0.36111111 * -360.) + (0.31372549 * -360.) + (0.26512126 * -600.), (0.36111111 * 395.) + (0.31372549 * 395.) + (0.26512126 * 395.)]
            estimated_position = [-408.66666666666665, 405.55555555555556]
            4. The estimated location is: [%d, %d]
            ANSWER: [-408, 405]
387 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.57735027 0.57735027]) = 1.85975732
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.85975732 = 0.37837837
            weight_2 = 0.57735027 / 1.85975732 = 0.30943396
            weight_3 = 0.57735027 / 1.85975732 = 0.30943396
            3. Calculate the estimated position:
            estimated_position = sum([0.37837837 * [-600.  395.]
                                     0.30943396 * [-600.  395.]
                                     0.30943396 * [-600.  395.]])
            estimated_position = [-1824.5 596.45]
            4. The estimated location is: [-1824.5, 596.45]
388 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.33333333 0.33333333 0.31622777]) = 0.98288111
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.33333333 0.33333333 0.31622777] / sum_similarity = [0.33333333 0.33333333 0.31622777] / 0.98288111 = [0.33888889 0.33888889 0.31888883]
            3. Calculate the estimated position:
            estimated_position = sum([0.33888889 0.33888889 0.31888883] * [[-360.  395.] [-360.  395.] [-600.  395.]]) = [(-360. * 0.33888889) + (-360. * 0.33888889) + (-600. * 0.31888883)] + [(395. * 0.33888889) + (395. * 0.33888889) + (395. * 0.31888883)] = [-360. -360. -190.] + [1395. 1395. 110.5] = [1035. 1035. -850.]
            4. The estimated location is: [1035, 1035]
389 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.30151134 0.2773501  0.2773501 ]) = 0.85619148
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.30151134 / 0.85619148, 0.2773501 / 0.85619148, 0.2773501 / 0.85619148] = [0.34893959, 0.32186047, 0.32186047]
            3. Calculate the estimated position:
            estimated_position = sum([0.34893959, 0.32186047, 0.32186047] * [[-720.  395.] [-150. -450.] [-600.  395.]]) = [-544.6726, 137.4583]
            4. The estimated location is: [-544.6726, 137.4583]
390 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.40824829 0.37796447]) = 1.36356293
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.36356293 = 0.42444444
            weight_2 = 0.40824829 / 1.36356293 = 0.3010101
            weight_3 = 0.37796447 / 1.36356293 = 0.27455556
            3. Calculate the estimated position:
            estimated_position = sum([0.42444444 * [-600.  595.]
                                     0.3010101 * [-600.  595.]
                                     0.27455556 * [-600.  595.]])
            estimated_position = [-1600. 1790.]
            4. The estimated location is: [%d, %d]
            ANSWER: [-1600, 1790]
391 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.4472136  0.40824829]) = 1.42281164
            2. Normalize the similarities: neighbor_weight = [0.57735027 0.4472136  0.40824829] / sum_similarity = [0.40583333 0.31366667 0.2795 ]
            3. Calculate the weighted average of the neighbor positions: estimated_position = sum([0.40583333 0.31366667 0.2795 ] * [[-600.  595.]
 [-600.  595.]
 [-600.  595.]]) = [-599.1444 594.8556]
            4. The estimated location is: [%d, %d]
            5. Answer: [-599, 594]
392 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 1.00000000e+00 5.77350269e-01]) = 1.0000000000000006e+04
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1.00000000e+04 1.00000000e+00 5.77350269e-01] / sum_similarity = [1. 0. 5.77350269e-05]
            3. Calculate the estimated position:
            estimated_position = sum([1. 0. 5.77350269e-05] * [[-600.  595.] [-600.  595.] [-360.  395.]]) = [-600.  595.] + 5.77350269e-05 * (-600.  595.) + 5.77350269e-05 * (-600.  595.) + 5.77350269e-05 * [-360.  395.] = [-600.  595.] + [-300.  297.776845305] + [-300.  297.776845305] + [-18.388236265 2.888236265] = [-1200.  1200.]
            4. The estimated location is: [1200, 1200]
393 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.4472136 0.40824829]) = 0.95546199
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 0.95546199 = 0.5217391
            weight_2 = 0.4472136 / 0.95546199 = 0.4682604
            weight_3 = 0.40824829 / 0.95546199 = 0.4300004
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.5217391 * [-600.  595.]) + (0.4682604 * [-600.  595.]) + (0.4300004 * [-600.  595.])
            estimated_position = [-600. * (0.5217391 + 0.4682604 + 0.4300004) + 595. * (0.5217391 + 0.4682604 + 0.4300004)]
            estimated_position = [-600. * 1.4199999 + 595. * 1.4199999]
            estimated_position = [-846. + 846.]
            estimated_position = [0, 0]

            The estimated location is [0, 0].
394 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.33333333 0.23570226 0.18898224]) = 0.75801783
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.33333333 0.23570226 0.18898224] / sum_similarity = [0.44444444 0.31111111 0.22222222]
            3. Calculate the estimated position:
            estimated_position = sum([0.44444444 0.31111111 0.22222222] * [[-600.  795.] [-600.  795.] [-720.  795.]]) = [-600.  795.]
            4. The estimated location is: [-600, 795]
395 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.35355339 0.25819889 0.1767767 ]) = 0.78842898
            2. Calculate the weight of each neighbor:
            weight_1 = 0.35355339 / 0.78842898 = 0.44888889
            weight_2 = 0.25819889 / 0.78842898 = 0.32333333
            weight_3 = 0.1767767 / 0.78842898 = 0.22777778
            3. Calculate the estimated position:
            estimated_position = sum([0.44888889 * [-600.  795.]
                                     0.32333333 * [-600.  795.]
                                     0.22777778 * [-720.  795.]])
            estimated_position = [-539.33333333  795.]

            The estimated location is: [539, 795]
396 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.37796447 0.35355339 0.18898224]) = 0.9204999999999999
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.37796447 0.35355339 0.18898224] / sum_similarity = [0.41111111 0.38333333 0.18333333]
            3. Calculate the estimated position:
            estimated_position = sum([0.41111111 0.38333333 0.18333333] * [[-600.  795.] [-600.  795.] [-720.  795.]])
            estimated_position = [-600. * 0.41111111 + -600. * 0.38333333 + -720. * 0.18333333, 795. * 0.41111111 + 795. * 0.38333333 + 795. * 0.18333333]
            estimated_position = [-504.4444, 606.6667]
            The estimated location is: [-504.4444, 606.6667]
397 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2 0.2 0.19611614]) = 0.59611614
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2 / 0.59611614 = 0.3388888888888889
            weight_2 = 0.2 / 0.59611614 = 0.3388888888888889
            weight_3 = 0.19611614 / 0.59611614 = 0.3333333333333333
            3. Calculate the estimated position:
            estimated_position = sum([0.3388888888888889 0.3388888888888889 0.3333333333333333] * [[-720.  795.] [-720.  795.] [-720.  795.]])
            estimated_position = [-720. + -720. + -720.] + [0.3388888888888889 * 795. + 0.3388888888888889 * 795. + 0.3333333333333333 * 795.]
            estimated_position = [-2160. + 1597. + 1597.]
            estimated_position = [-2160. + 3294.]
            estimated_position = 1134.
            The y-coordinate is 795.
            The estimated location is: [1134., 795.]
398 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.26726124 0.21320072 0.21320072]) = 0.69368268
            2. Calculate the weight of each neighbor:
            weight_1 = 0.26726124 / 0.69368268 = 0.38484844
            weight_2 = 0.21320072 / 0.69368268 = 0.30483871
            weight_3 = 0.21320072 / 0.69368268 = 0.30483871
            3. Calculate the estimated position:
            estimated_position = sum([0.38484844 * [-600.  795.]
                                     0.30483871 * [-720.  795.]
                                     0.30483871 * [-720.  795.]])
            estimated_position = [-504.4444444444444, 795]
            4. The estimated location is: [504, 795]
399 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.4472136 0.28867513 0.1796053 ]) = 0.91548393
            2. Normalize the similarities:
            weight_1 = 0.4472136 / 0.91548393 = 0.48888888
            weight_2 = 0.28867513 / 0.91548393 = 0.31578949
            weight_3 = 0.1796053 / 0.91548393 = 0.19330554
            3. Calculate the weighted average of the positions:
            estimated_position = (0.48888888 * [-600.  795.]) + (0.31578949 * [-600.  795.]) + (0.19330554 * [-360.  120.])
            estimated_position = [-576. 795.0000000000001]
            The estimated location is: [576, 795]
400 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.4472136  0.37796447]) = 1.53228492
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 / 1.53228492, 0.4472136 / 1.53228492, 0.37796447 / 1.53228492] = [0.46153846, 0.29473684, 0.24372469]
            3. Calculate the estimated position:
            estimated_position = sum([0.46153846, 0.29473684, 0.24372469] * [[-600.  795.] [-720.  795.] [-600.  795.]]) = [-600.  795.]
            4. The estimated location is: [-600, 795]
401 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.35355339 0.33333333]) = 1.26423699
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.26423699 = 0.45144624
            weight_2 = 0.35355339 / 1.26423699 = 0.27855386
            weight_3 = 0.33333333 / 1.26423699 = 0.26999987
            3. Calculate the estimated position:
            estimated_position = sum([0.45144624 * [-480. -450.]
                                     0.27855386 * [-480. -450.]
                                     0.26999987 * [-480. -450.]])
            estimated_position = [-480. * (0.45144624 + 0.27855386 + 0.26999987) - 450. * (0.45144624 + 0.27855386 + 0.26999987)]
            estimated_position = [-480. * 0.99965998 - 450. * 0.99965998]
            estimated_position = [-479.682948 - 449.682948]
            estimated_position = [-479, -450]
            The estimated location is [-479, -450]
402 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.28867513 0.2773501  0.25      ]) = 0.81407526
            2. Calculate the weight of each neighbor:
            weight_1 = 0.28867513 / 0.81407526 = 0.3534346
            weight_2 = 0.2773501  / 0.81407526 = 0.3409091
            weight_3 = 0.25       / 0.81407526 = 0.3056553
            3. Calculate the estimated position:
            estimated_position = sum([0.3534346 * [-480. -450.]
                                     0.3409091 * [-480. -450.]
                                     0.3056553 * [-480. -450.]])
            estimated_position = [-480. * 0.3534346 -450. * 0.3534346 -480. * 0.3409091 -450. * 0.3409091 -480. * 0.3056553 -450. * 0.3056553]
            estimated_position = [-170.421 -147.141 -163.361 -138.851 -161.411 -136.701]
            4. The estimated location is the average of the estimated position:
            estimated_location = [(-170.421 + -147.141 + -163.361 + -138.851 + -161.411 + -136.701) / 6, (-1
403 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.70710678 0.57735027]) = 2.28445665
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 2.28445665 = 0.43888888
            weight_2 = 0.70710678 / 2.28445665 = 0.30888889
            weight_3 = 0.57735027 / 2.28445665 = 0.25211111
            3. Calculate the estimated position:
            estimated_position = [0.43888888 * (-480. -450.) + 0.30888889 * (-480. -450.) + 0.25211111 * (-480. -450.)]
            estimated_position = [-360. -330.]
            The estimated location is: [-360, -330]
404 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.70710678 0.57735027]) = 2.00256385
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 2.00256385 = 0.35355342
            weight_2 = 0.70710678 / 2.00256385 = 0.35355342
            weight_3 = 0.57735027 / 2.00256385 = 0.29689271
            3. Calculate the estimated position:
            estimated_position = sum([0.35355342 * [-480. -450.]
                                     0.35355342 * [-480. -450.]
                                     0.29689271 * [-480. -450.]])
            estimated_position = [-480. * 0.35355342 * 2 -450. * 0.35355342 * 2 -480. * 0.29689271 * 2]
            estimated_position = [-727.11111111 -727.11111111 -580.23462105]
            estimated_position = [-727.11111111 -727.11111111 -580.23462105] / 3
            estimated_position = [-242.37036677 -242.37036677 -193.41147034]
            The estimated location is: [-242.370
405 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 1.00000000e+00 7.07106781e-01]) = 1.0000000000000006e+04
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1.00000000e+04 1.00000000e+00 7.07106781e-01] / sum_similarity = [1. 0. 0.]
            3. Calculate the estimated position:
            estimated_position = sum([1. 0. 0.] * [[-480. -450.] [-480. -450.] [-480. -450.]]) = [-1440. -1440.]
            4. The estimated location is: [-1440, -1440]
406 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.40824829 0.28867513]) = 1.09697162
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 1.09697162 = 0.37681111
            weight_2 = 0.40824829 / 1.09697162 = 0.37681111
            weight_3 = 0.28867513 / 1.09697162 = 0.24637778
            3. Calculate the estimated position:
            estimated_position = sum([0.37681111 * [-480. -450.]
                                     0.37681111 * [-480. -450.]
                                     0.24637778 * [-480. -450.]])
            estimated_position = [-1488. -1458.]
            4. The estimated location is: [-1488, -1458]
407 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.23570226 0.2236068  0.18898224]) = 0.64829136
            2. Calculate the weight of each neighbor:
            weight_1 = 0.23570226 / 0.64829136 = 0.36183889
            weight_2 = 0.2236068 / 0.64829136 = 0.34383559
            weight_3 = 0.18898224 / 0.64829136 = 0.29432556
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = [0.36183889 * (-480.) + 0.34383559 * (-480.) + 0.29432556 * (-390. - 360.)]
            estimated_position = [-478.44444444 -478.44444444 -409.87222222]
            estimated_position = [-966.88888889, -409.87222222]
            The estimated location is: [-966.88888889, -409.87222222]
408 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.2 0.16222142]) = 0.70555475
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.70555475 = 0.47142857
            weight_2 = 0.2 / 0.70555475 = 0.28571429
            weight_3 = 0.16222142 / 0.70555475 = 0.23285714
            3. Calculate the estimated position:
            estimated_position = sum([0.47142857 * [-480.    0.]
                                     0.28571429 * [-480.    0.]
                                     0.23285714 * [-480.    0.]])
            estimated_position = [-480. * 0.47142857 - 480. * 0.28571429 - 480. * 0.23285714]
            estimated_position = [-228. -134. -110.]
            4. The estimated location is: [%d, %d]
            ANSWER: [-228, -134]
409 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.2236068  0.18569534 0.17149859]) = 0.58070073
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.2236068 / 0.58070073, 0.18569534 / 0.58070073, 0.17149859 / 0.58070073] = [0.38484844, 0.31746032, 0.29768124]
            3. Calculate the estimated position:
            estimated_position = sum([0.38484844, 0.31746032, 0.29768124] * [[-390. -360.] [-390. -360.] [-480.    0.]]) = [-390. -360.]
            4. The estimated location is: [-390, -360]
410 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.20851441 0.15811388]) = 0.7000000029802322
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.7000000029802322 = 0.4762069074494444
            weight_2 = 0.20851441 / 0.7000000029802322 = 0.2978611147546875
            weight_3 = 0.15811388 / 0.7000000029802322 = 0.2219389823506609
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.4762069074494444 * [-480.    0.] + 0.2978611147546875 * [-480.    0.] + 0.2219389823506609 * [-480.    0.]]
            estimated_position = [-223.44246964888886, 0.]

            The estimated location is [-223.44246964888886, 0].
411 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.20851441 0.20851441 0.20851441]) = 0.62554323
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.33333333 0.33333333 0.33333333] = [0.20851441 0.20851441 0.20851441] / sum_similarity
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.33333333 0.33333333 0.33333333] * [[-360.  120.]
            [-600.  795.]
            [-600.  795.]])
            estimated_position = [-400. 495.]
            4. The estimated location is: [%d, %d]
            ANSWER: [400, 495]
412 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2773501  0.26726124 0.23570226]) = 0.7793134
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2773501 / sum_similarity = 0.3514444
            weight_2 = 0.26726124 / sum_similarity = 0.3388889
            weight_3 = 0.23570226 / sum_similarity = 0.3096667
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [(0.3514444 * [-720.  120.]) + (0.3388889 * [-480.  120.]) + (0.3096667 * [-840.  240.])]
            estimated_position = [(-249.84444 -136.77778 -253.66667) + ( -163.33339 -39.999996 + 251.83333)]
            estimated_position = [(-249.84444 -136.77778 -253.66667) + (-163.33339 + 39.999996 - 251.83333)]
            estimated_position = [-544.97779]
            estimated_position = [-544.97779, 120.]
            The estimated location is: [-544.97779, 120.]
413 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.26726124 0.25      ]) = 0.92276983
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 0.92276983 = 0.44119628
            weight_2 = 0.26726124 / 0.92276983 = 0.28880716
            weight_3 = 0.25 / 0.92276983 = 0.27000657
            3. Calculate the estimated position:
            estimated_position = [0.44119628 * (-360.  120.) + 0.28880716 * (-480.  240.) + 0.27000657 * (-480.  240.)]
            estimated_position = [-160.48444444444446, 55.28807164383562]
            4. The estimated location is: [-160, 55]
414 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.23570226 0.22941573 0.22941573]) = 0.69452375
            2. Calculate the weight of each neighbor:
            weight_1 = 0.23570226 / 0.69452375 = 0.33784844
            weight_2 = 0.22941573 / 0.69452375 = 0.32869565
            weight_3 = 0.22941573 / 0.69452375 = 0.33345561
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.33784844 * [-360.  240.]) + (0.32869565 * [-480.  395.]) + (0.33345561 * [-360.  240.])
            estimated_position = [-344.4444444444444, 236.66666666666668]
            4. The estimated location is: [%d, %d]
            ANSWER: [-344, 237]
415 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.57735027 0.35355339]) = 1.63791044
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.63791044 = 0.43183562
            weight_2 = 0.57735027 / 1.63791044 = 0.34814814
            weight_3 = 0.35355339 / 1.63791044 = 0.21999624
            3. Calculate the estimated position:
            estimated_position = sum([0.43183562 * [-480.  240.]
                                     0.34814814 * [-360.  240.]
                                     0.21999624 * [-480.  240.]])
            estimated_position = [-480. * 0.43183562 - 360. * 0.34814814 - 480. * 0.21999624,
                                   240. * 0.43183562 + 240. * 0.34814814 + 240. * 0.21999624]
            estimated_position = [-230.4444444444444, 240.8333333333333]
            The estimated location is: [240.8333333333333, -230.4444444444444]
416 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.4472136 0.26726124 0.26726124]) = 0.97973588
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 0.97973588 = 0.45684444
            weight_2 = 0.26726124 / 0.97973588 = 0.2726124
            weight_3 = 0.26726124 / 0.97973588 = 0.2726124
            3. Calculate the estimated position:
            estimated_position = [0.45684444 * (-720.  240.) + 0.2726124 * (-600.  240.) + 0.2726124 * (-720.  120.)]
            estimated_position = [-360.  120.]
            The estimated location is: [-360, 120]
417 done_____________________________
1. First, calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.57735027 0.5       ]) = 1.78245705
            neighbor_weight = [0.70710678 0.57735027 0.5        ] / 1.78245705
            neighbor_weight = [0.39287309 0.32142857 0.38570834]
            2. Then, calculate the estimated position:
            estimated_position = sum([0.39287309 0.32142857 0.38570834] * [[-480.  240.]
            [-360.  240.]
            [-360.  395.]])
            estimated_position = [-480. * 0.39287309 + -360. * 0.32142857 + -360. * 0.38570834,
            240. * 0.39287309 + 240. * 0.32142857 + 395. * 0.38570834]
            estimated_position = [-358.4444444444444, 268.85714285714286]
            The estimated location is: [%d, %d]
            ANSWER: [-358, 269]
418 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.4472136 0.31622777 0.23570226]) = 1.00014363
            2. Normalize the similarities:
            weight_1 = 0.4472136 / 1.00014363 = 0.44699999999999996
            weight_2 = 0.31622777 / 1.00014363 = 0.31599999999999997
            weight_3 = 0.23570226 / 1.00014363 = 0.23400000000000001
            3. Calculate the weighted average of the positions:
            estimated_position = (0.44699999999999996 * [-720.  240.] + 0.31599999999999997 * [-600.  240.] + 0.23400000000000001 * [-720.  120.])
            estimated_position = [-548.4469999999999, 208.44699999999998]
            4. The estimated location is: [-548, 208]
419 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.4472136  0.40824829]) = 1.55256877
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 / 1.55256877, 0.4472136 / 1.55256877, 0.40824829 / 1.55256877] = [0.45559074, 0.28867519, 0.25573407]
            3. Calculate the estimated position:
            estimated_position = sum([0.45559074, 0.28867519, 0.25573407] * [[-840.  395.]
            [-120.  240.]
            [-480.  240.]]) = [-840. * 0.45559074 + -120. * 0.28867519 + -480. * 0.25573407, 395. * 0.45559074 + 240. * 0.28867519 + 240. * 0.25573407] = [-410.44, 308.44]
            4. The estimated location is: [-410.44, 308.44]
420 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.4472136 0.26726124 0.25819889]) = 1.01267373
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 1.01267373 = 0.44244444
            weight_2 = 0.26726124 / 1.01267373 = 0.26438357
            weight_3 = 0.25819889 / 1.01267373 = 0.25416159
            3. Calculate the estimated position:
            estimated_position = [0.44244444 * (-720.  240.) + 0.26438357 * (-720.  395.) + 0.25416159 * (-840.  120.)]
            estimated_position = [-310.44244444, 100.416159]
            4. The estimated location is: [-310, 100]
            ANSWER: [-310, 100]
421 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.5 0.31622777 0.30151134]) = 0.81773801
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.5 / 0.81773801, 0.31622777 / 0.81773801, 0.30151134 / 0.81773801] = [0.60517568, 0.38378363, 0.36666667]
            3. Calculate the estimated position:
            estimated_position = sum([0.60517568, 0.38378363, 0.36666667] * [[-240.  595.] [-480.  395.] [-480.  395.]]) = [-240. * 0.60517568 + -480. * 0.38378363 + -480. * 0.36666667, 595. * 0.60517568 + 395. * 0.38378363 + 395. * 0.36666667] = [-240. -216. -216.]
            4. The estimated location is: [-240., -216.]
422 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 1.00000000e+00 5.77350269e-01]) = 1.0000000000000006e+04
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1.00000000e+04 1.00000000e+00 5.77350269e-01] / sum_similarity = [1. 0. 0.]
            3. Calculate the estimated position:
            estimated_position = sum([1. 0. 0.] * [[-480.  395.] [-480.  395.] [-480.  395.]]) = [-1440. 1180.]
            4. The estimated location is: [-1440, 1180]
423 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136 0.4472136 0.31622777]) = 1.20066437
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.4472136 / 1.20066437, 0.4472136 / 1.20066437, 0.31622777 / 1.20066437] = [0.3726778, 0.3726778, 0.2546444]
            3. Calculate the estimated position:
            estimated_position = sum([0.3726778 * [-480.  395.], 0.3726778 * [-720.  595.], 0.2546444 * [-720.  595.] ]) = [-480. * 0.3726778 + -720. * 0.3726778 + -720. * 0.2546444, 395. * 0.3726778 + 595. * 0.3726778 + 595. * 0.2546444] = [-572.444, 514.444]
            4. The estimated location is: [-572.444, 514.444]
424 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.33333333 0.31622777]) = 1.02752567
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 1.02752567 = 0.36698444
            weight_2 = 0.33333333 / 1.02752567 = 0.32380952
            weight_3 = 0.31622777 / 1.02752567 = 0.30920559
            3. Calculate the estimated position:
            estimated_position = sum([0.36698444 * [-480.  395.]
                                     0.32380952 * [-480.  395.]
                                     0.30920559 * [-120.  395.]])
            estimated_position = [-154.64444444444446, 395]

            The estimated location is: [-154, 395]
425 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.40824829 0.33333333]) = 1.3189319
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.3189319 = 0.4384847
            weight_2 = 0.40824829 / 1.3189319 = 0.3138889
            weight_3 = 0.33333333 / 1.3189319 = 0.2476264
            3. Calculate the estimated position:
            estimated_position = sum([0.4384847 * [-480.  395.]
                                     0.3138889 * [-480.  395.]
                                     0.2476264 * [-480.  395.]])
            estimated_position = [-480. * 1.0 + 395. * 0.4384847 + (-480. * 0.3138889 + 395. * 0.2476264)]
            estimated_position = [-480. + 438.44399 + (-146.63318 + 93.3816)]
            estimated_position = [-480. + 438.44399 - 53.05152]
            estimated_position = 55.39247
            4. Since the position is a 2D vector, we need to split the estimated position into x and y components.
            x = estimated_position[0] = -480.
            y = estimated_position[1] = 55.39247
            5. The final answer is: "[%
426 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.33333333 0.31622777]) = 1.05779949
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.40824829 0.33333333 0.31622777] / sum_similarity = [0.38888889 0.32222222 0.28888889]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.38888889 0.32222222 0.28888889] * [[-840.  240.]
            [-720.  120.]
            [-480.  595.]]) = [-768.44444444, 240.44444444]
            4. The estimated location is: [-768, 240]
427 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.4472136  0.37796447]) = 1.53228492
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 / 1.53228492, 0.4472136 / 1.53228492, 0.37796447 / 1.53228492] = [0.46153846, 0.29473684, 0.24372469]
            3. Calculate the estimated position:
            estimated_position = sum([0.46153846, 0.29473684, 0.24372469] * [[-480.  595.] [-480.  595.] [-840.  240.]]) = [-480. * 0.46153846 + -480. * 0.29473684 + -840. * 0.24372469, 595. * 0.46153846 + 595. * 0.29473684 + 240. * 0.24372469] = [-480. * 0.46153846 - 480. * 0.29473684 - 840. * 0.24372469, 257.64644444 + 173.64644444 + 57.64644444] = [-304.44444444, 248.64644444]
            4
428 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.4472136 0.37796447]) = 1.32417794
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 1.32417794 = 0.37681116
            weight_2 = 0.4472136 / 1.32417794 = 0.33862069
            weight_3 = 0.37796447 / 1.32417794 = 0.28450795
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.37681116 * [-480.  595.]) + (0.33862069 * [-480.  595.]) + (0.28450795 * [-600.  240.])
            estimated_position = [-384.64444444 407.88888889]
            4. The estimated location is: [%d, %d]
            ANSWER: [384, 408]
429 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.37796447 0.37796447]) = 1.16441683
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 1.16441683 = 0.35094898
            weight_2 = 0.37796447 / 1.16441683 = 0.32307692
            weight_3 = 0.37796447 / 1.16441683 = 0.32307692
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.35094898 * [-720.  120.] + 0.32307692 * [-600.  120.] + 0.32307692 * [-480.  595.]]
            estimated_position = [-258.647452 -19.884384 238.332384]
            4. The estimated location is: [%d, %d]
            ANSWER: [-258.647452, -19.884384]
430 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.4472136 0.4472136 ]) = 1.46878753
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.46878753 = 0.39444444
            weight_2 = 0.4472136 / 1.46878753 = 0.30555556
            weight_3 = 0.4472136 / 1.46878753 = 0.30555556
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.39444444 * [-480.  595.]
                                     0.30555556 * [-480.  595.]
                                     0.30555556 * [-480.  595.]])
            estimated_position = [-480. * 0.39444444 - 480. * 0.30555556 - 480. * 0.30555556 + 595. * 0.39444444 + 595. * 0.30555556 + 595. * 0.30555556]
            estimated_position = [-480. * 0.39444444 - 480. * 0.30555556 - 480. * 0.30555556 + 595. * 0.39444444 + 595. * 0.30555556 + 595. * 0.3055
431 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([1. 0.70710678 0.5 ]) = 2.20710678
            neighbor_weight = [1. / 2.20710678 0.70710678 / 2.20710678 0.5 / 2.20710678] = [0.45454545 0.32352941 0.22222222]
            2. Calculate the estimated position:
            estimated_position = sum([0.45454545 0.32352941 0.22222222] * [[-480.  595.] [-480.  595.] [-480.  595.]])
            estimated_position = [-480. * 0.45454545 + -480. * 0.32352941 + -480. * 0.22222222 + 595. * 0.45454545 + 595. * 0.32352941 + 595. * 0.22222222]
            estimated_position = [-480. * 0.45454545 - 480. * 0.32352941 - 480. * 0.22222222 + 595. * 0.45454545 + 595. * 0.32352941 + 595. * 0.22222222]
            estimated_position = [-220.42222222 444.42222222]
            The estimated location is: [220, 444]
432 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.57735027 0.577735027]) = 1.722050814
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.57735027 / 1.722050814, 0.57735027 / 1.722050814, 0.57735027 / 1.722050814] = [0.33333333, 0.33333333, 0.33333333]
            3. Calculate the estimated position:
            estimated_position = sum([0.33333333, 0.33333333, 0.33333333] * [[-360.  240.]
 [-480.  595.]
 [-600.  120.]]) = [(-360. * 0.33333333 + -480. * 0.33333333 + -600. * 0.33333333), (240. * 0.33333333 + 595. * 0.33333333 + 120. * 0.33333333)]
            estimated_position = [-413.33333333, 306.66666667]
            The estimated location is: [-413, 307]
433 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.57735027 0.57735027]) = 2.15470054
            2. Calculate the weights: weights = [1. 0.57735027 0.57735027] / sum_similarity = [1. 0.57735027 0.57735027] / 2.15470054 = [0.48148148 0.26315789 0.26315789]
            3. Calculate the estimated position: estimated_position = sum([0.48148148 0.26315789 0.26315789] * [[-480.  795.] [-480.  795.] [-480.  795.]]) = [0.48148148 * (-480.) + 0.26315789 * (-480.) + 0.26315789 * (-480.)] + [0.48148148 * 795. + 0.26315789 * 795. + 0.26315789 * 795.] = [-384. -384. -384.] + [368.3148148 368.3148148 368.3148148] = [368.3148148 -384. -384.]
            4. The estimated location is: [-384., 368.3148148]
434 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.13736056 0.12909944 0.11952286]) = 0.38602326
            2. Calculate the weight of each neighbor:
            weight_1 = 0.13736056 / 0.38602326 = 0.35544444
            weight_2 = 0.12909944 / 0.38602326 = 0.33499999
            weight_3 = 0.11952286 / 0.38602326 = 0.30955556
            3. Calculate the estimated position:
            estimated_position = sum([0.35544444 * [-960.  480.]
                                     0.33499999 * [-960.  480.]
                                     0.30955556 * [-840.  795.]])
            estimated_position = [-960. * 0.35544444 - 960. * 0.33499999 - 840. * 0.30955556,
                                   480. * 0.35544444 + 480. * 0.33499999 + 795. * 0.30955556]
            estimated_position = [-344.44444444, 344.44444444 + 334.99999999 + 235.95555556]
            estimated_position = [-344.44444444, 914.44444444]
            The estimated location is: [-344
435 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.57735027 0.4472136 ]) = 1.97456387
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 1.97456387 = 0.505050505050505
            weight_2 = 0.57735027 / 1.97456387 = 0.291304347826087
            weight_3 = 0.4472136 / 1.97456387 = 0.226642052173913
            3. Calculate the estimated position:
            estimated_position = sum([0.505050505050505 * [-480.  795.]
                                     0.291304347826087 * [-480.  795.]
                                     0.226642052173913 * [-480.  795.]])
            estimated_position = [-480. * 0.505050505050505 + -480. * 0.291304347826087 + -480. * 0.226642052173913,
                                    795. * 0.505050505050505 + 795. * 0.291304347826087 + 795. * 0.226642052173913]
            estimated_position = [-243. -147.]
            The estimated location is: [-243., -147.]
436 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.2773501  0.09325048]) = 0.94795085
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.57735027 0.2773501  0.09325048] / sum_similarity = [0.60384646 0.2909235  0.08522999]
            3. Calculate the estimated position:
            estimated_position = sum([0.60384646 0.2909235  0.08522999] * [[-480.  795.] [-480.  795.] [-960.  480.]]) = [-480. * 0.60384646 + -480. * 0.2909235 + -960. * 0.08522999, 795. * 0.60384646 + 795. * 0.2909235 + 480. * 0.08522999] = [-300.44, 544.44]
            4. The estimated location is: [-300.44, 544.44]
437 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.37796447 0.30151134]) = 1.0877239
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 1.0877239 = 0.37796447
            weight_2 = 0.37796447 / 1.0877239 = 0.34641016
            weight_3 = 0.30151134 / 1.0877239 = 0.2757054
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.37796447 * -390 + 0.34641016 * -240 + 0.2757054 * -390]
            estimated_position = [-150. -75.]
            The estimated location is: [-150, -75]
438 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.33333333 0.21320072 0.1767767 ]) = 0.72331065
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.33333333 0.21320072 0.1767767 ] / sum_similarity = [0.46408435 0.29388823 0.19202742]
            3. Calculate the estimated position:
            estimated_position = sum([0.46408435 0.29388823 0.19202742] * [[-390. -360.] [-390. -360.] [-390. -360.]])
            estimated_position = [-390. * 0.46408435 -360. * 0.46408435 -390. * 0.29388823 -360. * 0.29388823 -390. * 0.19202742 -360. * 0.19202742]
            estimated_position = [-318.434 -274.434 -185.776 -153.776 -153.648 -117.648]
            The estimated position is: [-318.434, -274.434]
439 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.37796447 0.35355339]) = 1.43862464
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 / 1.43862464, 0.37796447 / 1.43862464, 0.35355339 / 1.43862464] = [0.49440699, 0.26308161, 0.2424114]
            3. Calculate the estimated position:
            estimated_position = sum([0.49440699, 0.26308161, 0.2424114] * [[-390. -360.] [-390. -360.] [-390. -360.]]) = [-390. -360.]
            4. The estimated location is: [-390, -360]
440 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25 0.16903085 0.14586499]) = 0.56490084
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25 / 0.56490084 = 0.44444444
            weight_2 = 0.16903085 / 0.56490084 = 0.29999998
            weight_3 = 0.14586499 / 0.56490084 = 0.25555556
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.44444444 * [-390. -360.]) + (0.29999998 * [-390. -360.]) + (0.25555556 * [-390. -360.])
            estimated_position = [-390. -360.]
            The estimated location is: [-390, -360]
441 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.5 0.35355339]) = 1.43090373
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.43090373 = 0.40588235
            weight_2 = 0.5 / 1.43090373 = 0.34970588
            weight_3 = 0.35355339 / 1.43090373 = 0.24431177
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.40588235 * [-390. -240.]) + (0.34970588 * [-390. -240.]) + (0.24431177 * [-390. -240.])
            estimated_position = [-390. -240.] * (0.40588235 + 0.34970588 + 0.24431177)
            estimated_position = [-390. -240.] * 1
            estimated_position = [-390. -240.]
            4. The estimated location is: [-390, -240]
442 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.5 0.35355339]) = 1.56066017
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.56066017 = 0.45154634
            weight_2 = 0.5 / 1.56066017 = 0.32089798
            weight_3 = 0.35355339 / 1.56066017 = 0.22755568
            3. Calculate the estimated position:
            estimated_position = sum([0.45154634 * [-390. -240.]
                                     0.32089798 * [-390. -240.]
                                     0.22755568 * [-390. -240.]])
            estimated_position = [-390. -240.] * [0.45154634 + 0.32089798 + 0.22755568]
            estimated_position = [-390. -240.] * [0.99999998]
            estimated_position = [-389.999998 -239.999996]

            The estimated location is: [-389, -239]
443 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.4472136  0.31622777 0.30151134]) = 1.06495271
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 1.06495271 = 0.42184874
            weight_2 = 0.31622777 / 1.06495271 = 0.29810426
            weight_3 = 0.30151134 / 1.06495271 = 0.27903699
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.42184874 * [-390. -240.]) + (0.29810426 * [-390. -240.]) + (0.27903699 * [-390. -240.])
            estimated_position = [-390. -240.] * (0.42184874 + 0.29810426 + 0.27903699)
            estimated_position = [-390. -240.] * 1
            estimated_position = [-390. -240.]
            The estimated location is: [-390, -240]
444 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.31622777 0.31622777]) = 1.04090483
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 1.04090483 = 0.39184844
            weight_2 = 0.31622777 / 1.04090483 = 0.30195172
            weight_3 = 0.31622777 / 1.04090483 = 0.30195172
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.39184844 * (-390.) + 0.30195172 * (-360.) + 0.30195172 * (-390.)]
            estimated_position = [-284.4444444444444, -270.4444444444444]

            The estimated location is: [-284, -270]
445 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.70710678 0.57735027]) = 2.00256385
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 2.00256385 = 0.35355342
            weight_2 = 0.70710678 / 2.00256385 = 0.35355342
            weight_3 = 0.57735027 / 2.00256385 = 0.29384671
            3. Calculate the estimated position:
            estimated_position = sum([0.35355342 * [-390. -240.] 0.35355342 * [-390. -240.] 0.29384671 * [-390. -240.]])
            estimated_position = [-390. -240.]
            4. The estimated location is: [%d, %d]
            ANSWER: [-390, -240]
446 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.5 0.2236068]) = 1.30105713
            2. Normalize the similarities:
            weight_1 = 0.57735027 / 1.30105713 = 0.4428125
            weight_2 = 0.5 / 1.30105713 = 0.38461539
            weight_3 = 0.2236068 / 1.30105713 = 0.17257202
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.4428125 * [-390. -120.]) + (0.38461539 * [-390. -120.]) + (0.17257202 * [-390. -120.])
            estimated_position = [-390. -120.] * (0.4428125 + 0.38461539 + 0.17257202)
            estimated_position = [-390. -120.] * 0.99999999
            estimated_position = [-389.9 -119.6]
            The estimated location is: [-389.9, -119.6]
447 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.2773501  0.25      ]) = 1.03264848
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 1.03264848 = 0.39484848
            weight_2 = 0.2773501 / 1.03264848 = 0.26764706
            weight_3 = 0.25 / 1.03264848 = 0.24350446
            3. Calculate the estimated position:
            estimated_position = sum([0.39484848 * [-390. -120.]
                                     0.26764706 * [-390. -120.]
                                     0.24350446 * [-390. -120.]])
            estimated_position = [-390. -120.] * (0.39484848 + 0.26764706 + 0.24350446)
            estimated_position = [-390. -120.] * 1
            estimated_position = [-390. -120.]

            The estimated location is: [-390, -120]
448 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.15430335 0.13483997 0.13363062]) = 0.42274394
            2. Calculate the weight of each neighbor:
            weight_1 = 0.15430335 / 0.42274394 = 0.36444444
            weight_2 = 0.13483997 / 0.42274394 = 0.31888889
            weight_3 = 0.13363062 / 0.42274394 = 0.31666667
            3. Calculate the estimated position:
            estimated_position = sum([0.36444444 * [-600.    0.]
                                     0.31888889 * [-840.    0.]
                                     0.31666667 * [-840.    0.]])
            estimated_position = [-488.6666666666666, 0.]
            4. The estimated location is: [-488, 0]
449 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.14744196 0.13483997 0.13363062]) = 0.31591255
            2. Calculate the weight of each neighbor:
            weight_1 = 0.14744196 / 0.31591255 = 0.46584574
            weight_2 = 0.13483997 / 0.31591255 = 0.42648426
            weight_3 = 0.13363062 / 0.31591255 = 0.42648426
            3. Calculate the estimated position:
            estimated_position = sum([0.46584574 * [-840.    0.]
                                     0.42648426 * [-840.    0.]
                                     0.42648426 * [-840.    0.]])
            estimated_position = [-840. * 0.46584574 - 840. * 0.42648426 - 840. * 0.42648426]
            estimated_position = [-382.642944 - 355.552352 - 355.552352]
            estimated_position = [-1093.745748, 0]

            The estimated location is: [-1093.745748, 0]
450 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.25 0.2236068 0.20851441]) = 0.68162121
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.25 / 0.68162121, 0.2236068 / 0.68162121, 0.20851441 / 0.68162121] = [0.36585366, 0.32631579, 0.28783055]
            3. Calculate the estimated position:
            estimated_position = sum([0.36585366, 0.32631579, 0.28783055] * [[-390. -120.] [-390. -120.] [-840.  395.]]) = [-390. -120.]
            4. The estimated location is: [-390, -120]
451 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.5 0.40824829 0.37796447]) = 0.97621276
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 0.97621276 = 0.50945455
            weight_2 = 0.40824829 / 0.97621276 = 0.41860465
            weight_3 = 0.37796447 / 0.97621276 = 0.38373079
            3. Calculate the estimated position:
            estimated_position = sum([0.50945455 * [-390. -360.]
                                     0.41860465 * [-390. -360.]
                                     0.38373079 * [-390. -360.]])
            estimated_position = [-390. * (0.50945455 + 0.41860465 + 0.38373079) - 360. * (0.50945455 + 0.41860465 + 0.38373079)]
            estimated_position = [-390. * 1.31179001 - 360. * 1.31179001]
            estimated_position = [-514.626731 - 468.626731]
            The estimated location is: [-514.626731, -468.626731]
452 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.30151134 0.21821789 0.20851441]) = 0.72823364
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.30151134 0.21821789 0.20851441] / sum_similarity = [0.42084468 0.29483316 0.28432216]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.42084468 0.29483316 0.28432216] * [[-360.    0.]
 [-390. -240.]
 [-390. -360.]])
            estimated_position = [-360. * 0.42084468 + -390. * 0.29483316 + -390. * 0.28432216, 0. * 0.42084468 - 240. * 0.29483316]
            estimated_position = [-304.8446784 -100.4833162]
            The estimated location is: [-304.8446784, -100.4833162]
453 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.23570226 0.23570226]) = 1.04875483
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.57735027 0.23570226 0.23570226] / sum_similarity = [0.55784373 0.22592187 0.22592187]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.55784373 0.22592187 0.22592187] * [[-360.    0.]
 [-390. -240.]
 [-390. -240.]]) = [-360. * 0.55784373 -390. * 0.22592187 -390. * 0.22592187] = [-200. -86. -86.]
            4. The final estimated position is: [%d, %d]
            ANSWER: [-200, -86]
454 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.20851441 0.2       ]) = 0.71002575
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.71002575 = 0.42682647
            weight_2 = 0.20851441 / 0.71002575 = 0.29487179
            weight_3 = 0.2 / 0.71002575 = 0.28430174
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = [0.42682647 * (-360.) + 0.29487179 * (-390. - 240.) + 0.28430174 * (-390. - 240.)]
            estimated_position = [-204.44444444444446, -304.4444444444444]
            4. The estimated location is: [-204, -304]
455 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.21821789 0.21320072]) = 0.80938208
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 0.80938208 = 0.46666667
            weight_2 = 0.21821789 / 0.80938208 = 0.27083333
            weight_3 = 0.21320072 / 0.80938208 = 0.26249999
            3. Calculate the estimated position:
            estimated_position = [0.46666667 * (-360.) + 0.27083333 * (-360.) + 0.26249999 * (-390. - 240.)]
            estimated_position = [-280. -104.]
            The estimated location is: [-280, -104]
456 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.19245009 0.18257419 0.18257419]) = 0.55762447
            2. Calculate the weight of each neighbor:
            weight_1 = 0.19245009 / 0.55762447 = 0.34444444
            weight_2 = 0.18257419 / 0.55762447 = 0.32666667
            weight_3 = 0.18257419 / 0.55762447 = 0.32666667
            3. Calculate the estimated position:
            estimated_position = sum([0.34444444 * [-360.    0.]
                                     0.32666667 * [-600.  795.]
                                     0.32666667 * [-360.    0.]])
            estimated_position = [-123.33333333333333, 118.66666666666667]
            4. The estimated location is: [123, 119]
457 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.40824829 0.33333333]) = 1.31893189
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.31893189 = 0.43819844
            weight_2 = 0.40824829 / 1.31893189 = 0.31388889
            weight_3 = 0.33333333 / 1.31893189 = 0.24870288
            3. Calculate the estimated position:
            estimated_position = sum([0.43819844 * [-360.  120.]
                                     0.31388889 * [-360.  120.]
                                     0.24870288 * [-360.  120.]])
            estimated_position = [-360 * (0.43819844 + 0.31388889 + 0.24870288) + 120 * (0.43819844 + 0.31388889 + 0.24870288)]
            estimated_position = [-360 * 0.99978026 + 120 * 0.99978026]
            estimated_position = [-359.999768, 120.000232]
            The estimated location is: [%d, %d]
            ANSWER: [-359.999768, 120.000232]
458 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.37796447 0.35355339 0.26726124]) = 1.00077910
            2. Normalize the similarities:
            weight_1 = 0.37796447 / 1.00077910 = 0.37764447
            weight_2 = 0.35355339 / 1.00077910 = 0.35320661
            weight_3 = 0.26726124 / 1.00077910 = 0.26614892
            3. Calculate the estimated position:
            estimated_position = sum([0.37764447 * [-360.  120.]
                                     0.35320661 * [-360.  120.]
                                     0.26614892 * [-360.  120.]])
            estimated_position = [-360. * (0.37764447 + 0.35320661 + 0.26614892) + 120. * (0.37764447 + 0.35320661 + 0.26614892)]
            estimated_position = [-360. * 1.00000000 + 120. * 1.00000000]
            estimated_position = [0, 120]
            The estimated location is [0, 120]
459 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136 0.35355339 0.35355339]) = 1.15831968
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.4472136 / 1.15831968, 0.35355339 / 1.15831968, 0.35355339 / 1.15831968] = [0.38769231, 0.30864102, 0.30864102]
            3. Calculate the estimated position:
            estimated_position = sum([0.38769231 * [-360.  120.], 0.30864102 * [-600.  395.], 0.30864102 * [-600.  395.]]) = [-206.47444444, 118.58888889]
            4. The estimated location is: [-206, 119]
460 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.25819889 0.25819889]) = 0.92465608
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.40824829 / 0.92465608, 0.25819889 / 0.92465608, 0.25819889 / 0.92465608] = [0.44117647, 0.27838789, 0.27838789]
            3. Calculate the estimated position:
            estimated_position = sum([0.44117647, 0.27838789, 0.27838789] * [[-360.  120.] [-600.  395.] [-600.  395.]]) = [-360. * 0.44117647 + -600. * 0.27838789 + -600. * 0.27838789, 120. * 0.44117647 + 395. * 0.27838789 + 395. * 0.27838789] = [-360. -278. -278., 120. * 0.44117647 + 395. * 0.27838789 + 395. * 0.27838789]
            4. The estimated location is: [-360. -278.]
461 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.5 0.33333333]) = 1.4006836
            2. Calculate the weight of each neighbor:
            weight_1 = 0.57735027 / 1.4006836 = 0.4116425
            weight_2 = 0.5 / 1.4006836 = 0.3571428
            weight_3 = 0.33333333 / 1.4006836 = 0.2310147
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.4116425 * [-360.  120.]) + (0.3571428 * [-360.  120.]) + (0.2310147 * [-360.  120.])
            estimated_position = [-360. * (0.4116425 + 0.3571428 + 0.2310147) + 120. * (0.4116425 + 0.3571428 + 0.2310147)]
            estimated_position = [-360. * 1 + 120. * 1]
            estimated_position = [-360. + 120.]
            estimated_position = [-240.]
            The y-coordinate is 120.
            Since the x-coordinate is the average of the x-coordinates of the top-3 neighbors, we need to calculate the average of [-360., -360., -360.]:
            x_average = (-360. + -360. + -360.) / 3 = -360.
            The x-coordinate is -360.
            The
462 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.31622777 0.28867513 0.26726124]) = 0.86216414
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.31622777 0.28867513 0.26726124] / sum_similarity = [0.36483333 0.32406667 0.28809999]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.36483333 0.32406667 0.28809999] * [[-360.  120.] [-360.  120.] [-600.  795.]]) = [-360.  120.]
            4. The estimated location is: [-360, 120]
463 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.57735027 0.37796447]) = 1.66242152
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.66242152 = 0.42426406
            weight_2 = 0.57735027 / 1.66242152 = 0.34349414
            weight_3 = 0.37796447 / 1.66242152 = 0.22824176
            3. Calculate the estimated position:
            estimated_position = sum([0.42426406 * [-360.  240.]
                                     0.34349414 * [-360.  240.]
                                     0.22824176 * [-600.  120.]])
            estimated_position = [-208.432848 43.284816]

            The estimated location is: [%d, %d]
            ANSWER: [-208, 43]
464 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.70710678 0.57735027]) = 2.00255385
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 / 2.00255385, 0.70710678 / 2.00255385, 0.57735027 / 2.00255385] = [0.35355342, 0.35355342, 0.27628957]
            3. Calculate the estimated position:
            estimated_position = sum([0.35355342, 0.35355342, 0.27628957] * [[-360.  240.] [-600.  120.] [-600.  120.]]) = [-360. * 0.35355342 + -600. * 0.35355342 + -600. * 0.27628957, 240. * 0.35355342 + 120. * 0.35355342 + 120. * 0.27628957] = [-540.4444, 204.4444]
            4. The estimated location is: [-540.4444, 204.4444]
465 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 7.07106781e-01 7.07106781e-01]) = 1.00000000e+04 + 7.07106781e-01 + 7.07106781e-01 = 1.0000000000000001e+04
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1.00000000e+04 7.07106781e-01 7.07106781e-01] / sum_similarity = [1.00000000e+04 7.07106781e-01 7.07106781e-01] / 1.0000000000000001e+04 = [1. 7.07106781e-05 7.07106781e-05]
            3. Calculate the estimated position:
            estimated_position = sum([1. 7.07106781e-05 7.07106781e-05] * [[-600.  120.]
            [-360.  240.]
            [-600.  120.]]) = [-600. * 1. + (-360. * 7.07106781e-05) + (-600. * 7.07106781e-05)] + [120. * 7.07106781e-05 + 240. * 7.07106781e-05 + 120. * 7.07
466 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.70710678 0.57735027 0.5       ]) = 1.78245705
            neighbor_weight = [0.70710678 / 1.78245705, 0.57735027 / 1.78245705, 0.5 / 1.78245705] = [0.39393939 0.32142857 0.28461538]
            2. Calculate the estimated position:
            estimated_position = [0.39393939 * (-360.  240.) + 0.32142857 * (-600.  120.) + 0.28461538 * (-600.  120.)] = [-318.44444444 105.66666667]
            The estimated location is: [-318, 106]
467 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.4472136 0.28867513]) = 1.23588873
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 1.23588873 = 0.40645669
            weight_2 = 0.4472136 / 1.23588873 = 0.36354731
            weight_3 = 0.28867513 / 1.23588873 = 0.23000598
            3. Calculate the estimated position:
            estimated_position = (0.40645669 * [-360.  395.]) + (0.36354731 * [-360.  395.]) + (0.23000598 * [-360.  395.])
            estimated_position = [-360. * (0.40645669 + 0.36354731 + 0.23000598) + 395. * (0.40645669 + 0.36354731 + 0.23000598)]
            estimated_position = [-360. * 0.99950998 + 395. * 0.99950998]
            estimated_position = [329.45, 395.]
            The estimated location is [329.45, 395].
468 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.5 0.40824829]) = 1.90824829
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 1.90824829 = 0.52380952
            weight_2 = 0.5 / 1.90824829 = 0.26690477
            weight_3 = 0.40824829 / 1.90824829 = 0.21004649
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.52380952 * [-360.  395.]) + (0.26690477 * [-360.  395.]) + (0.21004649 * [-600.  595.])
            estimated_position = [-360. * 0.52380952 + -360. * 0.26690477 + -600. * 0.21004649, 395. * 0.52380952 + 395. * 0.26690477 + 595. * 0.21004649]
            estimated_position = [-204.4424, 238.4424]

            The estimated location is: [204, 395]
469 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.4472136 0.4472136 0.40824829]) = 1.30268458
            neighbor_weight = [0.4472136 / 1.30268458, 0.4472136 / 1.30268458, 0.40824829 / 1.30268458] = [0.34248147, 0.34248147, 0.31503696]
            2. Calculate the estimated position:
            estimated_position = [0.34248147 * (-600.  395.) + 0.34248147 * (-360.  395.) + 0.31503696 * (-600.  595.)] = [-546.34248147, 395.34248147]
            The estimated location is: [-546, 395]
470 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.2236068  0.18569534 0.17149859]) = 0.58070073
            2. Calculate the weight of each neighbor:
            weight_1 = 0.2236068 / 0.58070073 = 0.38345896
            weight_2 = 0.18569534 / 0.58070073 = 0.31977211
            weight_3 = 0.17149859 / 0.58070073 = 0.29664893
            3. Calculate the estimated position:
            estimated_position = sum([0.38345896 * [-360.  395.]
                                     0.31977211 * [-360.  395.]
                                     0.29664893 * [-360.  395.]])
            estimated_position = [-360. * (0.38345896 + 0.31977211 + 0.29664893) + 395. * (0.38345896 + 0.31977211 + 0.29664893)]
            estimated_position = [-360. * 1 + 395. * 1]
            estimated_position = [0, 395]
            The estimated location is [0, 395]
471 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([1. 0.70710678 0.5 ]) = 2.20710678
            neighbor_weight = [1. / 2.20710678 0.70710678 / 2.20710678 0.5 / 2.20710678] = [0.45454545 0.32352941 0.22222222]
            2. Calculate the estimated position:
            estimated_position = sum([0.45454545 * [-360.  395.] 0.32352941 * [-360.  395.] 0.22222222 * [-600.  595.]]) = [-360. 395.]
            The estimated location is: [-360, 395]
472 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.57735027 0.33333333]) = 1.87068359
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 1.87068359 = 0.53478261
            weight_2 = 0.57735027 / 1.87068359 = 0.30360669
            weight_3 = 0.33333333 / 1.87068359 = 0.16950869
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.53478261 * [-360.  595.]) + (0.30360669 * [-360.  595.]) + (0.16950869 * [-360.  595.])
            estimated_position = [-360.  595.]

            The estimated location is: [-360, 595]
473 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.33333333 0.33333333]) = 1.37353989
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.37353989 = 0.5151515151515152
            weight_2 = 0.33333333 / 1.37353989 = 0.2424242424242424
            weight_3 = 0.33333333 / 1.37353989 = 0.2424242424242424
            3. Perform the weighted averaging calculation:
            estimated_position = [weight_1 * position_1[0] + weight_2 * position_2[0] + weight_3 * position_3[0], weight_1 * position_1[1] + weight_2 * position_2[1] + weight_3 * position_3[1]]
            estimated_position = [0.5151515151515152 * -720. + 0.2424242424242424 * -720. + 0.2424242424242424 * -720., 0.5151515151515152 * 595. + 0.2424242424242424 * 595. + 0.2424242424242424 * 595.]
            estimated_position = [-486. 647.5]
            The estimated location is: [-486, 647]
474 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.40824829 0.40824829]) = 1.52359537
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.52359537 = 0.46364761
            weight_2 = 0.40824829 / 1.52359537 = 0.27037037
            weight_3 = 0.40824829 / 1.52359537 = 0.27037037
            3. Calculate the estimated position:
            estimated_position = sum([0.46364761 * [-360.  595.]
                                     0.27037037 * [-360.  595.]
                                     0.27037037 * [-360.  595.]])
            estimated_position = [-360. * 1.00000000 + 595. * 0.46364761 + (-360. * 1.00000000 + 595. * 0.27037037) + (-360. * 1.00000000 + 595. * 0.27037037)]
            estimated_position = [-360. + 268.482141 + (-360. + 156.403503) + (-360. + 156.403503)]
            estimated_position = [-360. + 268.482141 + (-360. + 156.403503) + (-360
475 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.26726124 0.19611614 0.15430335]) = 0.61767073
            2. Calculate the weight of each neighbor:
            weight_1 = 0.26726124 / 0.61767073 = 0.43281254
            weight_2 = 0.19611614 / 0.61767073 = 0.31764706
            weight_3 = 0.15430335 / 0.61767073 = 0.24947911
            3. Calculate the estimated position:
            estimated_position = sum([0.43281254 * [-360.  595.]
                                     0.31764706 * [-360.  595.]
                                     0.24947911 * [-360.  595.]])
            estimated_position = [-1064. 179.6744]

            The estimated location is: [-1064, 179]
476 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.4472136  0.28867513]) = 1.44298551
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 / 1.44298551, 0.4472136 / 1.44298551, 0.28867513 / 1.44298551] = [0.49085306, 0.31088635, 0.19825959]
            3. Calculate the estimated position:
            estimated_position = sum([0.49085306 * [-720.    0.], 0.31088635 * [-720.    0.], 0.19825959 * [-360.  795.]]) = [-508.42164, 138.76486]
            4. The estimated location is: [-508.42164, 138.76486]
477 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.26726124 0.25       0.24253563]) = 0.76029787
            2. Calculate the weight of each neighbor:
            weight_1 = 0.26726124 / 0.76029787 = 0.34864865
            weight_2 = 0.25 / 0.76029787 = 0.32343435
            weight_3 = 0.24253563 / 0.76029787 = 0.31781698
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.34864865 * [-120.    0.] + 0.32343435 * [-720. -450.] + 0.31781698 * [-360.  795.]]
            estimated_position = [-41.86486486486486, 103.41781698113206]
            4. The estimated location is: [%d, %d]
            ANSWER: [41.86486486486486, -103.41781698113206]
478 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.33333333 0.21320072 0.20851441]) = 0.75505846
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.33333333 0.21320072 0.20851441] / sum_similarity = [0.44444444 0.28333333 0.27222222]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.44444444 0.28333333 0.27222222] * [[-360.  795.]
            [-840. -150.]
            [-840.    0.]]) = [-444.44444444 283.33333333]
            4. The estimated location is: [-444.44444444, 283.33333333]

            The estimated location is: [-444.44444444, 283.33333333]
479 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.2773501  0.26726124 0.20412415]) = 0.74873549
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.2773501 / 0.74873549, 0.26726124 / 0.74873549, 0.20412415 / 0.74873549] = [0.36888889, 0.35555556, 0.27555555]
            3. Calculate the estimated position:
            estimated_position = sum([0.36888889, 0.35555556, 0.27555555] * [[-720.    0.]
 [-840. -150.]
 [-120.    0.]]) = [-720. * 0.36888889 - 840. * 0.35555556 - 120. * 0.27555555, 0. * 0.36888889 - 150. * 0.35555556 + 0. * 0.27555555] = [-268.4444444444444, -49.99999999999999]
            4. The estimated location is: [-268, -50]
480 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.28867513 0.25819889]) = 0.92483849
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 0.92483849 = 0.40888888
            weight_2 = 0.28867513 / 0.92483849 = 0.31281689
            weight_3 = 0.25819889 / 0.92483849 = 0.27820423
            3. Calculate the estimated position:
            estimated_position = [0.40888888 * (-240.) + 0.31281689 * (-240.) + 0.27820423 * (-240.)]
            estimated_position = [-240. * (0.40888888 + 0.31281689 + 0.27820423)]
            estimated_position = [-240. * 1]
            estimated_position = [-240.]
            Since the position is a 2D vector, we need to add the y-coordinate. However, the given data does not provide any y-coordinate information. Therefore, the estimated position is incomplete.
            ANSWER: [-240,?]
481 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.28867513 0.25819889]) = 0.84838536
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.84838536 = 0.35479488
            weight_2 = 0.28867513 / 0.84838536 = 0.33820508
            weight_3 = 0.25819889 / 0.84838536 = 0.30699504
            3. Calculate the estimated position:
            estimated_position = sum([0.35479488 * [-240.    0.]
                                     0.33820508 * [-240.    0.]
                                     0.30699504 * [-240.    0.]])
            estimated_position = [-240. * (0.35479488 + 0.33820508 + 0.30699504) 0 * (0.35479488 + 0.33820508 + 0.30699504)]
            estimated_position = [-240. * 1 0]
            estimated_position = [-240. 0]

            The estimated location is: [-240, 0]
482 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.37796447 0.30151134]) = 1.0877239
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 1.0877239 = 0.37796447
            weight_2 = 0.37796447 / 1.0877239 = 0.3456522
            weight_3 = 0.30151134 / 1.0877239 = 0.2765223
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.37796447 * -240. + 0.3456522 * -240. + 0.2765223 * -240.]
            estimated_position = [-239.844 -239.844 -239.844]
            estimated_position = [-239.844, -239.844]

            The estimated location is: [-239.844, -239.844]
483 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.40824829 0.25819889]) = 1.66644718
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / sum_similarity = 1 / 1.66644718 = 0.60000002
            weight_2 = 0.40824829 / sum_similarity = 0.24000001
            weight_3 = 0.25819889 / sum_similarity = 0.15999999
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.6 * (-240.) + 0.24 * (-240.) + 0.16 * (-480. + 120.)]
            estimated_position = [-144. -36.]
            The estimated location is: [-144, -36]
484 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.30151134 0.28867513 0.28867513]) = 0.87885159
            2. Calculate the weight of each neighbor:
            weight_1 = 0.30151134 / 0.87885159 = 0.34280701
            weight_2 = 0.28867513 / 0.87885159 = 0.32631579
            weight_3 = 0.28867513 / 0.87885159 = 0.32631579
            3. Calculate the estimated position:
            estimated_position = sum([0.34280701 * [-240.    0.]
                                     0.32631579 * [-480.    0.]
                                     0.32631579 * [-240.    0.]])
            estimated_position = [-145.68423400000002, 0.]
            4. The estimated location is: [-145.684234, 0]
485 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.37796447 0.24253563 0.22941573]) = 0.84991583
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.37796447 0.24253563 0.22941573] / sum_similarity = [0.44444444 0.28888889 0.26666667]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.44444444 0.28888889 0.26666667] * [[-240.  120.]
            [-840.  240.]
            [-840.  120.]]) = [-444.44444444 188.88888889]
            4. The estimated location is: [-444.44444444, 188.88888889]
486 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.31622777 0.26726124]) = 0.91682224
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.91682224 = 0.36269268
            weight_2 = 0.31622777 / 0.91682224 = 0.34444444
            weight_3 = 0.26726124 / 0.91682224 = 0.29285714
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.36269268 * (-390.) + 0.34444444 * (-840.) + 0.29285714 * (-840.)]
            estimated_position = [-268. -244.]
            The estimated location is: [-268, -244]
487 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.57735027 0.57735027]) = 1.85970732
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.85970732 = 0.37837837
            weight_2 = 0.57735027 / 1.85970732 = 0.30943396
            weight_3 = 0.57735027 / 1.85970732 = 0.30943396
            3. Calculate the estimated position:
            estimated_position = sum([0.37837837 * [-240.  120.]
                                     0.30943396 * [-240.  120.]
                                     0.30943396 * [-240.  120.]])
            estimated_position = [-747.6  216.88]
            4. The estimated location is: [-747.6, 216.88]
488 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136  0.26726124 0.25819889]) = 1.01267373
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 1.01267373 = 0.4421844
            weight_2 = 0.26726124 / 1.01267373 = 0.2638888
            weight_3 = 0.25819889 / 1.01267373 = 0.2538267
            3. Calculate the estimated position:
            estimated_position = sum([0.4421844 * [-240.  120.]
                                     0.2638888 * [-240.  120.]
                                     0.2538267 * [-240.  120.]])
            estimated_position = [-240. * (0.4421844 + 0.2638888 + 0.2538267) + 120. * (0.4421844 + 0.2638888 + 0.2538267)]
            estimated_position = [-240. * 0.9609008 + 120. * 0.9609008]
            estimated_position = [-217.590248, 117.590248]
            The estimated location is: [-217.590248, 117.590248]
489 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.23570226 0.21821789 0.21320072]) = 0.66712087
            2. Calculate the weight of each neighbor:
            weight_1 = 0.23570226 / 0.66712087 = 0.35046447
            weight_2 = 0.21821789 / 0.66712087 = 0.32260864
            weight_3 = 0.21320072 / 0.66712087 = 0.32072649
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.35046447 * [-120.  395.] + 0.32260864 * [-720.  595.] + 0.32072649 * [-720.  595.] ]
            estimated_position = [-120 * 0.35046447 - 720 * 0.32260864 - 720 * 0.32072649 + 395 * 0.35046447 + 595 * 0.32260864 + 595 * 0.32072649]
            estimated_position = [-42.024344 - 230.813616 - 230.813616 + 136.521891 + 194.471648 + 194.471648]
            estimated_position = [-42.024
490 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.33333333 0.30151134 0.21320072]) = 0.84794539
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.84794539 = 0.39285714
            weight_2 = 0.30151134 / 0.84794539 = 0.35294118
            weight_3 = 0.21320072 / 0.84794539 = 0.25420158
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.39285714 * (-240.) + 0.35294118 * (-240.) + 0.25420158 * (-120.)]
            estimated_position = [-188. -188.]
            The estimated location is: [-188, -188]
491 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 0.21821789 0.21320072]) = 1.43143551
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / sum_similarity = 1 / 1.43143551 = 0.69813164
            weight_2 = 0.21821789 / sum_similarity = 0.15346448
            weight_3 = 0.21320072 / sum_similarity = 0.14816448
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.69813164 * [-240.  240.] + 0.15346448 * [-240.  240.] + 0.14816448 * [-360.  120.]]
            estimated_position = [-184.624888, 30.462488]

            The estimated location is: [-184.624888, 30.462488]
492 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.33333333 0.31622777 0.31622777]) = 0.96558338
            2. Calculate the weight of each neighbor:
            weight_1 = 0.33333333 / 0.96558338 = 0.34482758620689654
            weight_2 = 0.31622777 / 0.96558338 = 0.3263157894736842
            weight_3 = 0.31622777 / 0.96558338 = 0.3263157894736842
            3. Calculate the estimated position:
            estimated_position = (0.34482758620689654 * [-240.  240.]) + (0.3263157894736842 * [-240.  240.]) + (0.3263157894736842 * [-240.  240.])
            estimated_position = [-732.  732.]

            The estimated location is: [732, -732]
493 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.30151134 0.2236068 ]) = 0.93336643
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.40824829 / 0.93336643, 0.30151134 / 0.93336643, 0.2236068 / 0.93336643] = [0.43636364, 0.32323232, 0.23636364]
            3. Calculate the estimated position:
            estimated_position = sum([0.43636364, 0.32323232, 0.23636364] * [[-240.  240.] [-240.  240.] [-240.  595.]]) = [-240. * 0.43636364 + 240. * 0.32323232 + 595. * 0.23636364, -240. * 0.43636364 + 240. * 0.32323232 + 595. * 0.23636364] = [-104.44444444444446, 104.44444444444446]
            4. The estimated location is: [%d, %d]
            ANSWER: [-104.44444444444446, 104.44444444444446]
494 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.4472136 0.21821789 0.19611614]) = 0.86153763
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.4472136 / 0.86153763, 0.21821789 / 0.86153763, 0.19611614 / 0.86153763] = [0.51828167, 0.25084308, 0.22087525]
            3. Calculate the estimated position:
            estimated_position = [0.51828167 * (-240.  595.) + 0.25084308 * (-600.  120.) + 0.22087525 * (-840.  395.)] = [-388.4344, 104.4344]
            4. The estimated location is: [-388.4344, 104.4344]
495 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.22941573 0.21320072 0.20851441]) = 0.64113086
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.22941573 0.21320072 0.20851441] / sum_similarity = [0.35484618 0.33088436 0.31426946]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.35484618 0.33088436 0.31426946] * [[-240.  595.] [-240.  595.] [-240.  240.]]) = [-240. 403.6358]
            4. The estimated location is: [-240, 403]
496 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.57735027 0.57735027 0.4472136 ]) = 1.60186414
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.57735027 0.57735027 0.4472136 ] / sum_similarity = [0.35423612 0.35423612 0.28952776]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.35423612 0.35423612 0.28952776] * [[-240.  595.]
 [-600.  120.]
 [-240.  595.]]) = [-188.642448 524.842448]
            4. The estimated location is: [-188, 524]
497 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.37796447 0.33333333 0.24253563]) = 0.95383343
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 0.95383343 = 0.39384244
            weight_2 = 0.33333333 / 0.95383343 = 0.34883721
            weight_3 = 0.24253563 / 0.95383343 = 0.25332013
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.39384244 * [-240.  595.] + 0.34883721 * [-120.  395.] + 0.25332013 * [-240.  595.]]
            estimated_position = [-92.84444444444444, 238.4444444444444]
            4. The estimated location is: [-92.84444444444444, 238.4444444444444]
498 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([0.57735027 0.37796447 0.33333333]) = 1.28864797
            neighbor_weight = [0.57735027 0.37796447 0.33333333] / 1.28864797 = [0.44444444 0.29289617 0.26268366]
            2. Calculate the estimated position:
            estimated_position = sum([0.44444444 0.29289617 0.26268366] * [[-720.  395.]
            [-360.  240.]
            [-240.  595.]]) = [-720. * 0.44444444 + -360. * 0.29289617 + -240. * 0.26268366, 395. * 0.44444444 + 240. * 0.29289617 + 595. * 0.26268366]
            estimated_position = [-313.64444444444446, 238.36666666666666]
            The estimated location is: [-313, 238]
499 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.70710678 0.70710678 0.11043153]) = 1.52424431
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.70710678 / 1.52424431, 0.70710678 / 1.52424431, 0.11043153 / 1.52424431] = [0.46666667, 0.46666667, 0.07333333]
            3. Calculate the estimated position:
            estimated_position = sum([0.46666667, 0.46666667, 0.07333333] * [[-150. -450.], [-150. -450.], [-150. -450.]]) = [-150. -450.]
            4. The estimated location is: [-150, -450]
500 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.31622777 0.30151134]) = 0.81773801
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 0.81773801 = 0.60653064
            weight_2 = 0.31622777 / 0.81773801 = 0.38346936
            weight_3 = 0.30151134 / 0.81773801 = 0.36957901
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.60653064 * (-150.) + 0.38346936 * (-720.) + 0.36957901 * (-150.)]
            estimated_position = [-91.844744 -265.444744 -54.844744]
            4. The final estimated position is the sum of the weighted average:
            estimated_position = [-91.844744 -265.444744 -54.844744] + [0. 0.]
            estimated_position = [-91.844744 -265.444744]
            The estimated location is: [-91.844744, -265.444744]
501 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.57735027 0.4472136  0.11250879]) = 1.13707273
            2. Normalize the similarities: neighbor_weight = [0.52384609 0.39492352 0.08122048]
            3. Calculate the estimated position: estimated_position = sum([0.52384609 0.39492352 0.08122048] * [[-150. -450.] [-150. -450.] [-150. -450.]])
            4. The estimated location is: [-150. -450.]
502 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.16903085 0.16012815 0.16012815]) = 0.48916105
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.16903085 0.16012815 0.16012815] / sum_similarity = [0.34384617 0.32484617 0.32484617]
            3. Calculate the estimated position:
            estimated_position = sum([0.34384617 0.32484617 0.32484617] * [[-720.  395.] [-150. -450.] [-150. -450.]]) = [-546. -144.]
            4. The estimated location is: [-546, -144]
503 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.70710678 0.5 0.10540926]) = 1.31251604
            2. Calculate the weight of each neighbor:
            weight_1 = 0.70710678 / 1.31251604 = 0.54147098
            weight_2 = 0.5 / 1.31251604 = 0.38254032
            weight_3 = 0.10540926 / 1.31251604 = 0.07698864
            3. Calculate the estimated position:
            estimated_position = sum([0.54147098 * [-150. -450.]
                                     0.38254032 * [-150. -450.]
                                     0.07698864 * [-150. -450.]])
            estimated_position = [-150. * (0.54147098 + 0.38254032 + 0.07698864) - 450. * (0.54147098 + 0.38254032 + 0.07698864)]
            estimated_position = [-150. * 1.00060834 - 450. * 1.00060834]
            estimated_position = [-150.00060834, -450.00060834]
            The estimated location is: [-150.00060834, -450.00060834]
504 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.14002801 0.12216944 0.12216944]) = 0.38422649
            2. Calculate the weight of each neighbor:
            weight_1 = 0.14002801 / 0.38422649 = 0.36458344
            weight_2 = 0.12216944 / 0.38422649 = 0.31688889
            weight_3 = 0.12216944 / 0.38422649 = 0.31688889
            3. Calculate the estimated position:
            estimated_position = sum([0.36458344 * [-150. -450.]
                                     0.31688889 * [-150. -450.]
                                     0.31688889 * [-150. -450.]])
            estimated_position = [-150 * (0.36458344 + 0.31688889 + 0.31688889) - 450 * (0.36458344 + 0.31688889 + 0.31688889)]
            estimated_position = [-150 * 1.00043168 - 450 * 1.00043168]
            estimated_position = [-1500. -4500.]
            The estimated location is: [-1500, -4500]
505 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.24253563 0.18257419 0.17149859]) = 0.59659832
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.24253563 0.18257419 0.17149859] / sum_similarity = [0.40789471 0.29463827 0.29746692]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.40789471 0.29463827 0.29746692] * [[-120.    0.]
            [-360.  795.]
            [-720.    0.]]) = [-186.43234 393.68666]
            4. The estimated location is: [-186.43234, 393.68666]
506 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.40824829 0.2773501  0.25      ]) = 0.93264848
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 0.93264848 = 0.43689655
            weight_2 = 0.2773501 / 0.93264848 = 0.29768211
            weight_3 = 0.25 / 0.93264848 = 0.26945734
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.43689655 * [-120.    0.] + 0.29768211 * [-720.    0.] + 0.26945734 * [-720.    0.]]
            estimated_position = [-100.67444444444446, -180.46444444444446]
            4. The estimated location is: [-100.67444444444446, -180.46444444444446]
507 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.4472136  0.28867513 0.18898224]) = 0.92487107
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 0.92487107 = 0.48333334
            weight_2 = 0.28867513 / 0.92487107 = 0.31232498
            weight_3 = 0.18898224 / 0.92487107 = 0.20130166
            3. Calculate the estimated position:
            estimated_position = sum([0.48333334 * [-120.    0.]
                                     0.31232498 * [-120.    0.]
                                     0.20130166 * [-120.    0.]])
            estimated_position = [-144.66666666666667, 0.]
            4. The estimated location is: [-144.66666666666667, 0.]
508 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.25 0.23570226 0.20851441]) = 0.69371667
            2. Calculate the weight of each neighbor:
            weight_1 = 0.25 / 0.69371667 = 0.35714286
            weight_2 = 0.23570226 / 0.69371667 = 0.33885784
            weight_3 = 0.20851441 / 0.69371667 = 0.29352828
            3. Calculate the estimated position:
            estimated_position = sum([0.35714286 * [-360.  795.]
                                     0.33885784 * [-120.    0.]
                                     0.29352828 * [-360.  795.]])
            estimated_position = [-128.6421436 238.6421436]
            4. The estimated location is: [128, 239]
509 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.4472136  0.40824829 0.35355339]) = 1.20901528
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 1.20901528 = 0.37048154
            weight_2 = 0.40824829 / 1.20901528 = 0.33863646
            weight_3 = 0.35355339 / 1.20901528 = 0.29087196
            3. Calculate the estimated position:
            estimated_position = sum([0.37048154 * [-720.    0.]
                                     0.33863646 * [-720.    0.]
                                     0.29087196 * [-120.    0.]])
            estimated_position = [-258.247442 -0.]
            4. The estimated location is: [-258.247442, 0]
510 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.33333333 0.31622777 0.30151134]) = 0.95107244
            2. Calculate the weight of each neighbor:
            neighbor_weight = [0.33333333 0.31622777 0.30151134] / sum_similarity = [0.34444444 0.32222222 0.27777778]
            3. Perform the weighted averaging calculation:
            estimated_position = sum([0.34444444 0.32222222 0.27777778] * [[-720.  395.]
            [-480.  120.]
            [-150. -450.]]) = [-548.666666667  183.666666667]
            4. The estimated location is: [-548, 184]
511 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.40824829 0.35355339 0.31622777]) = 1.07802945
            2. Calculate the weight of each neighbor:
            weight_1 = 0.40824829 / 1.07802945 = 0.38194707
            weight_2 = 0.35355339 / 1.07802945 = 0.32863164
            weight_3 = 0.31622777 / 1.07802945 = 0.28942024
            3. Calculate the estimated position:
            estimated_position = sum([0.38194707 * [-240.  120.]
                                     0.32863164 * [-240.  120.]
                                     0.28942024 * [-120.  120.]])
            estimated_position = [-240. * (0.38194707 + 0.32863164 + 0.28942024) + 120. * (0.38194707 + 0.32863164 + 0.28942024)]
            estimated_position = [-240. * 1 + 120. * 1]
            estimated_position = [-240. + 120.]
            estimated_position = [-120.]
            4. Since the RSSI data only provides the x-coordinate, the y-coordinate is not available.
            ANSWER: [-120, None]
512 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.4472136 0.28867513 0.20851441]) = 1.04440314
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 1.04440314 = 0.43142857
            weight_2 = 0.28867513 / 1.04440314 = 0.27586206
            weight_3 = 0.20851441 / 1.04440314 = 0.19271937
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = [(0.43142857 * -120) + (0.27586206 * -120) + (0.19271937 * -720) + (0 * 120) + (0 * 120) + (0 * 395)] = [-204.44 -204.44 -134.56]
            4. The estimated position is a vector, to get the final position, we take the average of the x and y components:
            estimated_position_x = (-204.44 + -204.44 + -134.56) / 3 = -184.48
            estimated_position_y = 0
            5. The final answer is: [%d, %d]
            ANSWER: [-184.48, 0]
513 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([1. 1. 0.28867513]) = 2.28867513
            2. Calculate the weight of each neighbor:
            weight_1 = 1 / 2.28867513 = 0.4388888888888889
            weight_2 = 1 / 2.28867513 = 0.4388888888888889
            weight_3 = 0.28867513 / 2.28867513 = 0.1234567901234568
            3. Calculate the estimated position:
            estimated_position = (0.4388888888888889 * [-120.  120.]) + (0.4388888888888889 * [-120.  120.]) + (0.1234567901234568 * [-120.  120.])
            estimated_position = [-120. + 120. - 120. + 120.] = [0, 0]
            4. The estimated location is: [0, 0]
514 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.19245009 0.11470787 0.11250879]) = 0.41966675
            2. Calculate the weight of each neighbor:
            weight_1 = 0.19245009 / 0.41966675 = 0.45999998
            weight_2 = 0.11470787 / 0.41966675 = 0.27200001
            weight_3 = 0.11250879 / 0.41966675 = 0.26800001
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.45999998 * [-120.  120.] + 0.27200001 * [-240.  120.] + 0.26800001 * [-480.    0.]]
            estimated_position = [-103.6, 30.4]
            The estimated location is: [-103.6, 30.4]
515 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([0.37796447 0.33333333 0.31622777]) = 1.02752567
            2. Calculate the weight of each neighbor:
            weight_1 = 0.37796447 / 1.02752567 = 0.36698444
            weight_2 = 0.33333333 / 1.02752567 = 0.32380952
            weight_3 = 0.31622777 / 1.02752567 = 0.30920559
            3. Calculate the estimated position:
            estimated_position = [weight_1 * neighbor_position_1 + weight_2 * neighbor_position_2 + weight_3 * neighbor_position_3]
            estimated_position = [0.36698444 * [-120.  120.] + 0.32380952 * [-120.  120.] + 0.30920559 * [-120.  120.]]
            estimated_position = [-120.  120.]

            The estimated location is: [120, -120]
516 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.17149859 0.16903085 0.15430335]) = 0.4948328
            2. Calculate the weight of each neighbor:
            weight_1 = 0.17149859 / 0.4948328 = 0.3464844
            weight_2 = 0.16903085 / 0.4948328 = 0.3428889
            weight_3 = 0.15430335 / 0.4948328 = 0.3086267
            3. Calculate the weighted average of the neighbor positions:
            estimated_position = (0.3464844 * [-120.  240.]) + (0.3428889 * [-240.  120.]) + (0.3086267 * [-240.  120.])
            estimated_position = [-103.6 144.4]

            The estimated location is: [103.6, 144.4]
517 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.4472136 0.23570226 0.21821789]) = 0.90113355
            2. Calculate the weight of each neighbor:
            weight_1 = 0.4472136 / 0.90113355 = 0.49664774
            weight_2 = 0.23570226 / 0.90113355 = 0.26176594
            weight_3 = 0.21821789 / 0.90113355 = 0.24043632
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.49664774 * [-240.  240.] + 0.26176594 * [-360.  120.] + 0.24043632 * [-360.  120.] ]
            estimated_position = [-118.827952 -53.172048]
            The estimated location is: [-118.827952, -53.172048]
518 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.5 0.26726124 0.18257419]) = 1.94983543
            2. Calculate the weight of each neighbor:
            weight_1 = 0.5 / 1.94983543 = 0.25714286
            weight_2 = 0.26726124 / 1.94983543 = 0.13736847
            weight_3 = 0.18257419 / 1.94983543 = 0.09348867
            3. Calculate the estimated position:
            estimated_position = sum([0.25714286 * [-120.  240.]
                                     0.13736847 * [-120.  240.]
                                     0.09348867 * [-120.  240.]])
            estimated_position = [-120. * (0.25714286 + 0.13736847 + 0.09348867) + 240. * (0.25714286 + 0.13736847 + 0.09348867)]
            estimated_position = [-120. * 0.50800001 + 240. * 0.50800001]
            estimated_position = [-60.4, 121.6]
            The estimated location is: [60.4, 121.6]
519 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.35355339 0.21320072 0.18257419]) = 0.7493283
            2. Calculate the weight of each neighbor:
            weight_1 = 0.35355339 / 0.7493283 = 0.47142857
            weight_2 = 0.21320072 / 0.7493283 = 0.2835056
            weight_3 = 0.18257419 / 0.7493283 = 0.24500573
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.47142857 * [-120.  240.] + 0.2835056 * [-120.  240.] + 0.24500573 * [-120.  240.]]
            estimated_position = [-120. + 0.47142857 * 240. - 0.2835056 * 240. - 0.24500573 * 240.]
            estimated_position = [-120. + 111.856644 + (-56.66112 + -56.66112)]
            estimated_position = [-120. + 111.856644 - 113.32224]
            estimated_position = [-120. - 1.4656]
            estimated_position = [-120. - 1]

            The estimated location is: [-120, -1]
520 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.22941573 0.2        0.18898224]) = 0.44840001
            2. Calculate the weight of each neighbor:
            weight_1 = 0.22941573 / 0.44840001 = 0.51054654
            weight_2 = 0.2 / 0.44840001 = 0.44444444
            weight_3 = 0.18898224 / 0.44840001 = 0.41495346
            3. Calculate the estimated position:
            estimated_position = sum([0.51054654 * [-240.  120.]
                                     0.44444444 * [-240.  120.]
                                     0.41495346 * [-240.  120.]])
            estimated_position = [-240. * (0.51054654 + 0.44444444 + 0.41495346) + 120. * (0.51054654 + 0.44444444 + 0.41495346)]
            estimated_position = [-240. * 1.37004444 + 120. * 1.37004444]
            estimated_position = [-324. + 156.]
            estimated_position = [-168.]
            estimated_y = 120.
            estimated_position = [-168., 120.]
            The estimated location is: [-168., 120.]
521 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.31622777 0.30151134 0.24253563]) = 0.86027474
            2. Calculate the weight of each neighbor:
            weight_1 = 0.31622777 / 0.86027474 = 0.36576275
            weight_2 = 0.30151134 / 0.86027474 = 0.34723359
            weight_3 = 0.24253563 / 0.86027474 = 0.28659766
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.36576275 * -840. + 0.34723359 * -240. + 0.28659766 * -120.]
            estimated_position = [-310. -85. -33.]
            4. The estimated location is: [-310, -85]
522 done_____________________________
1. Calculate the weight of each neighbor:
            sum_similarity = sum([1. 0.35355339 0.28867513]) = 1.64222852
            neighbor_weight = [1. / 1.64222852 0.35355339 / 1.64222852 0.28867513 / 1.64222852] = [0.60653064 0.21388889 0.17957047]
            2. Calculate the estimated position:
            estimated_position = [0.60653064 * [-120.  395.] + 0.21388889 * [-960.  600.] + 0.17957047 * [-960.  600.]] = [-153.63215366 236.48684636]
            The estimated location is: [-153.63215366, 236.48684636]
523 done_____________________________
1. Calculate the sum of similarities: sum_similarity = sum([0.26726124 0.23570226 0.21821789]) = 0.7111814
            2. Calculate the weight of each neighbor:
            weight_1 = 0.26726124 / 0.7111814 = 0.3748984
            weight_2 = 0.23570226 / 0.7111814 = 0.3316667
            weight_3 = 0.21821789 / 0.7111814 = 0.3032339
            3. Calculate the estimated position:
            estimated_position = [weight_1 * position_1 + weight_2 * position_2 + weight_3 * position_3]
            estimated_position = [0.3748984 * [-120.  395.] + 0.3316667 * [-480.  395.] + 0.3032339 * [-480.  395.] ]
            estimated_position = [-104.434 - 148.434]
            The estimated location is: [-104.434, -148.434]
524 done_____________________________
1. First, calculate the sum of similarities: sum_similarity = sum([1.00000000e+04 1.79605302e-01 1.64398987e-01]) = 1.00000000e+04 + 1.79605302e-01 + 1.64398987e-01 = 1.00000001e+04
            2. Calculate the weight of each neighbor:
            neighbor_weight = [1.00000000e+04 1.79605302e-01 1.64398987e-01] / sum_similarity = [1.00000000e+04 1.79605302e-05 1.64398987e-05]
            3. Calculate the estimated position:
            estimated_position = sum([1.00000000e+04 1.79605302e-05 1.64398987e-05] * [[-120.  395.] [-120.  395.] [-390. -360.]]) = [-120. * 1.00000000e+04 + -120. * 1.79605302e-05 + -390. * 1.64398987e-05, 395. * 1.00000000e+04 + 395. * 1.79605302e-05 + -360. * 1.64398987e-05] = [-120000000 + -19.999999999999998 + -599.9
525 done_____________________________
mse is 797413.4918403651
